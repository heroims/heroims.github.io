{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":1,"renderable":1},{"_id":"source/assets/blogImage/3994053-006976bd750f8324.jpeg","path":"assets/blogImage/3994053-006976bd750f8324.jpeg","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-09985d3c5f1764f0.png","path":"assets/blogImage/3994053-09985d3c5f1764f0.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-11c43091e54007da.webp","path":"assets/blogImage/3994053-11c43091e54007da.webp","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-179bfa5cc5cac5ad.webp","path":"assets/blogImage/3994053-179bfa5cc5cac5ad.webp","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-18807a49c709e49a.png","path":"assets/blogImage/3994053-18807a49c709e49a.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-1fd000b267fa2f10.png","path":"assets/blogImage/3994053-1fd000b267fa2f10.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-25ee66acdb89e0d2.png","path":"assets/blogImage/3994053-25ee66acdb89e0d2.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-2624d222fb298087.png","path":"assets/blogImage/3994053-2624d222fb298087.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-1e7f9f22cfc89904.png","path":"assets/blogImage/3994053-1e7f9f22cfc89904.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-4cdcb0ac2b4b4918.png","path":"assets/blogImage/3994053-4cdcb0ac2b4b4918.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-6172f40aabb17548.jpeg","path":"assets/blogImage/3994053-6172f40aabb17548.jpeg","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-6076902ef0296120.png","path":"assets/blogImage/3994053-6076902ef0296120.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-6cb0e72bd8827012.jpg","path":"assets/blogImage/3994053-6cb0e72bd8827012.jpg","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-76c183e70ef95e13.png","path":"assets/blogImage/3994053-76c183e70ef95e13.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-8354e86d99016a71.webp","path":"assets/blogImage/3994053-8354e86d99016a71.webp","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-87e9c9897c77efce.png","path":"assets/blogImage/3994053-87e9c9897c77efce.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-8d78f46f6c1acb2c.webp","path":"assets/blogImage/3994053-8d78f46f6c1acb2c.webp","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-92d4b200d7f69e69.png","path":"assets/blogImage/3994053-92d4b200d7f69e69.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-9d09b7f7d4badfed.png","path":"assets/blogImage/3994053-9d09b7f7d4badfed.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-b615d4cd5618c465.png","path":"assets/blogImage/3994053-b615d4cd5618c465.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-b83bb9df3c448f43.png","path":"assets/blogImage/3994053-b83bb9df3c448f43.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-f2f6768c6d73d371.jpeg","path":"assets/blogImage/3994053-f2f6768c6d73d371.jpeg","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-f4eded6ede7d355f.webp","path":"assets/blogImage/3994053-f4eded6ede7d355f.webp","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/assets/blogImage/3994053-07f0d5802141a7ae.png","path":"assets/blogImage/3994053-07f0d5802141a7ae.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-0cbf93e2a6e0e7b9.png","path":"assets/blogImage/3994053-0cbf93e2a6e0e7b9.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-0e44f460d8fc63fa.png","path":"assets/blogImage/3994053-0e44f460d8fc63fa.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-233a4ab906d1dad8.webp","path":"assets/blogImage/3994053-233a4ab906d1dad8.webp","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-254e821d28eb7c80.png","path":"assets/blogImage/3994053-254e821d28eb7c80.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-2793ebe6fce228a3.webp","path":"assets/blogImage/3994053-2793ebe6fce228a3.webp","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-3112177a3c76dafa.png","path":"assets/blogImage/3994053-3112177a3c76dafa.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-36feba23b8a9e57d.png","path":"assets/blogImage/3994053-36feba23b8a9e57d.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-46f6bef1c87511f6.png","path":"assets/blogImage/3994053-46f6bef1c87511f6.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-79ea56d0ef0438f4.png","path":"assets/blogImage/3994053-79ea56d0ef0438f4.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-9d9e6f40bfb9aff4.png","path":"assets/blogImage/3994053-9d9e6f40bfb9aff4.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-b6703baf65c2858c.png","path":"assets/blogImage/3994053-b6703baf65c2858c.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-b86496d5219b2efd.png","path":"assets/blogImage/3994053-b86496d5219b2efd.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-c86836b8b7d2d84b.png","path":"assets/blogImage/3994053-c86836b8b7d2d84b.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-d3c16047c368349d.png","path":"assets/blogImage/3994053-d3c16047c368349d.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-f6b8369f75849747.png","path":"assets/blogImage/3994053-f6b8369f75849747.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-fad34baa2afc46ac.png","path":"assets/blogImage/3994053-fad34baa2afc46ac.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/83356518.png","path":"assets/blogImage/83356518.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-7137938cc9101b7c.png","path":"assets/blogImage/3994053-7137938cc9101b7c.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-b7202d3e94f22e28.png","path":"assets/blogImage/3994053-b7202d3e94f22e28.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-defff1bd06fc295d.png","path":"assets/blogImage/3994053-defff1bd06fc295d.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-17ea70096ec3e073.png","path":"assets/blogImage/3994053-17ea70096ec3e073.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-1d4286b24563a1db.png","path":"assets/blogImage/3994053-1d4286b24563a1db.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-358e0b85dec95f1a.png","path":"assets/blogImage/3994053-358e0b85dec95f1a.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-50a770f7ab269284.png","path":"assets/blogImage/3994053-50a770f7ab269284.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-ea973b927dfa3697.png","path":"assets/blogImage/3994053-ea973b927dfa3697.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-110e3d513c3b7a6a.png","path":"assets/blogImage/3994053-110e3d513c3b7a6a.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-5739deca1545b24e.png","path":"assets/blogImage/3994053-5739deca1545b24e.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-79683114fe1a73c7.png","path":"assets/blogImage/3994053-79683114fe1a73c7.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-b39c7f556d923efc.png","path":"assets/blogImage/3994053-b39c7f556d923efc.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-e117da8394ea0169.png","path":"assets/blogImage/3994053-e117da8394ea0169.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-e76e7039112a47c8.png","path":"assets/blogImage/3994053-e76e7039112a47c8.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/WX20211206-012426@2x.png","path":"assets/blogImage/WX20211206-012426@2x.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/WX20211228-021611@2x.png","path":"assets/blogImage/WX20211228-021611@2x.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-3d3054a05c96b72a.png","path":"assets/blogImage/3994053-3d3054a05c96b72a.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-05536c4e64d907eb.png","path":"assets/blogImage/3994053-05536c4e64d907eb.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-bf61aba6d19b56e6.png","path":"assets/blogImage/3994053-bf61aba6d19b56e6.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-7851701440866c65.png","path":"assets/blogImage/3994053-7851701440866c65.png","modified":1,"renderable":0},{"_id":"source/assets/blogImage/3994053-49e94a40169f202f.png","path":"assets/blogImage/3994053-49e94a40169f202f.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"78eb53414eaed87bac47524419b54f227066af1b","modified":1631674610467},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1625736031284},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1625736031283},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1625736031284},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1625736031283},{"_id":"themes/yilia/README.md","hash":"86757b00d393bd4956a252d92a469f11f2ae8914","modified":1625736031284},{"_id":"themes/yilia/_config.yml","hash":"4bb6a61bab696b0a8da552c9b42bfe61209a29a7","modified":1625736031284},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1625736031296},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1625736031316},{"_id":"source/_posts/(无网通信)MDNS实现设备间的发现与通信.md","hash":"23dbd9ababc57fcc86826ff12a949ee4877f34c7","modified":1638725495257},{"_id":"source/_posts/Cocoa-iOS-OSX-安保系统设计实现.md","hash":"0352bcb927c80d84386f62f7c08730a87737919e","modified":1625736031218},{"_id":"source/_posts/CocoaPods 动:静态库封装组件化.md","hash":"d765dec1d4f9a62e6a03edcbe1abe0020ff402d3","modified":1625736031219},{"_id":"source/_posts/Http中的Content-Type.md","hash":"4e3d9050148dd31cf90072cb298a099e9915cf6d","modified":1625736031219},{"_id":"source/_posts/AES-128-CBC Base64加密——OC,Java,Golang联调.md","hash":"40f0b3094c0a5cc446cb1f1973ecadb9d3010435","modified":1625736031218},{"_id":"source/_posts/IOS 百行代码切面日志.md","hash":"cd1d81bf7bab448d0e04237164aad5482027153d","modified":1625736031220},{"_id":"source/_posts/IOS 切面统计事件解耦.md","hash":"0bee041bf071bce50dac8b283ad3f7b1dfe53dca","modified":1625736031219},{"_id":"source/_posts/IOS 网络服务层自动化详解.md","hash":"1f26e23585ffade563679000a0ddd5e73a6d814d","modified":1625736031220},{"_id":"source/_posts/IOS-各类获取授权处理.md","hash":"3e8237668e324e0ed4454724c3dc0d95f2e35969","modified":1625736031220},{"_id":"source/_posts/IOS百行代码全局语言本地化:国际化.md","hash":"28b0fd431891be7d631574c02e3d62d9d99abd42","modified":1625736031221},{"_id":"source/_posts/IOS常用数学函数.md","hash":"4de93642e4b9a1188a054a0a67f6ebde58881f9c","modified":1625736031221},{"_id":"source/_posts/IOS组件化与工程管理.md","hash":"7dd55ed208cba9554e03c5e365c81b800aa8552a","modified":1625736031221},{"_id":"source/_posts/Linux 构建:编译IOS:Mac程序.md","hash":"d7e2f31085580edb8fffeec20d6bc5bf4130b078","modified":1625736031221},{"_id":"source/_posts/Mesh组网与智能路由器系统.md","hash":"fafc06b9f0d104473ab612143fdc8bb43af8c29e","modified":1638899577893},{"_id":"source/_posts/OLLVM代码混淆移植与使用(续).md","hash":"7371bd9abf050fae75f48d0dac25732c08c32c2e","modified":1640629045846},{"_id":"source/_posts/OLLVM代码混淆移植与使用.md","hash":"46c5cda58bd07aa8dabdbc90b887b5790968d44a","modified":1640629392075},{"_id":"source/_posts/Pods的static-framework使用感受.md","hash":"e0c4e469adcb44c3177080d254e5f44cbcaecdce","modified":1625736031222},{"_id":"source/_posts/WebView-常见开发误区.md","hash":"00ac9347301f18c6d3b9286a53384559dcbc9f29","modified":1625736031222},{"_id":"source/_posts/Xcode-配置多种scheme完美使用（配合Pods）.md","hash":"cc1d7d09d767844a4ad46b3d4ea38fbe022f8227","modified":1625745604209},{"_id":"source/_posts/Xcode添加静态库以及编译选项配置常见问题.md","hash":"3bd5b66ad116decddda3c8af26b510744dc0c4d4","modified":1625736031223},{"_id":"source/_posts/浏览器判断是否安装了ios-android客户端程序.md","hash":"fd536f89f81baaa0cea1ca0e8f2d8b3f36efdd8c","modified":1625741519875},{"_id":"source/_posts/ffmpeg参数说明.md","hash":"ef38c560f1f34bd04c8fcfd9cedeb94f4d278cf4","modified":1625736031223},{"_id":"source/_posts/移动端Model层与Server服务层自动化.md","hash":"5de53f406164cf515c17643621a19b5c04718976","modified":1625736031224},{"_id":"source/_posts/视频处理开发常见问题.md","hash":"885d8a0e2536f8989b2f7336c0546cde92623029","modified":1625736031224},{"_id":"source/assets/.DS_Store","hash":"b3b932a7ec77e7967e3746515b90ff46357880de","modified":1638119585762},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1625736031285},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1625736031285},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1625736031285},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1625736031285},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1625736031285},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1625736031286},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1625736031286},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1625736031295},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1625736031295},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1625736031295},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1625736031296},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1625736031296},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1625736031296},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1625736031296},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1625736031314},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1625736031316},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1625736031297},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1625736031310},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625736031292},{"_id":"themes/yilia/source/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1625736031315},{"_id":"themes/yilia/source/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1625736031315},{"_id":"source/assets/blogImage/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1637862692065},{"_id":"source/assets/blogImage/3994053-006976bd750f8324.jpeg","hash":"dbe88c7238ee08540a59f381e92e71dcaae5f448","modified":1625736031225},{"_id":"source/assets/blogImage/3994053-09985d3c5f1764f0.png","hash":"7104f682edd579933ab5534b4667c28c935085ed","modified":1625736031226},{"_id":"source/assets/blogImage/3994053-11c43091e54007da.webp","hash":"e72719c3a7e63f24c79f255809279c6efdc054c5","modified":1637862627636},{"_id":"source/assets/blogImage/3994053-179bfa5cc5cac5ad.webp","hash":"8c535c657115e4b183d3bcec18860ec9797d7622","modified":1637862599593},{"_id":"source/assets/blogImage/3994053-18807a49c709e49a.png","hash":"08aba053d880e578595c9c2c2a9fec7921e2f957","modified":1625736031232},{"_id":"source/assets/blogImage/3994053-1fd000b267fa2f10.png","hash":"e4ca6d48702c7f15963b287209803e6d2e6f56de","modified":1625736031234},{"_id":"source/assets/blogImage/3994053-25ee66acdb89e0d2.png","hash":"5ce42459039960741ce3c87cef86c2c7ad140764","modified":1625736031236},{"_id":"source/assets/blogImage/3994053-2624d222fb298087.png","hash":"ee280630ae744792623a145dcc5607d531be5800","modified":1625736031236},{"_id":"source/assets/blogImage/3994053-1e7f9f22cfc89904.png","hash":"8674e4a32846bfd35382463db2522de88b5243a3","modified":1625736031234},{"_id":"source/assets/blogImage/3994053-4cdcb0ac2b4b4918.png","hash":"279a32111dfb286594635aebb581c91a2699b6cb","modified":1625736031247},{"_id":"source/assets/blogImage/3994053-6172f40aabb17548.jpeg","hash":"36e7d31b2e0c596450c523a2a0b4a72158d1d4c3","modified":1625736031251},{"_id":"source/assets/blogImage/3994053-6076902ef0296120.png","hash":"caa957fb727b10fb281b8091833f0567471bc586","modified":1625736031251},{"_id":"source/assets/blogImage/3994053-6cb0e72bd8827012.jpg","hash":"aeb2ff4c70ce56b6a8cfebc834acfdbe89a1d29d","modified":1625736031252},{"_id":"source/assets/blogImage/3994053-76c183e70ef95e13.png","hash":"87648ac9df5f201b66d764ce27442ae45535bb58","modified":1625736031253},{"_id":"source/assets/blogImage/3994053-8354e86d99016a71.webp","hash":"6d35813646defd9015dc1cea32fb7a27e95059c0","modified":1637862543378},{"_id":"source/assets/blogImage/3994053-87e9c9897c77efce.png","hash":"cd74a46dedddf27f5bc07e77d0813e7c61932b41","modified":1625736031262},{"_id":"source/assets/blogImage/3994053-8d78f46f6c1acb2c.webp","hash":"cf4c64551c2e1fee2804b0ac2d1a879afcaebd8f","modified":1637862530453},{"_id":"source/assets/blogImage/3994053-92d4b200d7f69e69.png","hash":"5f6d100e4ceb57ab86810e5874d2344c932687e3","modified":1625736031263},{"_id":"source/assets/blogImage/3994053-9d09b7f7d4badfed.png","hash":"204bdf3b1a0ea87cc6dc732dedd94bd9e62abb64","modified":1625736031263},{"_id":"source/assets/blogImage/3994053-b615d4cd5618c465.png","hash":"8b83d8bc1b8e868f87ae6fcc17802ce532e82cb8","modified":1625736031267},{"_id":"source/assets/blogImage/3994053-b83bb9df3c448f43.png","hash":"3629ad02fc7c24da90e99fa2815d11ee5efcda6a","modified":1625736031268},{"_id":"source/assets/blogImage/3994053-f2f6768c6d73d371.jpeg","hash":"68f07a76c6105418e43b594bde3530b8c22b60d6","modified":1625736031281},{"_id":"source/assets/blogImage/3994053-f4eded6ede7d355f.webp","hash":"cc3f0b2be123fc52c0a8fa3bbd7a69c0e74058cf","modified":1637862610043},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1625736031286},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1625736031286},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1625736031287},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"b75e8fff732292fa26b5a0b47cd253d4281e321a","modified":1625736031287},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1625736031287},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1625736031287},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"9bfcbd9e71401b6da6b2bbbe61e97625ca247b7a","modified":1625736031287},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1625736031288},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1625736031288},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1625736031288},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1625736031288},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1625736031289},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1625736031289},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1625736031289},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1625736031292},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1625736031293},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1625736031311},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1625736031311},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1625736031312},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1625736031312},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1625736031313},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1625736031313},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1625736031313},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1625736031313},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1625736031314},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1625736031297},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1625736031297},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1625736031298},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1625736031298},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1625736031298},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1625736031298},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1625736031298},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1625736031299},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1625736031299},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1625736031301},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1625736031302},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1625736031303},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1625736031303},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1625736031303},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1625736031304},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1625736031304},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1625736031304},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1625736031305},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1625736031305},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1625736031305},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1625736031305},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1625736031306},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1625736031306},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1625736031306},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1625736031306},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1625736031307},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1625736031307},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1625736031308},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1625736031308},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1625736031308},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1625736031308},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9bb1a4918c1b1ee62ce0a71381990a1978c51b2a","modified":1625736031308},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1625736031309},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1625736031309},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1625736031309},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1625736031309},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1625736031310},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1625736031310},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1625736031310},{"_id":"source/assets/blogImage/3994053-07f0d5802141a7ae.png","hash":"4d49d4a0225b8525cc5fd42a38b80ff4210a28cd","modified":1625736031226},{"_id":"source/assets/blogImage/3994053-0cbf93e2a6e0e7b9.png","hash":"6dcb488719f444997374c3e0374b3bfce5220ead","modified":1625736031227},{"_id":"source/assets/blogImage/3994053-0e44f460d8fc63fa.png","hash":"08386bdcebaad5841acfada11b8da76f8726fe17","modified":1625736031228},{"_id":"source/assets/blogImage/3994053-233a4ab906d1dad8.webp","hash":"fe8cb20416372ba2615e3d06954eca2c3b1a8541","modified":1637862639808},{"_id":"source/assets/blogImage/3994053-254e821d28eb7c80.png","hash":"f4bc98a9c6d94d6d3920f5b10f9a91c1d6b3e54b","modified":1625736031235},{"_id":"source/assets/blogImage/3994053-2793ebe6fce228a3.webp","hash":"99d27c42e407a30f28b45e1c352de63c8f365e37","modified":1637862649084},{"_id":"source/assets/blogImage/3994053-3112177a3c76dafa.png","hash":"840a8488ab666b70f906a7475fa967e566e4f56f","modified":1625736031237},{"_id":"source/assets/blogImage/3994053-36feba23b8a9e57d.png","hash":"2926fdbc8f30296177397e094d39b14d5374d96a","modified":1625736031239},{"_id":"source/assets/blogImage/3994053-46f6bef1c87511f6.png","hash":"90bfdf88dc14ad2298e5e2f5c0e6f69a970298ff","modified":1625736031242},{"_id":"source/assets/blogImage/3994053-79ea56d0ef0438f4.png","hash":"4f4dad1710e94cd24861ae76070943bebec40279","modified":1625736031262},{"_id":"source/assets/blogImage/3994053-9d9e6f40bfb9aff4.png","hash":"a461988284e85de0be33b961888a4bfa853cf961","modified":1625736031264},{"_id":"source/assets/blogImage/3994053-b6703baf65c2858c.png","hash":"99bc2a32ec62091bdb3b85fe698a86989d680fb0","modified":1625736031268},{"_id":"source/assets/blogImage/3994053-b86496d5219b2efd.png","hash":"171220e3d9771e471c09df881571b5250dab3910","modified":1625736031270},{"_id":"source/assets/blogImage/3994053-c86836b8b7d2d84b.png","hash":"8c5a9cef17b48c6c472eab7f0a65c90df61985db","modified":1625736031272},{"_id":"source/assets/blogImage/3994053-d3c16047c368349d.png","hash":"2e123fb687193b16310326b253ebe57fd3f32d5c","modified":1625736031274},{"_id":"source/assets/blogImage/3994053-f6b8369f75849747.png","hash":"01962fc6a4e7a47dad6ae6012457c97c6531b213","modified":1625736031282},{"_id":"source/assets/blogImage/3994053-fad34baa2afc46ac.png","hash":"847b11023ab6461f9d8a922a259a38baaafa1c7e","modified":1625736031283},{"_id":"source/assets/blogImage/83356518.png","hash":"d848230aad1dd992036a8abbb76673cb2d481f57","modified":1638899109970},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"171b130d25c36f496e4b43e3808707a8f1897729","modified":1625736031292},{"_id":"source/assets/blogImage/3994053-7137938cc9101b7c.png","hash":"e67757e2d3626143f37ecb46ffedf2e1801f803c","modified":1625736031253},{"_id":"source/assets/blogImage/3994053-b7202d3e94f22e28.png","hash":"2a6c69b8b38ef6391ffebed25937476e2772e294","modified":1638119575973},{"_id":"source/assets/blogImage/3994053-defff1bd06fc295d.png","hash":"53048f47351be6d2a53756f29c5254d1d9454c65","modified":1625736031275},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1625736031289},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1625736031289},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1625736031290},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1625736031290},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1625736031290},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1625736031290},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1625736031290},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1625736031291},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1625736031291},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1625736031299},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1625736031299},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1625736031300},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1625736031300},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1625736031300},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1625736031301},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1625736031301},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1625736031302},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1625736031302},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1625736031303},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1625736031304},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1625736031304},{"_id":"source/assets/blogImage/3994053-17ea70096ec3e073.png","hash":"2c5471f1e0fac5f87e86b7dd6ac7da37cda6d3ce","modified":1625736031231},{"_id":"source/assets/blogImage/3994053-1d4286b24563a1db.png","hash":"84242fd2b939ed0025244427fd8a9f648684357b","modified":1625736031233},{"_id":"source/assets/blogImage/3994053-358e0b85dec95f1a.png","hash":"0939478f211db8c1a4a27d9fe2e70f4b0534d333","modified":1625736031239},{"_id":"source/assets/blogImage/3994053-50a770f7ab269284.png","hash":"0f093fc0b1e6fc07ed4184a358da89baee3fd3a0","modified":1625736031248},{"_id":"source/assets/blogImage/3994053-ea973b927dfa3697.png","hash":"1ec9747182f8a5dd5689fd469bc00d3a00391a84","modified":1625736031280},{"_id":"source/assets/blogImage/3994053-110e3d513c3b7a6a.png","hash":"a20446ab96eb99e759b2140414e93b8ca33ea979","modified":1625736031229},{"_id":"source/assets/blogImage/3994053-5739deca1545b24e.png","hash":"fd08b801b76e0145e07fc5a3b82d278417fefa65","modified":1625736031250},{"_id":"source/assets/blogImage/3994053-79683114fe1a73c7.png","hash":"ef0eb6e53862255a407ebdf72bfc63decea21ab4","modified":1625736031261},{"_id":"source/assets/blogImage/3994053-b39c7f556d923efc.png","hash":"fa74932c5f4ed3cd75bee3ce47ba73450abffa14","modified":1625736031266},{"_id":"source/assets/blogImage/3994053-e117da8394ea0169.png","hash":"ae124a677211e4f01bba65ca2c541ea6db5ab014","modified":1625736031276},{"_id":"source/assets/blogImage/3994053-e76e7039112a47c8.png","hash":"e37a2267f141bfceea2577a9adb4185693a45647","modified":1625736031279},{"_id":"source/assets/blogImage/WX20211206-012426@2x.png","hash":"7ce2666a0cbc2a4f8f1bc7d9a3f849f6a0ab0a4e","modified":1638725071316},{"_id":"source/assets/blogImage/WX20211228-021611@2x.png","hash":"ea68c283c381cde6b77b160f311c3b3f93ef84dd","modified":1640628974119},{"_id":"source/assets/blogImage/3994053-3d3054a05c96b72a.png","hash":"a278a433e75428293184e81a0d3a5d1bc1161e11","modified":1625736031241},{"_id":"source/assets/blogImage/3994053-05536c4e64d907eb.png","hash":"862a0e306941ac4681f9db8265eaf691b7683cfd","modified":1638119542488},{"_id":"source/assets/blogImage/3994053-bf61aba6d19b56e6.png","hash":"da5d2702f94c72d95d252203b3a3386b18239ca4","modified":1625736031271},{"_id":"source/assets/blogImage/3994053-7851701440866c65.png","hash":"24a28d134566ddc9758c100d0dba5c8834bff933","modified":1625736031257},{"_id":"source/assets/blogImage/3994053-49e94a40169f202f.png","hash":"f04489165d95870434845269244a78abd926863c","modified":1625736031246}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"(无网通信)MDNS实现设备间的发现与通信","date":"2021-11-30T16:09:05.000Z","typora-root-url":"../","_content":"\n# 简介\n这里无网通信指的是没有互联网的通信方式，之前在区块链公司是做这块，现在怕自己以后忘了写一遍，之前搞工业机器人实在太忙，整个博客停了，也不搞移动了，现在离职了，创业也败了，该恢复一下之前的技术调整心态继续找工作了。\n\n所谓无网通信其实是不同设备互相发现然后连接进行通信，而互相发现的方式可以归纳成三种\n\n- 两个设备连接在同一个WIFI\n- 两个设备通过WLAN创建点对点连接\n- 两个设备通过蓝牙BLE创建点对点连接\n\n而前两种是最稳定的方式，可以使用Wifi Direct实现，而蓝牙BLE的方式就比较鸡肋了距离有限制大小也有限制，能Wifi直连肯定不用蓝牙。然而蓝牙的发现连接标准其实各个设备基本都遵循的是一套，但Wifi Direct则是实现方式多种多样像UPnP、Bonjour、DLNA、SLP抑或是其他技术都能实现。iOS用的自家Bonjour，而Android4.0后开始支持直接就叫Wifi Direct，不同设备直连基本都会遇到问题。这里以Android和iOS为例实现的基本逻辑其实都由MDNS与DNS-SD演化而来。\n\n确定了Wifi Direct以后又会发现一个问题就是这解决的是设备与设备的通信，也就是一对一，而理想的无网通信是多对多，信息流之间希望有多跳的能力也就是Mesh，这个最终我们也没完美解决，虽然Android和iOS里有一定的解决方案(创建群组实现多对多)但也有不同系统无法互通的问题和群组上限问题，但当时我们选择了更简单的方式就是由路由器去Mesh其他路由器，而设备加入到路由器的网络里直接用MDNS去发现然后链接通信，专业设备做专业事，Mesh组网和设备通信分摊到两个地方。\n\n## MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)\n\n简介里介绍完基本就确定了技术点就是Wifi Direct，而这项技术则是由MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)演化而来。\n\n首先MDNS和DNS-SD是DNS协议的两个扩展。MDNS扩展了域名服务系统，在链路本地多播上运行。DNS-SD添加了通过DNS发现网络服务的支持。MDNS原理就是在基于udp加入网络后向所有主机组播一个消息。\n\n基本流程就是基于某个自定义域名发布服务，发现设备，连接设备\n\n![Bonjour API](/assets/blogImage/WX20211206-012426@2x.png \"Bonjour API\")\n\n<!-- more -->\n\n## Andoid\n\n安卓官网写的很详细非常友好\n\n#### [独立设备下Andoid NSD](https://developer.android.com/training/connect-devices-wirelessly/nsd-wifi-direct)\n\n这里讲的是不加入到任何共同网络中的独立设备，通过android的Wifi Direct实现启动服务发现设备而且是有条件的发现，类似MDNS可以指定启动及发现服务的名称\n\n#### [在同一网络下Andoid NSD](https://developer.android.com/training/connect-devices-wirelessly/nsd)\n\n这里讲的是在设备加入到同一网络中发现设备，而这块则是最标准最通用的，遵循MDNS协议实现设备的发现解析出host，我们当时就是运用这个使得Android，iOS，其他设备都能在网络下互相发现我们的服务，其他设备用Golang的MDNS，github能搜到很多封装好的，而且区块链著名的二层网络Rainden Network的节点发现也有用到它。像智能设备的控制基本都可以选择这个方案解决\n\n#### [Andoid WIFI直连](https://developer.android.com/training/connect-devices-wirelessly/wifi-direct)\n\n这里主要讲的是第一个类似，但他是无差别的去发现附近开启对等连接的设备，然后还讲了分组和连接有点对标iOS MutipeerConnectivity的意思。\n\n\n\n## iOS\n\n首先苹果官网想通过关键词搜索相关技术你没看过WWDC基本上搜不出来，尤其是近几年的东西你就算搜出来，越是抽象的API越是没啥注释，越是看注释就知道怎么用的，它还给你来个示例代码。下面开始详细说说:\n\niOS主要提供了3个方式MutipeerConnectivity，[Network库](https://developer.apple.com/documentation/network?language=objc)，[NSNetService相关](https://developer.apple.com/search/?q=NSNetService),而我当时用的是NSNetService因为那个时候还没有Network库，现在这些类都已经被淘汰了，而MutipeerConnectivity虽然方法封装的更好用而且同时支持蓝牙和wifi直连，但你没法控制代码去控制用哪个，而且由于太标准无法做和android的通信，但如果是仅仅iOS间通信聊天，却能直接轻松实现群组间的聊天。\n\n#### [MutipeerConnectivity](https://developer.apple.com/library/archive/navigation/#section=Technologies&topic=MultipeerConnectivity)\n\n这示例代码实现了无网聊天在不加入网络的情况下发现附近的群组加入进行聊天，但是直接看代码还是有点费劲不向上面Android的文档讲了关键的几个方法，所以我就依照示例和常用的挑出核心代码简单讲一下。\n\n```objective-c\n\t\t//创建一个设备ID\n\t\tMCPeerID *peerID;\n    @try {\n        peerID = [[MCPeerID alloc] initWithDisplayName:self.displayNameTextField.text];\n    }\n    @catch (NSException *exception) {\n        NSLog(@\"Invalid display name [%@]\", self.displayNameTextField.text);\n        return NO;\n    }\n```\n\n\n\n```objective-c\n\t\t@try {\n      \t//创建广播对象，serviceType相当于房间名称，discoveryInfo是广播信息，这个方法相当于告诉附近的您愿意加入指定类型的回话,在委托里可以处理各种自定义逻辑\n        advertiser = [[MCNearbyServiceAdvertiser alloc] initWithPeer:peerID discoveryInfo:nil serviceType:self.serviceTypeTextField.text];\n    }\n    @catch (NSException *exception) {\n        NSLog(@\"Invalid service type [%@]\", self.serviceTypeTextField.text);\n        return NO;\n    }\n```\n\n\n\n```objective-c\n#pragma mark - MCNearbyServiceAdvertiserDelegate\n//可以通过invitationHandler传入accept进行连接会话结果过滤.\n- (void)            advertiser:(MCNearbyServiceAdvertiser *)advertiser\n  didReceiveInvitationFromPeer:(MCPeerID *)peerID\n                   withContext:(nullable NSData *)context\n             invitationHandler:(void (^)(BOOL accept, MCSession * __nullable session))invitationHandler;\n\n```\n\n\n\n\n\n```objective-c\n  // 开启广播\n\t[advertiser startAdvertisingPeer];\n\t// 停止广播\n  [advertiser stopAdvertisingPeer];\n```\n\n\n\n```objective-c\n        //创建回话对象，用于存放当前连接的会话\n        _session = [[MCSession alloc] initWithPeer:peerID securityIdentity:nil encryptionPreference:MCEncryptionRequired];\n        // 设置 MCSessionDelegate \n        _session.delegate = self;\n        // 创建广播对象，和之前的不同在于提供了接收邀请的标准界面\n        _advertiserAssistant = [[MCAdvertiserAssistant alloc] initWithServiceType:serviceType discoveryInfo:nil session:_session];\n        // 开启广播\n        [_advertiserAssistant start];\n```\n\n\n\n```objective-c\n\t\t//停止广播\n    [_advertiserAssistant stop];\n  \t//断开会话连接\n    [_session disconnect];\n```\n\n\n\n```objective-c\n  //发送消息给当前会话中的对象  \n\t[self.session sendData:messageData toPeers:self.session.connectedPeers withMode:MCSessionSendDataReliable error:&error];\n```\n\n\n\n```objective-c\n\t\tNSProgress *progress;\n    // 遍历连接的设备ID\n    for (MCPeerID *peerID in _session.connectedPeers) {\n\t\t\t\t//        imageUrl = [NSURL URLWithString:@\"http://images.apple.com/home/images/promo_logic_pro.jpg\"];\n        // 发送图片给对应设备\n        progress = [self.session sendResourceAtURL:imageUrl withName:[imageUrl lastPathComponent] toPeer:peerID withCompletionHandler:^(NSError *error) {\n            // Implement this block to know when the sending resource transfer completes and if there is an error.\n            if (error) {\n                NSLog(@\"Send resource to peer [%@] completed with Error [%@]\", peerID.displayName, error);\n            }\n            else {\n                // Create an image transcript for this received image resource\n                Transcript *transcript = [[Transcript alloc] initWithPeerID:_session.myPeerID imageUrl:imageUrl direction:TRANSCRIPT_DIRECTION_SEND];\n                [self.delegate updateTranscript:transcript];\n            }\n        }];\n    }\n```\n\n\n\n```objective-c\n#pragma mark - MCSessionDelegate\n//会话接受数据的时候调用\n- (void)session:(MCSession *)session didReceiveData:(NSData *)data fromPeer:(MCPeerID *)peerID\n{\n    \n}\n//会话状态发生改变的时候调用\n- (void)session:(MCSession *)session peer:(MCPeerID *)peerID didChangeState:(MCSessionState)state\n{\n  \n}\n```\n\n\n\n```objective-c\n  \t//创建搜索蓝牙设备控制器  \n\t\tMCBrowserViewController *browserViewController = [[MCBrowserViewController alloc] initWithServiceType:self.serviceType session:self.sessionContainer.session];\n                                                      \n\t\tbrowserViewController.delegate = self;\n    browserViewController.minimumNumberOfPeers = kMCSessionMinimumNumberOfPeers;\n    browserViewController.maximumNumberOfPeers = kMCSessionMaximumNumberOfPeers;\n\n    [self presentViewController:browserViewController animated:YES completion:nil];\n\n```\n\n\n\n```objective-c\n#pragma mark - MCBrowserViewControllerDelegate\n//搜索到设备后进行筛选用的回调\n- (BOOL)browserViewController:(MCBrowserViewController *)browserViewController shouldPresentNearbyPeer:(MCPeerID *)peerID withDiscoveryInfo:(NSDictionary *)info\n{\n    return YES;\n}\n\n//搜索界面点击完成的时候调用\n- (void)browserViewControllerDidFinish:(MCBrowserViewController *)browserViewController\n{\n    [browserViewController dismissViewControllerAnimated:YES completion:nil];\n}\n\n//搜索界面点击取消的时候调用\n- (void)browserViewControllerWasCancelled:(MCBrowserViewController *)browserViewController\n{\n    [browserViewController dismissViewControllerAnimated:YES completion:nil];\n}\n```\n\n\n\n上面就是实现聊天功能的一些代码片段，但反过来想一下，这个功能主要是实现发现附近设备加入聊天室聊天，这场景其实比较奇怪，离得不远的话聊两句破冰了肯定流传了毕竟离得不远直接面对面不是更好，只有在游戏场景里这种近点通信才是一个比较好的交流方式，比如游戏道具的互换，游戏竞技比赛这类场景跟这类技术才会比较搭配，聊天的话真的就当个例子就好。。。\n\n#### [NSNetService](https://developer.apple.com/library/archive/samplecode/WiTap)\n\n这里示例代码实现的是使用NSNetService实现两个设备连接后点击色块反馈，现在这个类已经被弃用代替方法是Network库。\n\n这里简单简绍就不已经示例代码了，因为这块可以直接实现和安卓的互通所以就以我个人总结的几个关键地方为主。\n\n安卓方面使用就是 [在同一网络下Andoid NSD](https://developer.android.com/training/connect-devices-wirelessly/nsd) 叙述的设置\n\n```objective-c\n//初始化广播服务为了和Android通信Domain为空字符串，其他的Android上都有，至于port就是你起服务的Socket端口\n_netServiceServer = [[NSNetService alloc] initWithDomain:self.netServiceDomain\n                                                            type:self.netServiceType\n                                                            name:self.netServerName\n                                                            port:self.tcpSocketServer.localPort];\n```\n\n\n\n```objective-c\n#pragma mark - Bonjour\n\n//发布服务\n- (BOOL) publishService {\n    [self.netServiceServer scheduleInRunLoop:[NSRunLoop currentRunLoop]\n                                     forMode:NSRunLoopCommonModes];\n    [self.netServiceServer setDelegate:self];\n    [self.netServiceServer publish];\n    \n    return YES;\n}\n\n//停止服务\n- (void) unpublishService {\n    if (self.netServiceServer) {\n        [self.netServiceServer stop];\n        [self.netServiceServer removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];\n        self.netServiceServer = nil;\n    }\n}\n```\n\n\n\n```objective-c\n    //设置委托\n\t\tnetService.delegate=self;\n\t\t//解析地址 超时时间为5秒\n    [netService resolveWithTimeout:5];\n```\n\n\n\n```objective-c\n#pragma mark - NSNetServiceDelegate\n//发布服务失败的时候调用\n-(void)netService:(NSNetService *)sender didNotPublish:(NSDictionary<NSString *,NSNumber *> *)errorDict{\n    \n}\n\n//地址解析完成的时候调用\n-(void)netServiceDidResolveAddress:(NSNetService *)sender{\n\n}\n```\n\n\n\n```objective-c\n//启动发现服务，之前测试停掉再启动就不生效了，所以每次都重新初始化\n- (BOOL)startWithServicesOfType:(NSString*)type inDomain:(NSString*)domain{\n    if ( netServiceBrowser != nil ) {\n        [self stop];\n    }\n    \n    netServiceBrowser = [[NSNetServiceBrowser alloc] init];\n    if( !netServiceBrowser ) {\n        return NO;\n    }\n    \n    netServiceBrowser.delegate = self;\n  \t//设置搜索的参数，与Android通信设置domain为空字符串\n    [netServiceBrowser searchForServicesOfType:type inDomain:domain];\n    \n    return YES;\n}\n\n//停止发现服务\n- (void)stop {\n    if ( netServiceBrowser == nil ) {\n        return;\n    }\n    \n    [netServiceBrowser stop];\n    netServiceBrowser = nil;\n    \n    [_servers removeAllObjects];\n}\n```\n\n通过上面代码就能实现iOS和Android发现彼此设备的IP和端口，只要你起好tcp的server就能进行连接通信，至于起server随便百度一下就有很多socket起服务的方法这里就不做赘述了我是直接用[CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket)，我当时为了保险做成了混合式发现入网后还会定期udp广播一下其实没必要。\n\n#### [Network库](https://developer.apple.com/documentation/network?language=objc)\n\n这个没在官方找到什么好的示例代码所以直接就给出了官方文档，在网上看到过不少散装的，NSNetService对应NWConnection初始化用NWEndpoint来初始化，NSNetServiceBrowser对应NWBrowser\n\n```swift\nimport Network\n\nlet parameter = NWParameters()\n//之前的属性NSNetServiceBrowser NSNetService现在都用NWParameters这个对象来传递\nparameter.includePeerToPeer = true\nlet browser = NWBrowser(for: .bonjour(type: \"services.dns-sd.\", domain: nil), using: parameter)\n//状态改变的时候回调\nbrowser.stateUpdateHandler = { state in\n    switch state {\n    case .ready:\n        print(\"ready\")\n    case .failed(let error):\n        print(\"error:\", error.localizedDescription)\n    default:\n        break\n    }\n}\n//结果有变化的时候回调\nbrowser.browseResultsChangedHandler = { result, changed in\n    result.forEach { device in\n        //endpoint中有netServiceName netServiceType \n        print(device.endpoint)\n        print(device.metadata)\n    }\n}\n//主线程上启动搜索服务\nbrowser.start(queue: .main)\n```\n\n\n\n```swift\n      //初始化tcp server，入参对应NSNetService初始化的\n\t\t\tself.listener = try NWListener(using: .tcp, on :localPort)\n      self.listener?.service = NWListener.Service(name:netServiceName, type: netServiceType, domain: serviceDomain, txtRecord: nil)\n      //注册服务后回调，对应NSNetService发布服务成功后的回调\n      self.listener?.serviceRegistrationUpdateHandler = { (serviceChange) in\n        switch(serviceChange) {\n        case .add(let endpoint)://设备加入\n          switch endpoint {\n          case let .service(name, type, domain, interface):\n            print(\"Service Name \\(name) of type \\(type) having domain: \\(domain) and interface: \\(String(describing: interface?.debugDescription))\")\n          default:\n            break\n          }\n        default:\n          break\n        }\n      }\n      self.listener?.stateUpdateHandler = {(newState) in\n        switch newState {\n        case .ready:\n            print(\"Bonjour TCP Listener: Bonjour listener state changed - ready\")\n        default:\n          break\n        }\n      }\n      self.listener?.newConnectionHandler = {(newConnection) in\n        newConnection.stateUpdateHandler = {newState in\n          switch newState {\n          case .ready:\n            print(\"Bonjour TCP Listener: new  connection state - ready\")\n\n            \n          default:\n            break\n          }\n        }\n        newConnection.start(queue: DispatchQueue(label: \"Bonjour TCP Listener: New Connection\"))\n      }\n    } catch {\n      print(\"Bonjour TCP Listener: Unable to create listener\")\n    }\n    self.listener?.start(queue: .main)\n\n```\n\n\n\n```swift\n\t//初始化tcp client\n\tself.netConnect = NWConnection(to: .service(name: netServiceName, type: netServiceType, domain: serviceDomain, interface: nil), port:localPort, using: .tcp)\n\tself.netConnect?.stateUpdateHandler = { (newState) in\n       print(\"bonjourToTCP: Connection details: \\(String(describing: self.netConnect?.debugDescription))\")\n     switch (newState) {\n     case .ready:\n        self.connectState = \"Connection state: Ready\"\n       print(\"bonjourToTCP: new TCP connection ready \")\n     default:\n       break\n     }\n\t}\n\tself.netConnect?.start(queue: .main)\n```\n\n新的Network库好处是直接把socket和注册广播服务整合了，这个也没真正测过在这里只是做个记录。\n\n## 其他平台\n\n### Golang]\n\n#### [mDNS](https://github.com/hashicorp/mdns)\n\n#### [bonjour](https://github.com/oleksandr/bonjour)\n\n### Node.js]\n\n#### [mDNS](https://github.com/agnat/node_mdns)\n\n### C\n\n#### [mDNS](https://github.com/mjansson/mdns)\n\n\n\n\n\n","source":"_posts/(无网通信)MDNS实现设备间的发现与通信.md","raw":"---\ntitle: (无网通信)MDNS实现设备间的发现与通信\ndate: 2021-12-01 00:09:05\ntags:\n    - Wifi Direct\n    - NDS\n    - MDNS\n    - DNS-SD\n    - iOS\n    - Andoid\n    - 无网通信\n    - BLE\ntypora-root-url: ../\n---\n\n# 简介\n这里无网通信指的是没有互联网的通信方式，之前在区块链公司是做这块，现在怕自己以后忘了写一遍，之前搞工业机器人实在太忙，整个博客停了，也不搞移动了，现在离职了，创业也败了，该恢复一下之前的技术调整心态继续找工作了。\n\n所谓无网通信其实是不同设备互相发现然后连接进行通信，而互相发现的方式可以归纳成三种\n\n- 两个设备连接在同一个WIFI\n- 两个设备通过WLAN创建点对点连接\n- 两个设备通过蓝牙BLE创建点对点连接\n\n而前两种是最稳定的方式，可以使用Wifi Direct实现，而蓝牙BLE的方式就比较鸡肋了距离有限制大小也有限制，能Wifi直连肯定不用蓝牙。然而蓝牙的发现连接标准其实各个设备基本都遵循的是一套，但Wifi Direct则是实现方式多种多样像UPnP、Bonjour、DLNA、SLP抑或是其他技术都能实现。iOS用的自家Bonjour，而Android4.0后开始支持直接就叫Wifi Direct，不同设备直连基本都会遇到问题。这里以Android和iOS为例实现的基本逻辑其实都由MDNS与DNS-SD演化而来。\n\n确定了Wifi Direct以后又会发现一个问题就是这解决的是设备与设备的通信，也就是一对一，而理想的无网通信是多对多，信息流之间希望有多跳的能力也就是Mesh，这个最终我们也没完美解决，虽然Android和iOS里有一定的解决方案(创建群组实现多对多)但也有不同系统无法互通的问题和群组上限问题，但当时我们选择了更简单的方式就是由路由器去Mesh其他路由器，而设备加入到路由器的网络里直接用MDNS去发现然后链接通信，专业设备做专业事，Mesh组网和设备通信分摊到两个地方。\n\n## MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)\n\n简介里介绍完基本就确定了技术点就是Wifi Direct，而这项技术则是由MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)演化而来。\n\n首先MDNS和DNS-SD是DNS协议的两个扩展。MDNS扩展了域名服务系统，在链路本地多播上运行。DNS-SD添加了通过DNS发现网络服务的支持。MDNS原理就是在基于udp加入网络后向所有主机组播一个消息。\n\n基本流程就是基于某个自定义域名发布服务，发现设备，连接设备\n\n![Bonjour API](/assets/blogImage/WX20211206-012426@2x.png \"Bonjour API\")\n\n<!-- more -->\n\n## Andoid\n\n安卓官网写的很详细非常友好\n\n#### [独立设备下Andoid NSD](https://developer.android.com/training/connect-devices-wirelessly/nsd-wifi-direct)\n\n这里讲的是不加入到任何共同网络中的独立设备，通过android的Wifi Direct实现启动服务发现设备而且是有条件的发现，类似MDNS可以指定启动及发现服务的名称\n\n#### [在同一网络下Andoid NSD](https://developer.android.com/training/connect-devices-wirelessly/nsd)\n\n这里讲的是在设备加入到同一网络中发现设备，而这块则是最标准最通用的，遵循MDNS协议实现设备的发现解析出host，我们当时就是运用这个使得Android，iOS，其他设备都能在网络下互相发现我们的服务，其他设备用Golang的MDNS，github能搜到很多封装好的，而且区块链著名的二层网络Rainden Network的节点发现也有用到它。像智能设备的控制基本都可以选择这个方案解决\n\n#### [Andoid WIFI直连](https://developer.android.com/training/connect-devices-wirelessly/wifi-direct)\n\n这里主要讲的是第一个类似，但他是无差别的去发现附近开启对等连接的设备，然后还讲了分组和连接有点对标iOS MutipeerConnectivity的意思。\n\n\n\n## iOS\n\n首先苹果官网想通过关键词搜索相关技术你没看过WWDC基本上搜不出来，尤其是近几年的东西你就算搜出来，越是抽象的API越是没啥注释，越是看注释就知道怎么用的，它还给你来个示例代码。下面开始详细说说:\n\niOS主要提供了3个方式MutipeerConnectivity，[Network库](https://developer.apple.com/documentation/network?language=objc)，[NSNetService相关](https://developer.apple.com/search/?q=NSNetService),而我当时用的是NSNetService因为那个时候还没有Network库，现在这些类都已经被淘汰了，而MutipeerConnectivity虽然方法封装的更好用而且同时支持蓝牙和wifi直连，但你没法控制代码去控制用哪个，而且由于太标准无法做和android的通信，但如果是仅仅iOS间通信聊天，却能直接轻松实现群组间的聊天。\n\n#### [MutipeerConnectivity](https://developer.apple.com/library/archive/navigation/#section=Technologies&topic=MultipeerConnectivity)\n\n这示例代码实现了无网聊天在不加入网络的情况下发现附近的群组加入进行聊天，但是直接看代码还是有点费劲不向上面Android的文档讲了关键的几个方法，所以我就依照示例和常用的挑出核心代码简单讲一下。\n\n```objective-c\n\t\t//创建一个设备ID\n\t\tMCPeerID *peerID;\n    @try {\n        peerID = [[MCPeerID alloc] initWithDisplayName:self.displayNameTextField.text];\n    }\n    @catch (NSException *exception) {\n        NSLog(@\"Invalid display name [%@]\", self.displayNameTextField.text);\n        return NO;\n    }\n```\n\n\n\n```objective-c\n\t\t@try {\n      \t//创建广播对象，serviceType相当于房间名称，discoveryInfo是广播信息，这个方法相当于告诉附近的您愿意加入指定类型的回话,在委托里可以处理各种自定义逻辑\n        advertiser = [[MCNearbyServiceAdvertiser alloc] initWithPeer:peerID discoveryInfo:nil serviceType:self.serviceTypeTextField.text];\n    }\n    @catch (NSException *exception) {\n        NSLog(@\"Invalid service type [%@]\", self.serviceTypeTextField.text);\n        return NO;\n    }\n```\n\n\n\n```objective-c\n#pragma mark - MCNearbyServiceAdvertiserDelegate\n//可以通过invitationHandler传入accept进行连接会话结果过滤.\n- (void)            advertiser:(MCNearbyServiceAdvertiser *)advertiser\n  didReceiveInvitationFromPeer:(MCPeerID *)peerID\n                   withContext:(nullable NSData *)context\n             invitationHandler:(void (^)(BOOL accept, MCSession * __nullable session))invitationHandler;\n\n```\n\n\n\n\n\n```objective-c\n  // 开启广播\n\t[advertiser startAdvertisingPeer];\n\t// 停止广播\n  [advertiser stopAdvertisingPeer];\n```\n\n\n\n```objective-c\n        //创建回话对象，用于存放当前连接的会话\n        _session = [[MCSession alloc] initWithPeer:peerID securityIdentity:nil encryptionPreference:MCEncryptionRequired];\n        // 设置 MCSessionDelegate \n        _session.delegate = self;\n        // 创建广播对象，和之前的不同在于提供了接收邀请的标准界面\n        _advertiserAssistant = [[MCAdvertiserAssistant alloc] initWithServiceType:serviceType discoveryInfo:nil session:_session];\n        // 开启广播\n        [_advertiserAssistant start];\n```\n\n\n\n```objective-c\n\t\t//停止广播\n    [_advertiserAssistant stop];\n  \t//断开会话连接\n    [_session disconnect];\n```\n\n\n\n```objective-c\n  //发送消息给当前会话中的对象  \n\t[self.session sendData:messageData toPeers:self.session.connectedPeers withMode:MCSessionSendDataReliable error:&error];\n```\n\n\n\n```objective-c\n\t\tNSProgress *progress;\n    // 遍历连接的设备ID\n    for (MCPeerID *peerID in _session.connectedPeers) {\n\t\t\t\t//        imageUrl = [NSURL URLWithString:@\"http://images.apple.com/home/images/promo_logic_pro.jpg\"];\n        // 发送图片给对应设备\n        progress = [self.session sendResourceAtURL:imageUrl withName:[imageUrl lastPathComponent] toPeer:peerID withCompletionHandler:^(NSError *error) {\n            // Implement this block to know when the sending resource transfer completes and if there is an error.\n            if (error) {\n                NSLog(@\"Send resource to peer [%@] completed with Error [%@]\", peerID.displayName, error);\n            }\n            else {\n                // Create an image transcript for this received image resource\n                Transcript *transcript = [[Transcript alloc] initWithPeerID:_session.myPeerID imageUrl:imageUrl direction:TRANSCRIPT_DIRECTION_SEND];\n                [self.delegate updateTranscript:transcript];\n            }\n        }];\n    }\n```\n\n\n\n```objective-c\n#pragma mark - MCSessionDelegate\n//会话接受数据的时候调用\n- (void)session:(MCSession *)session didReceiveData:(NSData *)data fromPeer:(MCPeerID *)peerID\n{\n    \n}\n//会话状态发生改变的时候调用\n- (void)session:(MCSession *)session peer:(MCPeerID *)peerID didChangeState:(MCSessionState)state\n{\n  \n}\n```\n\n\n\n```objective-c\n  \t//创建搜索蓝牙设备控制器  \n\t\tMCBrowserViewController *browserViewController = [[MCBrowserViewController alloc] initWithServiceType:self.serviceType session:self.sessionContainer.session];\n                                                      \n\t\tbrowserViewController.delegate = self;\n    browserViewController.minimumNumberOfPeers = kMCSessionMinimumNumberOfPeers;\n    browserViewController.maximumNumberOfPeers = kMCSessionMaximumNumberOfPeers;\n\n    [self presentViewController:browserViewController animated:YES completion:nil];\n\n```\n\n\n\n```objective-c\n#pragma mark - MCBrowserViewControllerDelegate\n//搜索到设备后进行筛选用的回调\n- (BOOL)browserViewController:(MCBrowserViewController *)browserViewController shouldPresentNearbyPeer:(MCPeerID *)peerID withDiscoveryInfo:(NSDictionary *)info\n{\n    return YES;\n}\n\n//搜索界面点击完成的时候调用\n- (void)browserViewControllerDidFinish:(MCBrowserViewController *)browserViewController\n{\n    [browserViewController dismissViewControllerAnimated:YES completion:nil];\n}\n\n//搜索界面点击取消的时候调用\n- (void)browserViewControllerWasCancelled:(MCBrowserViewController *)browserViewController\n{\n    [browserViewController dismissViewControllerAnimated:YES completion:nil];\n}\n```\n\n\n\n上面就是实现聊天功能的一些代码片段，但反过来想一下，这个功能主要是实现发现附近设备加入聊天室聊天，这场景其实比较奇怪，离得不远的话聊两句破冰了肯定流传了毕竟离得不远直接面对面不是更好，只有在游戏场景里这种近点通信才是一个比较好的交流方式，比如游戏道具的互换，游戏竞技比赛这类场景跟这类技术才会比较搭配，聊天的话真的就当个例子就好。。。\n\n#### [NSNetService](https://developer.apple.com/library/archive/samplecode/WiTap)\n\n这里示例代码实现的是使用NSNetService实现两个设备连接后点击色块反馈，现在这个类已经被弃用代替方法是Network库。\n\n这里简单简绍就不已经示例代码了，因为这块可以直接实现和安卓的互通所以就以我个人总结的几个关键地方为主。\n\n安卓方面使用就是 [在同一网络下Andoid NSD](https://developer.android.com/training/connect-devices-wirelessly/nsd) 叙述的设置\n\n```objective-c\n//初始化广播服务为了和Android通信Domain为空字符串，其他的Android上都有，至于port就是你起服务的Socket端口\n_netServiceServer = [[NSNetService alloc] initWithDomain:self.netServiceDomain\n                                                            type:self.netServiceType\n                                                            name:self.netServerName\n                                                            port:self.tcpSocketServer.localPort];\n```\n\n\n\n```objective-c\n#pragma mark - Bonjour\n\n//发布服务\n- (BOOL) publishService {\n    [self.netServiceServer scheduleInRunLoop:[NSRunLoop currentRunLoop]\n                                     forMode:NSRunLoopCommonModes];\n    [self.netServiceServer setDelegate:self];\n    [self.netServiceServer publish];\n    \n    return YES;\n}\n\n//停止服务\n- (void) unpublishService {\n    if (self.netServiceServer) {\n        [self.netServiceServer stop];\n        [self.netServiceServer removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];\n        self.netServiceServer = nil;\n    }\n}\n```\n\n\n\n```objective-c\n    //设置委托\n\t\tnetService.delegate=self;\n\t\t//解析地址 超时时间为5秒\n    [netService resolveWithTimeout:5];\n```\n\n\n\n```objective-c\n#pragma mark - NSNetServiceDelegate\n//发布服务失败的时候调用\n-(void)netService:(NSNetService *)sender didNotPublish:(NSDictionary<NSString *,NSNumber *> *)errorDict{\n    \n}\n\n//地址解析完成的时候调用\n-(void)netServiceDidResolveAddress:(NSNetService *)sender{\n\n}\n```\n\n\n\n```objective-c\n//启动发现服务，之前测试停掉再启动就不生效了，所以每次都重新初始化\n- (BOOL)startWithServicesOfType:(NSString*)type inDomain:(NSString*)domain{\n    if ( netServiceBrowser != nil ) {\n        [self stop];\n    }\n    \n    netServiceBrowser = [[NSNetServiceBrowser alloc] init];\n    if( !netServiceBrowser ) {\n        return NO;\n    }\n    \n    netServiceBrowser.delegate = self;\n  \t//设置搜索的参数，与Android通信设置domain为空字符串\n    [netServiceBrowser searchForServicesOfType:type inDomain:domain];\n    \n    return YES;\n}\n\n//停止发现服务\n- (void)stop {\n    if ( netServiceBrowser == nil ) {\n        return;\n    }\n    \n    [netServiceBrowser stop];\n    netServiceBrowser = nil;\n    \n    [_servers removeAllObjects];\n}\n```\n\n通过上面代码就能实现iOS和Android发现彼此设备的IP和端口，只要你起好tcp的server就能进行连接通信，至于起server随便百度一下就有很多socket起服务的方法这里就不做赘述了我是直接用[CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket)，我当时为了保险做成了混合式发现入网后还会定期udp广播一下其实没必要。\n\n#### [Network库](https://developer.apple.com/documentation/network?language=objc)\n\n这个没在官方找到什么好的示例代码所以直接就给出了官方文档，在网上看到过不少散装的，NSNetService对应NWConnection初始化用NWEndpoint来初始化，NSNetServiceBrowser对应NWBrowser\n\n```swift\nimport Network\n\nlet parameter = NWParameters()\n//之前的属性NSNetServiceBrowser NSNetService现在都用NWParameters这个对象来传递\nparameter.includePeerToPeer = true\nlet browser = NWBrowser(for: .bonjour(type: \"services.dns-sd.\", domain: nil), using: parameter)\n//状态改变的时候回调\nbrowser.stateUpdateHandler = { state in\n    switch state {\n    case .ready:\n        print(\"ready\")\n    case .failed(let error):\n        print(\"error:\", error.localizedDescription)\n    default:\n        break\n    }\n}\n//结果有变化的时候回调\nbrowser.browseResultsChangedHandler = { result, changed in\n    result.forEach { device in\n        //endpoint中有netServiceName netServiceType \n        print(device.endpoint)\n        print(device.metadata)\n    }\n}\n//主线程上启动搜索服务\nbrowser.start(queue: .main)\n```\n\n\n\n```swift\n      //初始化tcp server，入参对应NSNetService初始化的\n\t\t\tself.listener = try NWListener(using: .tcp, on :localPort)\n      self.listener?.service = NWListener.Service(name:netServiceName, type: netServiceType, domain: serviceDomain, txtRecord: nil)\n      //注册服务后回调，对应NSNetService发布服务成功后的回调\n      self.listener?.serviceRegistrationUpdateHandler = { (serviceChange) in\n        switch(serviceChange) {\n        case .add(let endpoint)://设备加入\n          switch endpoint {\n          case let .service(name, type, domain, interface):\n            print(\"Service Name \\(name) of type \\(type) having domain: \\(domain) and interface: \\(String(describing: interface?.debugDescription))\")\n          default:\n            break\n          }\n        default:\n          break\n        }\n      }\n      self.listener?.stateUpdateHandler = {(newState) in\n        switch newState {\n        case .ready:\n            print(\"Bonjour TCP Listener: Bonjour listener state changed - ready\")\n        default:\n          break\n        }\n      }\n      self.listener?.newConnectionHandler = {(newConnection) in\n        newConnection.stateUpdateHandler = {newState in\n          switch newState {\n          case .ready:\n            print(\"Bonjour TCP Listener: new  connection state - ready\")\n\n            \n          default:\n            break\n          }\n        }\n        newConnection.start(queue: DispatchQueue(label: \"Bonjour TCP Listener: New Connection\"))\n      }\n    } catch {\n      print(\"Bonjour TCP Listener: Unable to create listener\")\n    }\n    self.listener?.start(queue: .main)\n\n```\n\n\n\n```swift\n\t//初始化tcp client\n\tself.netConnect = NWConnection(to: .service(name: netServiceName, type: netServiceType, domain: serviceDomain, interface: nil), port:localPort, using: .tcp)\n\tself.netConnect?.stateUpdateHandler = { (newState) in\n       print(\"bonjourToTCP: Connection details: \\(String(describing: self.netConnect?.debugDescription))\")\n     switch (newState) {\n     case .ready:\n        self.connectState = \"Connection state: Ready\"\n       print(\"bonjourToTCP: new TCP connection ready \")\n     default:\n       break\n     }\n\t}\n\tself.netConnect?.start(queue: .main)\n```\n\n新的Network库好处是直接把socket和注册广播服务整合了，这个也没真正测过在这里只是做个记录。\n\n## 其他平台\n\n### Golang]\n\n#### [mDNS](https://github.com/hashicorp/mdns)\n\n#### [bonjour](https://github.com/oleksandr/bonjour)\n\n### Node.js]\n\n#### [mDNS](https://github.com/agnat/node_mdns)\n\n### C\n\n#### [mDNS](https://github.com/mjansson/mdns)\n\n\n\n\n\n","slug":"(无网通信)MDNS实现设备间的发现与通信","published":1,"updated":"2021-12-05T17:31:35.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfq80000nhs66qu0oiql","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>这里无网通信指的是没有互联网的通信方式，之前在区块链公司是做这块，现在怕自己以后忘了写一遍，之前搞工业机器人实在太忙，整个博客停了，也不搞移动了，现在离职了，创业也败了，该恢复一下之前的技术调整心态继续找工作了。</p>\n<p>所谓无网通信其实是不同设备互相发现然后连接进行通信，而互相发现的方式可以归纳成三种</p>\n<ul>\n<li>两个设备连接在同一个WIFI</li>\n<li>两个设备通过WLAN创建点对点连接</li>\n<li>两个设备通过蓝牙BLE创建点对点连接</li>\n</ul>\n<p>而前两种是最稳定的方式，可以使用Wifi Direct实现，而蓝牙BLE的方式就比较鸡肋了距离有限制大小也有限制，能Wifi直连肯定不用蓝牙。然而蓝牙的发现连接标准其实各个设备基本都遵循的是一套，但Wifi Direct则是实现方式多种多样像UPnP、Bonjour、DLNA、SLP抑或是其他技术都能实现。iOS用的自家Bonjour，而Android4.0后开始支持直接就叫Wifi Direct，不同设备直连基本都会遇到问题。这里以Android和iOS为例实现的基本逻辑其实都由MDNS与DNS-SD演化而来。</p>\n<p>确定了Wifi Direct以后又会发现一个问题就是这解决的是设备与设备的通信，也就是一对一，而理想的无网通信是多对多，信息流之间希望有多跳的能力也就是Mesh，这个最终我们也没完美解决，虽然Android和iOS里有一定的解决方案(创建群组实现多对多)但也有不同系统无法互通的问题和群组上限问题，但当时我们选择了更简单的方式就是由路由器去Mesh其他路由器，而设备加入到路由器的网络里直接用MDNS去发现然后链接通信，专业设备做专业事，Mesh组网和设备通信分摊到两个地方。</p>\n<h2 id=\"MDNS-Multicast-DNS-与DNS-SD-DNS-Service-Discovery\"><a href=\"#MDNS-Multicast-DNS-与DNS-SD-DNS-Service-Discovery\" class=\"headerlink\" title=\"MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)\"></a>MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)</h2><p>简介里介绍完基本就确定了技术点就是Wifi Direct，而这项技术则是由MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)演化而来。</p>\n<p>首先MDNS和DNS-SD是DNS协议的两个扩展。MDNS扩展了域名服务系统，在链路本地多播上运行。DNS-SD添加了通过DNS发现网络服务的支持。MDNS原理就是在基于udp加入网络后向所有主机组播一个消息。</p>\n<p>基本流程就是基于某个自定义域名发布服务，发现设备，连接设备</p>\n<p><img src=\"/assets/blogImage/WX20211206-012426@2x.png\" alt=\"Bonjour API\" title=\"Bonjour API\"></p>\n<a id=\"more\"></a>\n<h2 id=\"Andoid\"><a href=\"#Andoid\" class=\"headerlink\" title=\"Andoid\"></a>Andoid</h2><p>安卓官网写的很详细非常友好</p>\n<h4 id=\"独立设备下Andoid-NSD\"><a href=\"#独立设备下Andoid-NSD\" class=\"headerlink\" title=\"独立设备下Andoid NSD\"></a><a href=\"https://developer.android.com/training/connect-devices-wirelessly/nsd-wifi-direct\" target=\"_blank\" rel=\"noopener\">独立设备下Andoid NSD</a></h4><p>这里讲的是不加入到任何共同网络中的独立设备，通过android的Wifi Direct实现启动服务发现设备而且是有条件的发现，类似MDNS可以指定启动及发现服务的名称</p>\n<h4 id=\"在同一网络下Andoid-NSD\"><a href=\"#在同一网络下Andoid-NSD\" class=\"headerlink\" title=\"在同一网络下Andoid NSD\"></a><a href=\"https://developer.android.com/training/connect-devices-wirelessly/nsd\" target=\"_blank\" rel=\"noopener\">在同一网络下Andoid NSD</a></h4><p>这里讲的是在设备加入到同一网络中发现设备，而这块则是最标准最通用的，遵循MDNS协议实现设备的发现解析出host，我们当时就是运用这个使得Android，iOS，其他设备都能在网络下互相发现我们的服务，其他设备用Golang的MDNS，github能搜到很多封装好的，而且区块链著名的二层网络Rainden Network的节点发现也有用到它。像智能设备的控制基本都可以选择这个方案解决</p>\n<h4 id=\"Andoid-WIFI直连\"><a href=\"#Andoid-WIFI直连\" class=\"headerlink\" title=\"Andoid WIFI直连\"></a><a href=\"https://developer.android.com/training/connect-devices-wirelessly/wifi-direct\" target=\"_blank\" rel=\"noopener\">Andoid WIFI直连</a></h4><p>这里主要讲的是第一个类似，但他是无差别的去发现附近开启对等连接的设备，然后还讲了分组和连接有点对标iOS MutipeerConnectivity的意思。</p>\n<h2 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h2><p>首先苹果官网想通过关键词搜索相关技术你没看过WWDC基本上搜不出来，尤其是近几年的东西你就算搜出来，越是抽象的API越是没啥注释，越是看注释就知道怎么用的，它还给你来个示例代码。下面开始详细说说:</p>\n<p>iOS主要提供了3个方式MutipeerConnectivity，<a href=\"https://developer.apple.com/documentation/network?language=objc\" target=\"_blank\" rel=\"noopener\">Network库</a>，<a href=\"https://developer.apple.com/search/?q=NSNetService\" target=\"_blank\" rel=\"noopener\">NSNetService相关</a>,而我当时用的是NSNetService因为那个时候还没有Network库，现在这些类都已经被淘汰了，而MutipeerConnectivity虽然方法封装的更好用而且同时支持蓝牙和wifi直连，但你没法控制代码去控制用哪个，而且由于太标准无法做和android的通信，但如果是仅仅iOS间通信聊天，却能直接轻松实现群组间的聊天。</p>\n<h4 id=\"MutipeerConnectivity\"><a href=\"#MutipeerConnectivity\" class=\"headerlink\" title=\"MutipeerConnectivity\"></a><a href=\"https://developer.apple.com/library/archive/navigation/#section=Technologies&amp;topic=MultipeerConnectivity\" target=\"_blank\" rel=\"noopener\">MutipeerConnectivity</a></h4><p>这示例代码实现了无网聊天在不加入网络的情况下发现附近的群组加入进行聊天，但是直接看代码还是有点费劲不向上面Android的文档讲了关键的几个方法，所以我就依照示例和常用的挑出核心代码简单讲一下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建一个设备ID</span><br><span class=\"line\">MCPeerID *peerID;</span><br><span class=\"line\">  @try &#123;</span><br><span class=\"line\">      peerID = [[MCPeerID alloc] initWithDisplayName:self.displayNameTextField.text];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @catch (NSException *exception) &#123;</span><br><span class=\"line\">      NSLog(@&quot;Invalid display name [%@]&quot;, self.displayNameTextField.text);</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@try &#123;</span><br><span class=\"line\">    \t//创建广播对象，serviceType相当于房间名称，discoveryInfo是广播信息，这个方法相当于告诉附近的您愿意加入指定类型的回话,在委托里可以处理各种自定义逻辑</span><br><span class=\"line\">      advertiser = [[MCNearbyServiceAdvertiser alloc] initWithPeer:peerID discoveryInfo:nil serviceType:self.serviceTypeTextField.text];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @catch (NSException *exception) &#123;</span><br><span class=\"line\">      NSLog(@&quot;Invalid service type [%@]&quot;, self.serviceTypeTextField.text);</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - MCNearbyServiceAdvertiserDelegate</span><br><span class=\"line\">//可以通过invitationHandler传入accept进行连接会话结果过滤.</span><br><span class=\"line\">- (void)            advertiser:(MCNearbyServiceAdvertiser *)advertiser</span><br><span class=\"line\">  didReceiveInvitationFromPeer:(MCPeerID *)peerID</span><br><span class=\"line\">                   withContext:(nullable NSData *)context</span><br><span class=\"line\">             invitationHandler:(void (^)(BOOL accept, MCSession * __nullable session))invitationHandler;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 开启广播</span><br><span class=\"line\">[advertiser startAdvertisingPeer];</span><br><span class=\"line\">// 停止广播</span><br><span class=\"line\"> [advertiser stopAdvertisingPeer];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建回话对象，用于存放当前连接的会话</span><br><span class=\"line\">_session = [[MCSession alloc] initWithPeer:peerID securityIdentity:nil encryptionPreference:MCEncryptionRequired];</span><br><span class=\"line\">// 设置 MCSessionDelegate </span><br><span class=\"line\">_session.delegate = self;</span><br><span class=\"line\">// 创建广播对象，和之前的不同在于提供了接收邀请的标准界面</span><br><span class=\"line\">_advertiserAssistant = [[MCAdvertiserAssistant alloc] initWithServiceType:serviceType discoveryInfo:nil session:_session];</span><br><span class=\"line\">// 开启广播</span><br><span class=\"line\">[_advertiserAssistant start];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//停止广播</span><br><span class=\"line\">  [_advertiserAssistant stop];</span><br><span class=\"line\">\t//断开会话连接</span><br><span class=\"line\">  [_session disconnect];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //发送消息给当前会话中的对象  </span><br><span class=\"line\">[self.session sendData:messageData toPeers:self.session.connectedPeers withMode:MCSessionSendDataReliable error:&amp;error];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSProgress *progress;</span><br><span class=\"line\">  // 遍历连接的设备ID</span><br><span class=\"line\">  for (MCPeerID *peerID in _session.connectedPeers) &#123;</span><br><span class=\"line\">\t\t//        imageUrl = [NSURL URLWithString:@&quot;http://images.apple.com/home/images/promo_logic_pro.jpg&quot;];</span><br><span class=\"line\">      // 发送图片给对应设备</span><br><span class=\"line\">      progress = [self.session sendResourceAtURL:imageUrl withName:[imageUrl lastPathComponent] toPeer:peerID withCompletionHandler:^(NSError *error) &#123;</span><br><span class=\"line\">          // Implement this block to know when the sending resource transfer completes and if there is an error.</span><br><span class=\"line\">          if (error) &#123;</span><br><span class=\"line\">              NSLog(@&quot;Send resource to peer [%@] completed with Error [%@]&quot;, peerID.displayName, error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          else &#123;</span><br><span class=\"line\">              // Create an image transcript for this received image resource</span><br><span class=\"line\">              Transcript *transcript = [[Transcript alloc] initWithPeerID:_session.myPeerID imageUrl:imageUrl direction:TRANSCRIPT_DIRECTION_SEND];</span><br><span class=\"line\">              [self.delegate updateTranscript:transcript];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;];</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - MCSessionDelegate</span><br><span class=\"line\">//会话接受数据的时候调用</span><br><span class=\"line\">- (void)session:(MCSession *)session didReceiveData:(NSData *)data fromPeer:(MCPeerID *)peerID</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//会话状态发生改变的时候调用</span><br><span class=\"line\">- (void)session:(MCSession *)session peer:(MCPeerID *)peerID didChangeState:(MCSessionState)state</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t//创建搜索蓝牙设备控制器  </span><br><span class=\"line\">MCBrowserViewController *browserViewController = [[MCBrowserViewController alloc] initWithServiceType:self.serviceType session:self.sessionContainer.session];</span><br><span class=\"line\">                                                    </span><br><span class=\"line\">browserViewController.delegate = self;</span><br><span class=\"line\">  browserViewController.minimumNumberOfPeers = kMCSessionMinimumNumberOfPeers;</span><br><span class=\"line\">  browserViewController.maximumNumberOfPeers = kMCSessionMaximumNumberOfPeers;</span><br><span class=\"line\"></span><br><span class=\"line\">  [self presentViewController:browserViewController animated:YES completion:nil];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - MCBrowserViewControllerDelegate</span><br><span class=\"line\">//搜索到设备后进行筛选用的回调</span><br><span class=\"line\">- (BOOL)browserViewController:(MCBrowserViewController *)browserViewController shouldPresentNearbyPeer:(MCPeerID *)peerID withDiscoveryInfo:(NSDictionary *)info</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//搜索界面点击完成的时候调用</span><br><span class=\"line\">- (void)browserViewControllerDidFinish:(MCBrowserViewController *)browserViewController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [browserViewController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//搜索界面点击取消的时候调用</span><br><span class=\"line\">- (void)browserViewControllerWasCancelled:(MCBrowserViewController *)browserViewController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [browserViewController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面就是实现聊天功能的一些代码片段，但反过来想一下，这个功能主要是实现发现附近设备加入聊天室聊天，这场景其实比较奇怪，离得不远的话聊两句破冰了肯定流传了毕竟离得不远直接面对面不是更好，只有在游戏场景里这种近点通信才是一个比较好的交流方式，比如游戏道具的互换，游戏竞技比赛这类场景跟这类技术才会比较搭配，聊天的话真的就当个例子就好。。。</p>\n<h4 id=\"NSNetService\"><a href=\"#NSNetService\" class=\"headerlink\" title=\"NSNetService\"></a><a href=\"https://developer.apple.com/library/archive/samplecode/WiTap\" target=\"_blank\" rel=\"noopener\">NSNetService</a></h4><p>这里示例代码实现的是使用NSNetService实现两个设备连接后点击色块反馈，现在这个类已经被弃用代替方法是Network库。</p>\n<p>这里简单简绍就不已经示例代码了，因为这块可以直接实现和安卓的互通所以就以我个人总结的几个关键地方为主。</p>\n<p>安卓方面使用就是 <a href=\"https://developer.android.com/training/connect-devices-wirelessly/nsd\" target=\"_blank\" rel=\"noopener\">在同一网络下Andoid NSD</a> 叙述的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化广播服务为了和Android通信Domain为空字符串，其他的Android上都有，至于port就是你起服务的Socket端口</span><br><span class=\"line\">_netServiceServer = [[NSNetService alloc] initWithDomain:self.netServiceDomain</span><br><span class=\"line\">                                                            type:self.netServiceType</span><br><span class=\"line\">                                                            name:self.netServerName</span><br><span class=\"line\">                                                            port:self.tcpSocketServer.localPort];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - Bonjour</span><br><span class=\"line\"></span><br><span class=\"line\">//发布服务</span><br><span class=\"line\">- (BOOL) publishService &#123;</span><br><span class=\"line\">    [self.netServiceServer scheduleInRunLoop:[NSRunLoop currentRunLoop]</span><br><span class=\"line\">                                     forMode:NSRunLoopCommonModes];</span><br><span class=\"line\">    [self.netServiceServer setDelegate:self];</span><br><span class=\"line\">    [self.netServiceServer publish];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//停止服务</span><br><span class=\"line\">- (void) unpublishService &#123;</span><br><span class=\"line\">    if (self.netServiceServer) &#123;</span><br><span class=\"line\">        [self.netServiceServer stop];</span><br><span class=\"line\">        [self.netServiceServer removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];</span><br><span class=\"line\">        self.netServiceServer = nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //设置委托</span><br><span class=\"line\">netService.delegate=self;</span><br><span class=\"line\">//解析地址 超时时间为5秒</span><br><span class=\"line\">  [netService resolveWithTimeout:5];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - NSNetServiceDelegate</span><br><span class=\"line\">//发布服务失败的时候调用</span><br><span class=\"line\">-(void)netService:(NSNetService *)sender didNotPublish:(NSDictionary&lt;NSString *,NSNumber *&gt; *)errorDict&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//地址解析完成的时候调用</span><br><span class=\"line\">-(void)netServiceDidResolveAddress:(NSNetService *)sender&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动发现服务，之前测试停掉再启动就不生效了，所以每次都重新初始化</span><br><span class=\"line\">- (BOOL)startWithServicesOfType:(NSString*)type inDomain:(NSString*)domain&#123;</span><br><span class=\"line\">    if ( netServiceBrowser != nil ) &#123;</span><br><span class=\"line\">        [self stop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    netServiceBrowser = [[NSNetServiceBrowser alloc] init];</span><br><span class=\"line\">    if( !netServiceBrowser ) &#123;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    netServiceBrowser.delegate = self;</span><br><span class=\"line\">  \t//设置搜索的参数，与Android通信设置domain为空字符串</span><br><span class=\"line\">    [netServiceBrowser searchForServicesOfType:type inDomain:domain];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//停止发现服务</span><br><span class=\"line\">- (void)stop &#123;</span><br><span class=\"line\">    if ( netServiceBrowser == nil ) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [netServiceBrowser stop];</span><br><span class=\"line\">    netServiceBrowser = nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [_servers removeAllObjects];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面代码就能实现iOS和Android发现彼此设备的IP和端口，只要你起好tcp的server就能进行连接通信，至于起server随便百度一下就有很多socket起服务的方法这里就不做赘述了我是直接用<a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\" target=\"_blank\" rel=\"noopener\">CocoaAsyncSocket</a>，我当时为了保险做成了混合式发现入网后还会定期udp广播一下其实没必要。</p>\n<h4 id=\"Network库\"><a href=\"#Network库\" class=\"headerlink\" title=\"Network库\"></a><a href=\"https://developer.apple.com/documentation/network?language=objc\" target=\"_blank\" rel=\"noopener\">Network库</a></h4><p>这个没在官方找到什么好的示例代码所以直接就给出了官方文档，在网上看到过不少散装的，NSNetService对应NWConnection初始化用NWEndpoint来初始化，NSNetServiceBrowser对应NWBrowser</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Network</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> parameter = <span class=\"type\">NWParameters</span>()</span><br><span class=\"line\"><span class=\"comment\">//之前的属性NSNetServiceBrowser NSNetService现在都用NWParameters这个对象来传递</span></span><br><span class=\"line\">parameter.includePeerToPeer = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> browser = <span class=\"type\">NWBrowser</span>(<span class=\"keyword\">for</span>: .bonjour(type: <span class=\"string\">\"services.dns-sd.\"</span>, domain: <span class=\"literal\">nil</span>), using: parameter)</span><br><span class=\"line\"><span class=\"comment\">//状态改变的时候回调</span></span><br><span class=\"line\">browser.stateUpdateHandler = &#123; state <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> state &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .ready:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"ready\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .failed(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"error:\"</span>, error.localizedDescription)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结果有变化的时候回调</span></span><br><span class=\"line\">browser.browseResultsChangedHandler = &#123; result, changed <span class=\"keyword\">in</span></span><br><span class=\"line\">    result.forEach &#123; device <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">//endpoint中有netServiceName netServiceType </span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(device.endpoint)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(device.metadata)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//主线程上启动搜索服务</span></span><br><span class=\"line\">browser.start(queue: .main)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//初始化tcp server，入参对应NSNetService初始化的</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.listener = <span class=\"keyword\">try</span> <span class=\"type\">NWListener</span>(using: .tcp, on :localPort)</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.listener?.service = <span class=\"type\">NWListener</span>.<span class=\"type\">Service</span>(name:netServiceName, type: netServiceType, domain: serviceDomain, txtRecord: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">   <span class=\"comment\">//注册服务后回调，对应NSNetService发布服务成功后的回调</span></span><br><span class=\"line\">   <span class=\"keyword\">self</span>.listener?.serviceRegistrationUpdateHandler = &#123; (serviceChange) <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">switch</span>(serviceChange) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> .add(<span class=\"keyword\">let</span> endpoint):<span class=\"comment\">//设备加入</span></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> endpoint &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .service(name, type, domain, interface):</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\"Service Name \\(name) of type \\(type) having domain: \\(domain) and interface: \\(String(describing: interface?.debugDescription))\"</span>)</span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     <span class=\"keyword\">default</span>:</span><br><span class=\"line\">       <span class=\"keyword\">break</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.listener?.stateUpdateHandler = &#123;(newState) <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">switch</span> newState &#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> .ready:</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\"Bonjour TCP Listener: Bonjour listener state changed - ready\"</span>)</span><br><span class=\"line\">     <span class=\"keyword\">default</span>:</span><br><span class=\"line\">       <span class=\"keyword\">break</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.listener?.newConnectionHandler = &#123;(newConnection) <span class=\"keyword\">in</span></span><br><span class=\"line\">     newConnection.stateUpdateHandler = &#123;newState <span class=\"keyword\">in</span></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> newState &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> .ready:</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\"Bonjour TCP Listener: new  connection state - ready\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">         </span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     newConnection.start(queue: <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"Bonjour TCP Listener: New Connection\"</span>))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"Bonjour TCP Listener: Unable to create listener\"</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">self</span>.listener?.start(queue: .main)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化tcp client</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.netConnect = <span class=\"type\">NWConnection</span>(to: .service(name: netServiceName, type: netServiceType, domain: serviceDomain, interface: <span class=\"literal\">nil</span>), port:localPort, using: .tcp)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.netConnect?.stateUpdateHandler = &#123; (newState) <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">\"bonjourToTCP: Connection details: \\(String(describing: self.netConnect?.debugDescription))\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (newState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .ready:</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.connectState = <span class=\"string\">\"Connection state: Ready\"</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">\"bonjourToTCP: new TCP connection ready \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.netConnect?.start(queue: .main)</span><br></pre></td></tr></table></figure>\n<p>新的Network库好处是直接把socket和注册广播服务整合了，这个也没真正测过在这里只是做个记录。</p>\n<h2 id=\"其他平台\"><a href=\"#其他平台\" class=\"headerlink\" title=\"其他平台\"></a>其他平台</h2><h3 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang]\"></a>Golang]</h3><h4 id=\"mDNS\"><a href=\"#mDNS\" class=\"headerlink\" title=\"mDNS\"></a><a href=\"https://github.com/hashicorp/mdns\" target=\"_blank\" rel=\"noopener\">mDNS</a></h4><h4 id=\"bonjour\"><a href=\"#bonjour\" class=\"headerlink\" title=\"bonjour\"></a><a href=\"https://github.com/oleksandr/bonjour\" target=\"_blank\" rel=\"noopener\">bonjour</a></h4><h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js]\"></a>Node.js]</h3><h4 id=\"mDNS-1\"><a href=\"#mDNS-1\" class=\"headerlink\" title=\"mDNS\"></a><a href=\"https://github.com/agnat/node_mdns\" target=\"_blank\" rel=\"noopener\">mDNS</a></h4><h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><h4 id=\"mDNS-2\"><a href=\"#mDNS-2\" class=\"headerlink\" title=\"mDNS\"></a><a href=\"https://github.com/mjansson/mdns\" target=\"_blank\" rel=\"noopener\">mDNS</a></h4>","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>这里无网通信指的是没有互联网的通信方式，之前在区块链公司是做这块，现在怕自己以后忘了写一遍，之前搞工业机器人实在太忙，整个博客停了，也不搞移动了，现在离职了，创业也败了，该恢复一下之前的技术调整心态继续找工作了。</p>\n<p>所谓无网通信其实是不同设备互相发现然后连接进行通信，而互相发现的方式可以归纳成三种</p>\n<ul>\n<li>两个设备连接在同一个WIFI</li>\n<li>两个设备通过WLAN创建点对点连接</li>\n<li>两个设备通过蓝牙BLE创建点对点连接</li>\n</ul>\n<p>而前两种是最稳定的方式，可以使用Wifi Direct实现，而蓝牙BLE的方式就比较鸡肋了距离有限制大小也有限制，能Wifi直连肯定不用蓝牙。然而蓝牙的发现连接标准其实各个设备基本都遵循的是一套，但Wifi Direct则是实现方式多种多样像UPnP、Bonjour、DLNA、SLP抑或是其他技术都能实现。iOS用的自家Bonjour，而Android4.0后开始支持直接就叫Wifi Direct，不同设备直连基本都会遇到问题。这里以Android和iOS为例实现的基本逻辑其实都由MDNS与DNS-SD演化而来。</p>\n<p>确定了Wifi Direct以后又会发现一个问题就是这解决的是设备与设备的通信，也就是一对一，而理想的无网通信是多对多，信息流之间希望有多跳的能力也就是Mesh，这个最终我们也没完美解决，虽然Android和iOS里有一定的解决方案(创建群组实现多对多)但也有不同系统无法互通的问题和群组上限问题，但当时我们选择了更简单的方式就是由路由器去Mesh其他路由器，而设备加入到路由器的网络里直接用MDNS去发现然后链接通信，专业设备做专业事，Mesh组网和设备通信分摊到两个地方。</p>\n<h2 id=\"MDNS-Multicast-DNS-与DNS-SD-DNS-Service-Discovery\"><a href=\"#MDNS-Multicast-DNS-与DNS-SD-DNS-Service-Discovery\" class=\"headerlink\" title=\"MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)\"></a>MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)</h2><p>简介里介绍完基本就确定了技术点就是Wifi Direct，而这项技术则是由MDNS(Multicast DNS)与DNS-SD(DNS Service Discovery)演化而来。</p>\n<p>首先MDNS和DNS-SD是DNS协议的两个扩展。MDNS扩展了域名服务系统，在链路本地多播上运行。DNS-SD添加了通过DNS发现网络服务的支持。MDNS原理就是在基于udp加入网络后向所有主机组播一个消息。</p>\n<p>基本流程就是基于某个自定义域名发布服务，发现设备，连接设备</p>\n<p><img src=\"/assets/blogImage/WX20211206-012426@2x.png\" alt=\"Bonjour API\" title=\"Bonjour API\"></p>","more":"<h2 id=\"Andoid\"><a href=\"#Andoid\" class=\"headerlink\" title=\"Andoid\"></a>Andoid</h2><p>安卓官网写的很详细非常友好</p>\n<h4 id=\"独立设备下Andoid-NSD\"><a href=\"#独立设备下Andoid-NSD\" class=\"headerlink\" title=\"独立设备下Andoid NSD\"></a><a href=\"https://developer.android.com/training/connect-devices-wirelessly/nsd-wifi-direct\" target=\"_blank\" rel=\"noopener\">独立设备下Andoid NSD</a></h4><p>这里讲的是不加入到任何共同网络中的独立设备，通过android的Wifi Direct实现启动服务发现设备而且是有条件的发现，类似MDNS可以指定启动及发现服务的名称</p>\n<h4 id=\"在同一网络下Andoid-NSD\"><a href=\"#在同一网络下Andoid-NSD\" class=\"headerlink\" title=\"在同一网络下Andoid NSD\"></a><a href=\"https://developer.android.com/training/connect-devices-wirelessly/nsd\" target=\"_blank\" rel=\"noopener\">在同一网络下Andoid NSD</a></h4><p>这里讲的是在设备加入到同一网络中发现设备，而这块则是最标准最通用的，遵循MDNS协议实现设备的发现解析出host，我们当时就是运用这个使得Android，iOS，其他设备都能在网络下互相发现我们的服务，其他设备用Golang的MDNS，github能搜到很多封装好的，而且区块链著名的二层网络Rainden Network的节点发现也有用到它。像智能设备的控制基本都可以选择这个方案解决</p>\n<h4 id=\"Andoid-WIFI直连\"><a href=\"#Andoid-WIFI直连\" class=\"headerlink\" title=\"Andoid WIFI直连\"></a><a href=\"https://developer.android.com/training/connect-devices-wirelessly/wifi-direct\" target=\"_blank\" rel=\"noopener\">Andoid WIFI直连</a></h4><p>这里主要讲的是第一个类似，但他是无差别的去发现附近开启对等连接的设备，然后还讲了分组和连接有点对标iOS MutipeerConnectivity的意思。</p>\n<h2 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h2><p>首先苹果官网想通过关键词搜索相关技术你没看过WWDC基本上搜不出来，尤其是近几年的东西你就算搜出来，越是抽象的API越是没啥注释，越是看注释就知道怎么用的，它还给你来个示例代码。下面开始详细说说:</p>\n<p>iOS主要提供了3个方式MutipeerConnectivity，<a href=\"https://developer.apple.com/documentation/network?language=objc\" target=\"_blank\" rel=\"noopener\">Network库</a>，<a href=\"https://developer.apple.com/search/?q=NSNetService\" target=\"_blank\" rel=\"noopener\">NSNetService相关</a>,而我当时用的是NSNetService因为那个时候还没有Network库，现在这些类都已经被淘汰了，而MutipeerConnectivity虽然方法封装的更好用而且同时支持蓝牙和wifi直连，但你没法控制代码去控制用哪个，而且由于太标准无法做和android的通信，但如果是仅仅iOS间通信聊天，却能直接轻松实现群组间的聊天。</p>\n<h4 id=\"MutipeerConnectivity\"><a href=\"#MutipeerConnectivity\" class=\"headerlink\" title=\"MutipeerConnectivity\"></a><a href=\"https://developer.apple.com/library/archive/navigation/#section=Technologies&amp;topic=MultipeerConnectivity\" target=\"_blank\" rel=\"noopener\">MutipeerConnectivity</a></h4><p>这示例代码实现了无网聊天在不加入网络的情况下发现附近的群组加入进行聊天，但是直接看代码还是有点费劲不向上面Android的文档讲了关键的几个方法，所以我就依照示例和常用的挑出核心代码简单讲一下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建一个设备ID</span><br><span class=\"line\">MCPeerID *peerID;</span><br><span class=\"line\">  @try &#123;</span><br><span class=\"line\">      peerID = [[MCPeerID alloc] initWithDisplayName:self.displayNameTextField.text];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @catch (NSException *exception) &#123;</span><br><span class=\"line\">      NSLog(@&quot;Invalid display name [%@]&quot;, self.displayNameTextField.text);</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@try &#123;</span><br><span class=\"line\">    \t//创建广播对象，serviceType相当于房间名称，discoveryInfo是广播信息，这个方法相当于告诉附近的您愿意加入指定类型的回话,在委托里可以处理各种自定义逻辑</span><br><span class=\"line\">      advertiser = [[MCNearbyServiceAdvertiser alloc] initWithPeer:peerID discoveryInfo:nil serviceType:self.serviceTypeTextField.text];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @catch (NSException *exception) &#123;</span><br><span class=\"line\">      NSLog(@&quot;Invalid service type [%@]&quot;, self.serviceTypeTextField.text);</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - MCNearbyServiceAdvertiserDelegate</span><br><span class=\"line\">//可以通过invitationHandler传入accept进行连接会话结果过滤.</span><br><span class=\"line\">- (void)            advertiser:(MCNearbyServiceAdvertiser *)advertiser</span><br><span class=\"line\">  didReceiveInvitationFromPeer:(MCPeerID *)peerID</span><br><span class=\"line\">                   withContext:(nullable NSData *)context</span><br><span class=\"line\">             invitationHandler:(void (^)(BOOL accept, MCSession * __nullable session))invitationHandler;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 开启广播</span><br><span class=\"line\">[advertiser startAdvertisingPeer];</span><br><span class=\"line\">// 停止广播</span><br><span class=\"line\"> [advertiser stopAdvertisingPeer];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建回话对象，用于存放当前连接的会话</span><br><span class=\"line\">_session = [[MCSession alloc] initWithPeer:peerID securityIdentity:nil encryptionPreference:MCEncryptionRequired];</span><br><span class=\"line\">// 设置 MCSessionDelegate </span><br><span class=\"line\">_session.delegate = self;</span><br><span class=\"line\">// 创建广播对象，和之前的不同在于提供了接收邀请的标准界面</span><br><span class=\"line\">_advertiserAssistant = [[MCAdvertiserAssistant alloc] initWithServiceType:serviceType discoveryInfo:nil session:_session];</span><br><span class=\"line\">// 开启广播</span><br><span class=\"line\">[_advertiserAssistant start];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//停止广播</span><br><span class=\"line\">  [_advertiserAssistant stop];</span><br><span class=\"line\">\t//断开会话连接</span><br><span class=\"line\">  [_session disconnect];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //发送消息给当前会话中的对象  </span><br><span class=\"line\">[self.session sendData:messageData toPeers:self.session.connectedPeers withMode:MCSessionSendDataReliable error:&amp;error];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSProgress *progress;</span><br><span class=\"line\">  // 遍历连接的设备ID</span><br><span class=\"line\">  for (MCPeerID *peerID in _session.connectedPeers) &#123;</span><br><span class=\"line\">\t\t//        imageUrl = [NSURL URLWithString:@&quot;http://images.apple.com/home/images/promo_logic_pro.jpg&quot;];</span><br><span class=\"line\">      // 发送图片给对应设备</span><br><span class=\"line\">      progress = [self.session sendResourceAtURL:imageUrl withName:[imageUrl lastPathComponent] toPeer:peerID withCompletionHandler:^(NSError *error) &#123;</span><br><span class=\"line\">          // Implement this block to know when the sending resource transfer completes and if there is an error.</span><br><span class=\"line\">          if (error) &#123;</span><br><span class=\"line\">              NSLog(@&quot;Send resource to peer [%@] completed with Error [%@]&quot;, peerID.displayName, error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          else &#123;</span><br><span class=\"line\">              // Create an image transcript for this received image resource</span><br><span class=\"line\">              Transcript *transcript = [[Transcript alloc] initWithPeerID:_session.myPeerID imageUrl:imageUrl direction:TRANSCRIPT_DIRECTION_SEND];</span><br><span class=\"line\">              [self.delegate updateTranscript:transcript];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;];</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - MCSessionDelegate</span><br><span class=\"line\">//会话接受数据的时候调用</span><br><span class=\"line\">- (void)session:(MCSession *)session didReceiveData:(NSData *)data fromPeer:(MCPeerID *)peerID</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//会话状态发生改变的时候调用</span><br><span class=\"line\">- (void)session:(MCSession *)session peer:(MCPeerID *)peerID didChangeState:(MCSessionState)state</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t//创建搜索蓝牙设备控制器  </span><br><span class=\"line\">MCBrowserViewController *browserViewController = [[MCBrowserViewController alloc] initWithServiceType:self.serviceType session:self.sessionContainer.session];</span><br><span class=\"line\">                                                    </span><br><span class=\"line\">browserViewController.delegate = self;</span><br><span class=\"line\">  browserViewController.minimumNumberOfPeers = kMCSessionMinimumNumberOfPeers;</span><br><span class=\"line\">  browserViewController.maximumNumberOfPeers = kMCSessionMaximumNumberOfPeers;</span><br><span class=\"line\"></span><br><span class=\"line\">  [self presentViewController:browserViewController animated:YES completion:nil];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - MCBrowserViewControllerDelegate</span><br><span class=\"line\">//搜索到设备后进行筛选用的回调</span><br><span class=\"line\">- (BOOL)browserViewController:(MCBrowserViewController *)browserViewController shouldPresentNearbyPeer:(MCPeerID *)peerID withDiscoveryInfo:(NSDictionary *)info</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//搜索界面点击完成的时候调用</span><br><span class=\"line\">- (void)browserViewControllerDidFinish:(MCBrowserViewController *)browserViewController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [browserViewController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//搜索界面点击取消的时候调用</span><br><span class=\"line\">- (void)browserViewControllerWasCancelled:(MCBrowserViewController *)browserViewController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [browserViewController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面就是实现聊天功能的一些代码片段，但反过来想一下，这个功能主要是实现发现附近设备加入聊天室聊天，这场景其实比较奇怪，离得不远的话聊两句破冰了肯定流传了毕竟离得不远直接面对面不是更好，只有在游戏场景里这种近点通信才是一个比较好的交流方式，比如游戏道具的互换，游戏竞技比赛这类场景跟这类技术才会比较搭配，聊天的话真的就当个例子就好。。。</p>\n<h4 id=\"NSNetService\"><a href=\"#NSNetService\" class=\"headerlink\" title=\"NSNetService\"></a><a href=\"https://developer.apple.com/library/archive/samplecode/WiTap\" target=\"_blank\" rel=\"noopener\">NSNetService</a></h4><p>这里示例代码实现的是使用NSNetService实现两个设备连接后点击色块反馈，现在这个类已经被弃用代替方法是Network库。</p>\n<p>这里简单简绍就不已经示例代码了，因为这块可以直接实现和安卓的互通所以就以我个人总结的几个关键地方为主。</p>\n<p>安卓方面使用就是 <a href=\"https://developer.android.com/training/connect-devices-wirelessly/nsd\" target=\"_blank\" rel=\"noopener\">在同一网络下Andoid NSD</a> 叙述的设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化广播服务为了和Android通信Domain为空字符串，其他的Android上都有，至于port就是你起服务的Socket端口</span><br><span class=\"line\">_netServiceServer = [[NSNetService alloc] initWithDomain:self.netServiceDomain</span><br><span class=\"line\">                                                            type:self.netServiceType</span><br><span class=\"line\">                                                            name:self.netServerName</span><br><span class=\"line\">                                                            port:self.tcpSocketServer.localPort];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - Bonjour</span><br><span class=\"line\"></span><br><span class=\"line\">//发布服务</span><br><span class=\"line\">- (BOOL) publishService &#123;</span><br><span class=\"line\">    [self.netServiceServer scheduleInRunLoop:[NSRunLoop currentRunLoop]</span><br><span class=\"line\">                                     forMode:NSRunLoopCommonModes];</span><br><span class=\"line\">    [self.netServiceServer setDelegate:self];</span><br><span class=\"line\">    [self.netServiceServer publish];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//停止服务</span><br><span class=\"line\">- (void) unpublishService &#123;</span><br><span class=\"line\">    if (self.netServiceServer) &#123;</span><br><span class=\"line\">        [self.netServiceServer stop];</span><br><span class=\"line\">        [self.netServiceServer removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];</span><br><span class=\"line\">        self.netServiceServer = nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //设置委托</span><br><span class=\"line\">netService.delegate=self;</span><br><span class=\"line\">//解析地址 超时时间为5秒</span><br><span class=\"line\">  [netService resolveWithTimeout:5];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma mark - NSNetServiceDelegate</span><br><span class=\"line\">//发布服务失败的时候调用</span><br><span class=\"line\">-(void)netService:(NSNetService *)sender didNotPublish:(NSDictionary&lt;NSString *,NSNumber *&gt; *)errorDict&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//地址解析完成的时候调用</span><br><span class=\"line\">-(void)netServiceDidResolveAddress:(NSNetService *)sender&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动发现服务，之前测试停掉再启动就不生效了，所以每次都重新初始化</span><br><span class=\"line\">- (BOOL)startWithServicesOfType:(NSString*)type inDomain:(NSString*)domain&#123;</span><br><span class=\"line\">    if ( netServiceBrowser != nil ) &#123;</span><br><span class=\"line\">        [self stop];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    netServiceBrowser = [[NSNetServiceBrowser alloc] init];</span><br><span class=\"line\">    if( !netServiceBrowser ) &#123;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    netServiceBrowser.delegate = self;</span><br><span class=\"line\">  \t//设置搜索的参数，与Android通信设置domain为空字符串</span><br><span class=\"line\">    [netServiceBrowser searchForServicesOfType:type inDomain:domain];</span><br><span class=\"line\">    </span><br><span class=\"line\">    return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//停止发现服务</span><br><span class=\"line\">- (void)stop &#123;</span><br><span class=\"line\">    if ( netServiceBrowser == nil ) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [netServiceBrowser stop];</span><br><span class=\"line\">    netServiceBrowser = nil;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [_servers removeAllObjects];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面代码就能实现iOS和Android发现彼此设备的IP和端口，只要你起好tcp的server就能进行连接通信，至于起server随便百度一下就有很多socket起服务的方法这里就不做赘述了我是直接用<a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\" target=\"_blank\" rel=\"noopener\">CocoaAsyncSocket</a>，我当时为了保险做成了混合式发现入网后还会定期udp广播一下其实没必要。</p>\n<h4 id=\"Network库\"><a href=\"#Network库\" class=\"headerlink\" title=\"Network库\"></a><a href=\"https://developer.apple.com/documentation/network?language=objc\" target=\"_blank\" rel=\"noopener\">Network库</a></h4><p>这个没在官方找到什么好的示例代码所以直接就给出了官方文档，在网上看到过不少散装的，NSNetService对应NWConnection初始化用NWEndpoint来初始化，NSNetServiceBrowser对应NWBrowser</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Network</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> parameter = <span class=\"type\">NWParameters</span>()</span><br><span class=\"line\"><span class=\"comment\">//之前的属性NSNetServiceBrowser NSNetService现在都用NWParameters这个对象来传递</span></span><br><span class=\"line\">parameter.includePeerToPeer = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> browser = <span class=\"type\">NWBrowser</span>(<span class=\"keyword\">for</span>: .bonjour(type: <span class=\"string\">\"services.dns-sd.\"</span>, domain: <span class=\"literal\">nil</span>), using: parameter)</span><br><span class=\"line\"><span class=\"comment\">//状态改变的时候回调</span></span><br><span class=\"line\">browser.stateUpdateHandler = &#123; state <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> state &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .ready:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"ready\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .failed(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"error:\"</span>, error.localizedDescription)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结果有变化的时候回调</span></span><br><span class=\"line\">browser.browseResultsChangedHandler = &#123; result, changed <span class=\"keyword\">in</span></span><br><span class=\"line\">    result.forEach &#123; device <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">//endpoint中有netServiceName netServiceType </span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(device.endpoint)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(device.metadata)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//主线程上启动搜索服务</span></span><br><span class=\"line\">browser.start(queue: .main)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//初始化tcp server，入参对应NSNetService初始化的</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.listener = <span class=\"keyword\">try</span> <span class=\"type\">NWListener</span>(using: .tcp, on :localPort)</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.listener?.service = <span class=\"type\">NWListener</span>.<span class=\"type\">Service</span>(name:netServiceName, type: netServiceType, domain: serviceDomain, txtRecord: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">   <span class=\"comment\">//注册服务后回调，对应NSNetService发布服务成功后的回调</span></span><br><span class=\"line\">   <span class=\"keyword\">self</span>.listener?.serviceRegistrationUpdateHandler = &#123; (serviceChange) <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">switch</span>(serviceChange) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> .add(<span class=\"keyword\">let</span> endpoint):<span class=\"comment\">//设备加入</span></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> endpoint &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .service(name, type, domain, interface):</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\"Service Name \\(name) of type \\(type) having domain: \\(domain) and interface: \\(String(describing: interface?.debugDescription))\"</span>)</span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     <span class=\"keyword\">default</span>:</span><br><span class=\"line\">       <span class=\"keyword\">break</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.listener?.stateUpdateHandler = &#123;(newState) <span class=\"keyword\">in</span></span><br><span class=\"line\">     <span class=\"keyword\">switch</span> newState &#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> .ready:</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\"Bonjour TCP Listener: Bonjour listener state changed - ready\"</span>)</span><br><span class=\"line\">     <span class=\"keyword\">default</span>:</span><br><span class=\"line\">       <span class=\"keyword\">break</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.listener?.newConnectionHandler = &#123;(newConnection) <span class=\"keyword\">in</span></span><br><span class=\"line\">     newConnection.stateUpdateHandler = &#123;newState <span class=\"keyword\">in</span></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> newState &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> .ready:</span><br><span class=\"line\">         <span class=\"built_in\">print</span>(<span class=\"string\">\"Bonjour TCP Listener: new  connection state - ready\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">         </span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">         <span class=\"keyword\">break</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     newConnection.start(queue: <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">\"Bonjour TCP Listener: New Connection\"</span>))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">\"Bonjour TCP Listener: Unable to create listener\"</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">self</span>.listener?.start(queue: .main)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化tcp client</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.netConnect = <span class=\"type\">NWConnection</span>(to: .service(name: netServiceName, type: netServiceType, domain: serviceDomain, interface: <span class=\"literal\">nil</span>), port:localPort, using: .tcp)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.netConnect?.stateUpdateHandler = &#123; (newState) <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">\"bonjourToTCP: Connection details: \\(String(describing: self.netConnect?.debugDescription))\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (newState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .ready:</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.connectState = <span class=\"string\">\"Connection state: Ready\"</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">\"bonjourToTCP: new TCP connection ready \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.netConnect?.start(queue: .main)</span><br></pre></td></tr></table></figure>\n<p>新的Network库好处是直接把socket和注册广播服务整合了，这个也没真正测过在这里只是做个记录。</p>\n<h2 id=\"其他平台\"><a href=\"#其他平台\" class=\"headerlink\" title=\"其他平台\"></a>其他平台</h2><h3 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang]\"></a>Golang]</h3><h4 id=\"mDNS\"><a href=\"#mDNS\" class=\"headerlink\" title=\"mDNS\"></a><a href=\"https://github.com/hashicorp/mdns\" target=\"_blank\" rel=\"noopener\">mDNS</a></h4><h4 id=\"bonjour\"><a href=\"#bonjour\" class=\"headerlink\" title=\"bonjour\"></a><a href=\"https://github.com/oleksandr/bonjour\" target=\"_blank\" rel=\"noopener\">bonjour</a></h4><h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js]\"></a>Node.js]</h3><h4 id=\"mDNS-1\"><a href=\"#mDNS-1\" class=\"headerlink\" title=\"mDNS\"></a><a href=\"https://github.com/agnat/node_mdns\" target=\"_blank\" rel=\"noopener\">mDNS</a></h4><h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><h4 id=\"mDNS-2\"><a href=\"#mDNS-2\" class=\"headerlink\" title=\"mDNS\"></a><a href=\"https://github.com/mjansson/mdns\" target=\"_blank\" rel=\"noopener\">mDNS</a></h4>"},{"title":"Cocoa(iOS,OSX)安保系统设计实现","date":"2017-12-21T10:38:50.000Z","_content":"\n![3994053-6cb0e72bd8827012.png](/assets/blogImage/3994053-6cb0e72bd8827012.jpg)\n\n# 前言\n这里主要以iOS和OSX讲讲crash闪退怎么防御。\n其中最新的OSX应用本身就有一定闪退防御，但有点类似`@try @catch`在最外层包了一下普通的越界调用空方法都会中断在操作位置不向下执行，如果没有进一步复杂逻辑不会闪退，只是影响后续的操作。\n\n而iOS则没这么好说话了，二话不说直接闪退给你看没有上面的那种机制。\n\n所以才有了设计一个安保系统的意义，来保证最大程度的健壮性，理想的状态就是不crash且能继续正常运行后面的逻辑。\n\n参考了众多网上的资料有了下面的小成果分享出来，这其实只是安保系统最后的一个环节的防御\n\nhttps://github.com/heroims/SafeObjectProxy\n# 安保系统设计\n这里我所认为的安保系统应该从代码和规范两个层面看，毕竟想抓到所有的crash情况是一定不可能的，现实中即使处处try catch都没法保证抓到所有crash！\n## 代码\n- swizzing切面\n- 方法防御选型\n- 防御成功上报\n\n<!-- more -->\n\n程序内需要的是代码，这个模块是要没有任何侵入性的，所以切面是必须的，其次就是尽量的细化切面颗粒度保证意外情况最小化！\n\n另一点就是切面以后我们对原方法应该采取怎样的防御，这里即可以`try catch`的形式也可以进行逻辑判断形式。\n而我的代码里用逻辑判断，更多的考量是针对的函数都偏下层且容易使用时外部恰巧又有各种循环逻辑，那样相较之下`try catch`在不间断的调用性能会有一定影响，所以暂时没用`try catch`作为防御的手段。\n从另一角度看其实`try catch`的使用场景有些方法还是比较合适的，首先我们在防御时方法颗粒度已经很细所以抓住异常都会做对应处理不会有内存泄漏或逻辑遗漏，另外无论try还是catch内的方法也不会太多，满足了`try catch的最佳场景，只是个别方法循环利用略过高可能性能没法到达极致仅此而已。\n\n防御完了crash就是上报，我们保护了程序的同时也就意味着有地方写的有问题，由于没crash所以没crash log，这时候就需要在安保模块里加入上报机制，这时候我的做法则是放出一个协议等人去实现，安保模块就专心处理防御的事情，上报到服务端的事情交给专门处理这事的模块，我们只需要在防御成功时告知协议有这么个事情即可。剩下的就是个人看情况如需详细情况直接`[NSThread callStackSymbols]`把栈信息输出一下！\n```\n//安保模块上报协议\n@protocol SafeObjectReportProtocol\n\n@required\n/**\n上报防御的crash log\n\n@param log log无法抓到Notification的遗漏注销情况\n*/\n-(void)reportDefendCrashLog:(NSString*)log;\n\n@end\n```\n而实现这个协议的只需要对`SafeObjectProxy`做个Category实现一下即可。\n\n还有就是防御的分类开启，这时候枚举就要用位运算的形式，这样才能兼容多种模式并存如下只开启Array和String的防御\n```\n[SafeObjectProxy startSafeObjectProxyWithType: SafeObjectProxyType_Array| SafeObjectProxyType_String]\n```\n\n## 规范\n另一个安保模块的组成则应该是对代码规范的制定与校验，这就需要clang来做了，不是这里主要讲的，相当于多了一种`Build Options`的`Compiler for C/C++/Objective-C`属性的选择，用我们开发的Xcode校验插件，检查代码语法上的问题直接报错，这样从源头来规范化编码。\n\n# Crash分类及防御实现\n- Unrecognized Selector(找不到方法)\n- UI Refresh Not In Main Thread(UI刷新不在主线程)\n- Input Parm Abnormal(入参异常)\n- Dangling Pointer(野指针)\n- Abnormal Matching(异常配对)\n- Thread Conflict(线程冲突)\n\n想要防御crash，首先要做的就是了解都有哪些情况会产生crash,上边就是笔者总结的几种最常见的情况，不全的话希望有人留言补足，毕竟crash的防御真正有发言权开发这种模块的估计只有大公司开发app的，不然用户量不够没样本采集，没法了解坑爹的情况！\n\n而上面列的6种常见crash，真正能广域控制得了的恐怕也只有一半不到！下面就一一讲解一下,Hook切面就是主要的手段！\n\n## Unrecognized Selector(找不到方法)\n这个找不到方法算是比较好办的。。。也算是比较常见的好查的，另外处理ok了null对象调用的问题也会随之解决\n可选的方法有两种\nHook这两个方法\n`- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector`\n`- (void)forwardInvocation:(NSInvocation *)anInvocation`\n或Hook这一个方法\n`-(id)forwardingTargetForSelector:(SEL)aSelector`\n\n核心思想就是在找不到方法之前创建方法确保继续执行不挂，为了尽量不多余的创建方法，集中的把创建打到统一的地方。\n\n前者需要在`methodSignatureForSelector`执行前在新的target里创建没有的方法，然后用它调用`methodSignatureForSelector`返回，而这里的target当然要单例弄出来省的以后来回创建。然后在`forwardInvocation`里用他来调用`invokeWithTarget`指到我们新的target上。\n\n后者也就是我用的方法，之所以用它主要是一个方法 就ok！而我们还要兼顾静态方法和实例方法去分别hook才能防住这两种，而前者也要hook的方法更多。。。。\n而这里只需要切`forwardingTargetForSelector`方法，静态方法返回class，动态方法返回target，当然返回之前我们要添加上不存在的方法，值得注意的是OSX上一个神奇的问题，我在判断是否系统有这个方法的时候第一次居然`respondsToSelector`返回false而`methodSignatureForSelector`有数据，第二次校验是`methodSignatureForSelector`才为空，而iOS上则没这问题第一次校验就是对的！\n## UI Refresh Not In Main Thread(UI刷新不在主线程)\n刷新UI不在主线程的情况这里只是针对UIView和NSView的3个方法做切面线程判断。分别是`setNeedsLayout`,`setNeedsDisplay`,`setNeedsDisplayInRect`，执行之前看是不是在主线程，不在的话就切到主线程执行，但很明显这3个方法肯定覆盖不全，而且就算覆盖全了每次都判断一下也是性能浪费，所以这里各自斟酌处理吧，这类情况暂时没想到其他好的处理方式！但好在算是有这么个可控方案！\n## Input Parm Abnormal(入参异常)\n入参异常这是一大类，防御的方法也相对比较通俗易懂，也是最容易查最容易出现的。\n### 常用类型入参异常\n常见类包括String，Array，Dictionary，URL，FileManager等这些类空值初始化，越界取值，空赋值等，基本看crash log统计依次切面对应方法在执行前判断一下就ok。如`objectAtIndex`,`objectAtIndexedSubscript`,`removeObjectAtIndex`,`fileURLWithPath`,`initWithAttributedString`,`substringFromIndex`,`substringToIndex`等等。唯一需要注意的就是这些要切面的类名可是五花八门而且更iOS版本有很大关系，所以这个就是靠crash log积累了解有哪些坑。当然代码写的好就用不到了！`__NSSingleObjectArrayI`这个就是最近在iOS11上新发现的报错数组类，当然也可能是最近我司有人写出了这个相关的bug......\n常见的需要注意的hook的类有以下\n`objc_getClass(\"__NSPlaceholderArray\")`\n`objc_getClass(\"__NSSingleObjectArrayI\")`\n`objc_getClass(\"__NSArrayI\")`\n`objc_getClass(\"__NSArrayM\")`\n`objc_getClass(\"__NSPlaceholderDictionary\")`\n`objc_getClass(\"__NSDictionaryI\")`\n`objc_getClass(\"__NSDictionaryM\")`\n`objc_getClass(\"NSConcreteAttributedString\")`\n`objc_getClass(\"NSConcreteMutableAttributedString\")`\n`objc_getClass(\"__NSCFConstantString\")`\n`objc_getClass(\"NSTaggedPointerString\")`\n`objc_getClass(\"__NSCFString\")`\n`objc_getClass(\"NSPlaceholderMutableString\")`\n具体有哪些方法需要切面还是看源码吧，这部分是没什么难点的。\n\n另外我的防御里面没对NSCache做，可能以后会随便加点，因为缓存相关的模块我的建议是自己封装缓存模块或用第三方，那样对于上层使用者来说已经是安全的了！各种异常处理在缓存模块里就应该有封装。\n\n### KVC Crash\nKVC归根结底也算这类入参异常，一共切面3个地方就够防御了！\n`-(void)setValue:(id)value forKey:(NSString *)key`,\n`-(void)setValue:(id)value forKeyPath:(NSString *)keyPath`\n空值防御上面2个方法\n`-(void)setValue:(id)value forUndefinedKey:(NSString *)key`\n上面这个就是没有的属性做赋值操作时走的回调，如果用到我的[SafeObjectProxy](https://github.com/heroims/SafeObjectProxy)要自定义各个类不同的处理是可以不开启`UndefinedKey`防御的！\n\n## Dangling Pointer(野指针)\n这个种Crash堪称经典！就是那个最难排查的，而这里我们能做的防御事情也十分有限！\n具体定位看看腾讯这几篇很有帮助！\n[如何定位Obj-C野指针随机Crash(一)](https://dev.qq.com/topic/59141e56ca95d00d727ba750)\n[如何定位Obj-C野指针随机Crash(二)](https://dev.qq.com/topic/59142d61ca95d00d727ba752)\n[如何定位Obj-C野指针随机Crash(三)](https://dev.qq.com/topic/5915134b75d11c055ca7fca0)\n我们只能去对已知的出现野指针的类进行防御，找到crash的野指针开启Zombie Objects，加上Zombies工具，然后想办法不断提高复现率还是可以的定位到的。\n我们的防御则是hook系统dealloc，判断需要做处理的类不走系统delloc而是走`objc_desctructInstance `释放实例内部所持有属性的引用和关联对象,保证对象最小化。紧接着就需要来波`isa swizzling`了，因为通常野指针伴随着的还有就是调用没有的方法，或者由于调用的这个时机是不正常的，各种数据的安全性都没了保证，所以dealloc后解除所有持有，再把原来的isa指向一个其他的类，而这个类能把所有的调用方法指向一个空方法这样就起到了防御的作用。\n\n能干这事的也只有NSProxy了，利用协议实现`methodSignatureForSelector `，`forwardInvocation `方法，统一打到之前处理找不到方法自动创建的类中，也就是在NSProxy内实现上面`Unrecognized Selector`的防御，这样所有对于野指针的调用就都是空了！\n正因为上面的原因一旦开启了这个防御，真正释放的时机就还是有的，如果在野指针出现前触发了真正释放的逻辑，crash就还是会有的！\n我在[SafeObjectProxy](https://github.com/heroims/SafeObjectProxy)里只是用野指针个数控制做真正释放，回头可能会封装个block方便复杂情况的判断。\n## Abnormal Matching(异常配对)\n这一类算是不建议做防御的！成对的方法处理异常像KVO，NSTimer，NSNotification都算，需要注册和注销。\n这种情况我的建议是统一封装独立模块调用统一的方法，让人不需要关心注册和注销，主要写逻辑处理。从功能实现上做严格限制，这样让人考虑的就是怎么样把一个场景融入到封装的方法中，而不是随意的写！\n下面说下原因，由于注册和注销是分离写的 ，所以使用场景，解决问题的方法都会有着非常灵活的操作，这其实很可怕，先用KVO做一个举例顺便说一下这类防御如果真要做一般的做法是怎么做。\n### KVO\nKVO这种crash如果要防御其实只能防御下面3种情况：\n1.观察者或被观察者已经不存在了\n2.取消和添加的次数不匹配\n3.没写监听回调`observeValueForKeyPath:ofObject:change:context:`\n\n而这3种情况我们来认真思考下开发的阶段是不是貌似都会第一时间就被发现！而且如果是没经验的程序员写KVO我们是不是都不敢用，会再三审查，而有经验的又不会犯上面的错。。。。\n如果对上面的情况防御也很复杂，而且我尝试并且用过很多第三方，都在我司稍微有点复杂的项目上挂了，不仅没能防御crash还造了crash，这种成对逻辑的灵活性非常高，你没法知道系统内部人家怎么用着玩的！\n说一下防御上面的情况首先切面add、removeObserve是一定的，还要在所有的类里再加一个对象，这个对象主要负责管理KVO下面就叫KVOController吧，让所有的观察者都成为了被观察者的一个属性，用map记录原来的观察者和keyPath等信息,这样添加或移除观察者就能判断是不是成对出现的，另外KVOController在dealloc时也可以通过map依次移除监听，而由于所有的监听回调其实都是由KVOController的`observeValueForKeyPath:ofObject:change:context:`通过`[originObserver observeValueForKeyPath:keyPath ofObject:object change:change context:context]`传递出去的自然没写监听回调的情况也可以判断了，但也是能解决那3个情况！\n\n真正KVO产生的恐怖的crash是移除时机不和观察者或被观察者销毁有关系，而是跟我们的逻辑有关，一旦没在合适时机移除导致的crash排查起来超级费劲！还有你在监听回调里处理逻辑有没有线程安全问题，这些才是我们在上线前容易漏，排查又不好排查的！\n\n安保系统则是要保护上线后能正常运作，然而就像我这里说的KVO，如果不在编码期间就做严格规范，上线后出的问题也是根本无从防御的！\n\n然后再来说说怎么限制我们的自由发挥，KVOController刚才说到的这里需要的是把它变形，把回调用block放出来，另外就是让它有单例模式和普通的实例模式，只有创建对象、关联监听和逻辑处理，一个KVOController可以是全局或属于一个对象，相当于可视化了KVO的生效周期，一目了然，这里让特殊逻辑适应我们的规范才是正确的安保思路。包括NSTimer在内也也是如此可以搞个TimerController不过封装最好也别用NSTimer精度不高，反正要封装不如直接gcd，与其要手动保持成对不如我们就把逻辑封装好，让使用者忘掉成对的概念！但在开放的今天完全可以GitHub搜一波找些封装好的自己再简单包装下，然后让团队遵循规范开发即可。。。\n\nKVO:[KVOController](https://github.com/facebook/KVOController)比较推荐的一个KVO管理\n\n### NSTimer\nNSTimer比较特殊，有些时候偏偏不该成对使用，它的成对的逻辑其实是跟自己的生命周期有关，毕竟生命周期结束时要去成对的停掉timer才能释放，另一点就是NSTimer精确度并不高！但它封装出来给人用的方法是ok的正是有单例模式和实例模式两种使用。所以我的建议当然是自己把gcd的timer封装一下，另外把target这个概念变为weak持有，这样我们自己封装的timer就可以dealloc的时候停掉timer释放了，按照系统NSTimer封装方法即可。这样至少能保证timer指定的target释放时timer能停掉不会因为跑了其他不安全的逻辑挂掉。其他可能挂掉的情况应该比较少。。。\n\nTimer:[MSWeakTimer](https://github.com/mindsnacks/MSWeakTimer)比较推荐的一个计时器封装方法就是我上面讲的那种\n### NSNotification\n这个虽然也是成对使用，单比上面的几个要安全一些，因为使用它有`[[NSNotificationCenter defaultCenter] removeObserver:self]`多次调用或没`addObserver`都不会挂，所以可以全局搞一下，我在[SafeObjectProxy](https://github.com/heroims/SafeObjectProxy)里面就只是对所有`NSObject`对象添加了个属性做标识，然后hook一下`NSNotificationCenter`的`-(void)addObserver:(id)observer selector:(SEL)aSelector name:(NSNotificationName)aName object:(id)anObject`方法，只要observer是`NSObject`对象我就标识一下，然后切所有`NSObject`的`dealloc`只要标识了的统一执行`[[NSNotificationCenter defaultCenter] removeObserver:self]`，反正多执行了也没问题用的放心！\n\n但只要是成对的，就有另一个问题，万一真正需要注销的地方是跟逻辑有关，那你对象销毁时注销早就晚了，就像上面KVO中提到的我们做的这层crash防御其实犯错率并不高能及时发现，而及时发现不了的只能是通过编码规范或者人员分级禁用来解决。\n## Thread Conflict(线程冲突)\n基本无解的问题，出现以后瞬间懵逼，典型例子就是死锁，异步调用同一对象导致不安全，基本没有防御手段，排查也只能靠多加log不断复现，然后猜。。。。\n但一般只要代码按照正常的规范写也不会那么容易遇到这问题，但线程冲突理论上只要保证UI操作都在主线程，其他都gcd不在主线程上，然后部分需要线程安全的gcd信号量做锁就可以，但不会有人这样写代码，性能和效率那么搞是都要废的，现在都恨不得你马上出活那有空那样，这类就可以完全不考虑防御的事了！\n\n","source":"_posts/Cocoa-iOS-OSX-安保系统设计实现.md","raw":"---\ntitle: 'Cocoa(iOS,OSX)安保系统设计实现'\ndate: 2017-12-21 18:38:50\ntags:\n\t- IOS\n\t- OSX\n\t- 安保系统\n\t- Crash防御\n\t- Cocoa\n---\n\n![3994053-6cb0e72bd8827012.png](/assets/blogImage/3994053-6cb0e72bd8827012.jpg)\n\n# 前言\n这里主要以iOS和OSX讲讲crash闪退怎么防御。\n其中最新的OSX应用本身就有一定闪退防御，但有点类似`@try @catch`在最外层包了一下普通的越界调用空方法都会中断在操作位置不向下执行，如果没有进一步复杂逻辑不会闪退，只是影响后续的操作。\n\n而iOS则没这么好说话了，二话不说直接闪退给你看没有上面的那种机制。\n\n所以才有了设计一个安保系统的意义，来保证最大程度的健壮性，理想的状态就是不crash且能继续正常运行后面的逻辑。\n\n参考了众多网上的资料有了下面的小成果分享出来，这其实只是安保系统最后的一个环节的防御\n\nhttps://github.com/heroims/SafeObjectProxy\n# 安保系统设计\n这里我所认为的安保系统应该从代码和规范两个层面看，毕竟想抓到所有的crash情况是一定不可能的，现实中即使处处try catch都没法保证抓到所有crash！\n## 代码\n- swizzing切面\n- 方法防御选型\n- 防御成功上报\n\n<!-- more -->\n\n程序内需要的是代码，这个模块是要没有任何侵入性的，所以切面是必须的，其次就是尽量的细化切面颗粒度保证意外情况最小化！\n\n另一点就是切面以后我们对原方法应该采取怎样的防御，这里即可以`try catch`的形式也可以进行逻辑判断形式。\n而我的代码里用逻辑判断，更多的考量是针对的函数都偏下层且容易使用时外部恰巧又有各种循环逻辑，那样相较之下`try catch`在不间断的调用性能会有一定影响，所以暂时没用`try catch`作为防御的手段。\n从另一角度看其实`try catch`的使用场景有些方法还是比较合适的，首先我们在防御时方法颗粒度已经很细所以抓住异常都会做对应处理不会有内存泄漏或逻辑遗漏，另外无论try还是catch内的方法也不会太多，满足了`try catch的最佳场景，只是个别方法循环利用略过高可能性能没法到达极致仅此而已。\n\n防御完了crash就是上报，我们保护了程序的同时也就意味着有地方写的有问题，由于没crash所以没crash log，这时候就需要在安保模块里加入上报机制，这时候我的做法则是放出一个协议等人去实现，安保模块就专心处理防御的事情，上报到服务端的事情交给专门处理这事的模块，我们只需要在防御成功时告知协议有这么个事情即可。剩下的就是个人看情况如需详细情况直接`[NSThread callStackSymbols]`把栈信息输出一下！\n```\n//安保模块上报协议\n@protocol SafeObjectReportProtocol\n\n@required\n/**\n上报防御的crash log\n\n@param log log无法抓到Notification的遗漏注销情况\n*/\n-(void)reportDefendCrashLog:(NSString*)log;\n\n@end\n```\n而实现这个协议的只需要对`SafeObjectProxy`做个Category实现一下即可。\n\n还有就是防御的分类开启，这时候枚举就要用位运算的形式，这样才能兼容多种模式并存如下只开启Array和String的防御\n```\n[SafeObjectProxy startSafeObjectProxyWithType: SafeObjectProxyType_Array| SafeObjectProxyType_String]\n```\n\n## 规范\n另一个安保模块的组成则应该是对代码规范的制定与校验，这就需要clang来做了，不是这里主要讲的，相当于多了一种`Build Options`的`Compiler for C/C++/Objective-C`属性的选择，用我们开发的Xcode校验插件，检查代码语法上的问题直接报错，这样从源头来规范化编码。\n\n# Crash分类及防御实现\n- Unrecognized Selector(找不到方法)\n- UI Refresh Not In Main Thread(UI刷新不在主线程)\n- Input Parm Abnormal(入参异常)\n- Dangling Pointer(野指针)\n- Abnormal Matching(异常配对)\n- Thread Conflict(线程冲突)\n\n想要防御crash，首先要做的就是了解都有哪些情况会产生crash,上边就是笔者总结的几种最常见的情况，不全的话希望有人留言补足，毕竟crash的防御真正有发言权开发这种模块的估计只有大公司开发app的，不然用户量不够没样本采集，没法了解坑爹的情况！\n\n而上面列的6种常见crash，真正能广域控制得了的恐怕也只有一半不到！下面就一一讲解一下,Hook切面就是主要的手段！\n\n## Unrecognized Selector(找不到方法)\n这个找不到方法算是比较好办的。。。也算是比较常见的好查的，另外处理ok了null对象调用的问题也会随之解决\n可选的方法有两种\nHook这两个方法\n`- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector`\n`- (void)forwardInvocation:(NSInvocation *)anInvocation`\n或Hook这一个方法\n`-(id)forwardingTargetForSelector:(SEL)aSelector`\n\n核心思想就是在找不到方法之前创建方法确保继续执行不挂，为了尽量不多余的创建方法，集中的把创建打到统一的地方。\n\n前者需要在`methodSignatureForSelector`执行前在新的target里创建没有的方法，然后用它调用`methodSignatureForSelector`返回，而这里的target当然要单例弄出来省的以后来回创建。然后在`forwardInvocation`里用他来调用`invokeWithTarget`指到我们新的target上。\n\n后者也就是我用的方法，之所以用它主要是一个方法 就ok！而我们还要兼顾静态方法和实例方法去分别hook才能防住这两种，而前者也要hook的方法更多。。。。\n而这里只需要切`forwardingTargetForSelector`方法，静态方法返回class，动态方法返回target，当然返回之前我们要添加上不存在的方法，值得注意的是OSX上一个神奇的问题，我在判断是否系统有这个方法的时候第一次居然`respondsToSelector`返回false而`methodSignatureForSelector`有数据，第二次校验是`methodSignatureForSelector`才为空，而iOS上则没这问题第一次校验就是对的！\n## UI Refresh Not In Main Thread(UI刷新不在主线程)\n刷新UI不在主线程的情况这里只是针对UIView和NSView的3个方法做切面线程判断。分别是`setNeedsLayout`,`setNeedsDisplay`,`setNeedsDisplayInRect`，执行之前看是不是在主线程，不在的话就切到主线程执行，但很明显这3个方法肯定覆盖不全，而且就算覆盖全了每次都判断一下也是性能浪费，所以这里各自斟酌处理吧，这类情况暂时没想到其他好的处理方式！但好在算是有这么个可控方案！\n## Input Parm Abnormal(入参异常)\n入参异常这是一大类，防御的方法也相对比较通俗易懂，也是最容易查最容易出现的。\n### 常用类型入参异常\n常见类包括String，Array，Dictionary，URL，FileManager等这些类空值初始化，越界取值，空赋值等，基本看crash log统计依次切面对应方法在执行前判断一下就ok。如`objectAtIndex`,`objectAtIndexedSubscript`,`removeObjectAtIndex`,`fileURLWithPath`,`initWithAttributedString`,`substringFromIndex`,`substringToIndex`等等。唯一需要注意的就是这些要切面的类名可是五花八门而且更iOS版本有很大关系，所以这个就是靠crash log积累了解有哪些坑。当然代码写的好就用不到了！`__NSSingleObjectArrayI`这个就是最近在iOS11上新发现的报错数组类，当然也可能是最近我司有人写出了这个相关的bug......\n常见的需要注意的hook的类有以下\n`objc_getClass(\"__NSPlaceholderArray\")`\n`objc_getClass(\"__NSSingleObjectArrayI\")`\n`objc_getClass(\"__NSArrayI\")`\n`objc_getClass(\"__NSArrayM\")`\n`objc_getClass(\"__NSPlaceholderDictionary\")`\n`objc_getClass(\"__NSDictionaryI\")`\n`objc_getClass(\"__NSDictionaryM\")`\n`objc_getClass(\"NSConcreteAttributedString\")`\n`objc_getClass(\"NSConcreteMutableAttributedString\")`\n`objc_getClass(\"__NSCFConstantString\")`\n`objc_getClass(\"NSTaggedPointerString\")`\n`objc_getClass(\"__NSCFString\")`\n`objc_getClass(\"NSPlaceholderMutableString\")`\n具体有哪些方法需要切面还是看源码吧，这部分是没什么难点的。\n\n另外我的防御里面没对NSCache做，可能以后会随便加点，因为缓存相关的模块我的建议是自己封装缓存模块或用第三方，那样对于上层使用者来说已经是安全的了！各种异常处理在缓存模块里就应该有封装。\n\n### KVC Crash\nKVC归根结底也算这类入参异常，一共切面3个地方就够防御了！\n`-(void)setValue:(id)value forKey:(NSString *)key`,\n`-(void)setValue:(id)value forKeyPath:(NSString *)keyPath`\n空值防御上面2个方法\n`-(void)setValue:(id)value forUndefinedKey:(NSString *)key`\n上面这个就是没有的属性做赋值操作时走的回调，如果用到我的[SafeObjectProxy](https://github.com/heroims/SafeObjectProxy)要自定义各个类不同的处理是可以不开启`UndefinedKey`防御的！\n\n## Dangling Pointer(野指针)\n这个种Crash堪称经典！就是那个最难排查的，而这里我们能做的防御事情也十分有限！\n具体定位看看腾讯这几篇很有帮助！\n[如何定位Obj-C野指针随机Crash(一)](https://dev.qq.com/topic/59141e56ca95d00d727ba750)\n[如何定位Obj-C野指针随机Crash(二)](https://dev.qq.com/topic/59142d61ca95d00d727ba752)\n[如何定位Obj-C野指针随机Crash(三)](https://dev.qq.com/topic/5915134b75d11c055ca7fca0)\n我们只能去对已知的出现野指针的类进行防御，找到crash的野指针开启Zombie Objects，加上Zombies工具，然后想办法不断提高复现率还是可以的定位到的。\n我们的防御则是hook系统dealloc，判断需要做处理的类不走系统delloc而是走`objc_desctructInstance `释放实例内部所持有属性的引用和关联对象,保证对象最小化。紧接着就需要来波`isa swizzling`了，因为通常野指针伴随着的还有就是调用没有的方法，或者由于调用的这个时机是不正常的，各种数据的安全性都没了保证，所以dealloc后解除所有持有，再把原来的isa指向一个其他的类，而这个类能把所有的调用方法指向一个空方法这样就起到了防御的作用。\n\n能干这事的也只有NSProxy了，利用协议实现`methodSignatureForSelector `，`forwardInvocation `方法，统一打到之前处理找不到方法自动创建的类中，也就是在NSProxy内实现上面`Unrecognized Selector`的防御，这样所有对于野指针的调用就都是空了！\n正因为上面的原因一旦开启了这个防御，真正释放的时机就还是有的，如果在野指针出现前触发了真正释放的逻辑，crash就还是会有的！\n我在[SafeObjectProxy](https://github.com/heroims/SafeObjectProxy)里只是用野指针个数控制做真正释放，回头可能会封装个block方便复杂情况的判断。\n## Abnormal Matching(异常配对)\n这一类算是不建议做防御的！成对的方法处理异常像KVO，NSTimer，NSNotification都算，需要注册和注销。\n这种情况我的建议是统一封装独立模块调用统一的方法，让人不需要关心注册和注销，主要写逻辑处理。从功能实现上做严格限制，这样让人考虑的就是怎么样把一个场景融入到封装的方法中，而不是随意的写！\n下面说下原因，由于注册和注销是分离写的 ，所以使用场景，解决问题的方法都会有着非常灵活的操作，这其实很可怕，先用KVO做一个举例顺便说一下这类防御如果真要做一般的做法是怎么做。\n### KVO\nKVO这种crash如果要防御其实只能防御下面3种情况：\n1.观察者或被观察者已经不存在了\n2.取消和添加的次数不匹配\n3.没写监听回调`observeValueForKeyPath:ofObject:change:context:`\n\n而这3种情况我们来认真思考下开发的阶段是不是貌似都会第一时间就被发现！而且如果是没经验的程序员写KVO我们是不是都不敢用，会再三审查，而有经验的又不会犯上面的错。。。。\n如果对上面的情况防御也很复杂，而且我尝试并且用过很多第三方，都在我司稍微有点复杂的项目上挂了，不仅没能防御crash还造了crash，这种成对逻辑的灵活性非常高，你没法知道系统内部人家怎么用着玩的！\n说一下防御上面的情况首先切面add、removeObserve是一定的，还要在所有的类里再加一个对象，这个对象主要负责管理KVO下面就叫KVOController吧，让所有的观察者都成为了被观察者的一个属性，用map记录原来的观察者和keyPath等信息,这样添加或移除观察者就能判断是不是成对出现的，另外KVOController在dealloc时也可以通过map依次移除监听，而由于所有的监听回调其实都是由KVOController的`observeValueForKeyPath:ofObject:change:context:`通过`[originObserver observeValueForKeyPath:keyPath ofObject:object change:change context:context]`传递出去的自然没写监听回调的情况也可以判断了，但也是能解决那3个情况！\n\n真正KVO产生的恐怖的crash是移除时机不和观察者或被观察者销毁有关系，而是跟我们的逻辑有关，一旦没在合适时机移除导致的crash排查起来超级费劲！还有你在监听回调里处理逻辑有没有线程安全问题，这些才是我们在上线前容易漏，排查又不好排查的！\n\n安保系统则是要保护上线后能正常运作，然而就像我这里说的KVO，如果不在编码期间就做严格规范，上线后出的问题也是根本无从防御的！\n\n然后再来说说怎么限制我们的自由发挥，KVOController刚才说到的这里需要的是把它变形，把回调用block放出来，另外就是让它有单例模式和普通的实例模式，只有创建对象、关联监听和逻辑处理，一个KVOController可以是全局或属于一个对象，相当于可视化了KVO的生效周期，一目了然，这里让特殊逻辑适应我们的规范才是正确的安保思路。包括NSTimer在内也也是如此可以搞个TimerController不过封装最好也别用NSTimer精度不高，反正要封装不如直接gcd，与其要手动保持成对不如我们就把逻辑封装好，让使用者忘掉成对的概念！但在开放的今天完全可以GitHub搜一波找些封装好的自己再简单包装下，然后让团队遵循规范开发即可。。。\n\nKVO:[KVOController](https://github.com/facebook/KVOController)比较推荐的一个KVO管理\n\n### NSTimer\nNSTimer比较特殊，有些时候偏偏不该成对使用，它的成对的逻辑其实是跟自己的生命周期有关，毕竟生命周期结束时要去成对的停掉timer才能释放，另一点就是NSTimer精确度并不高！但它封装出来给人用的方法是ok的正是有单例模式和实例模式两种使用。所以我的建议当然是自己把gcd的timer封装一下，另外把target这个概念变为weak持有，这样我们自己封装的timer就可以dealloc的时候停掉timer释放了，按照系统NSTimer封装方法即可。这样至少能保证timer指定的target释放时timer能停掉不会因为跑了其他不安全的逻辑挂掉。其他可能挂掉的情况应该比较少。。。\n\nTimer:[MSWeakTimer](https://github.com/mindsnacks/MSWeakTimer)比较推荐的一个计时器封装方法就是我上面讲的那种\n### NSNotification\n这个虽然也是成对使用，单比上面的几个要安全一些，因为使用它有`[[NSNotificationCenter defaultCenter] removeObserver:self]`多次调用或没`addObserver`都不会挂，所以可以全局搞一下，我在[SafeObjectProxy](https://github.com/heroims/SafeObjectProxy)里面就只是对所有`NSObject`对象添加了个属性做标识，然后hook一下`NSNotificationCenter`的`-(void)addObserver:(id)observer selector:(SEL)aSelector name:(NSNotificationName)aName object:(id)anObject`方法，只要observer是`NSObject`对象我就标识一下，然后切所有`NSObject`的`dealloc`只要标识了的统一执行`[[NSNotificationCenter defaultCenter] removeObserver:self]`，反正多执行了也没问题用的放心！\n\n但只要是成对的，就有另一个问题，万一真正需要注销的地方是跟逻辑有关，那你对象销毁时注销早就晚了，就像上面KVO中提到的我们做的这层crash防御其实犯错率并不高能及时发现，而及时发现不了的只能是通过编码规范或者人员分级禁用来解决。\n## Thread Conflict(线程冲突)\n基本无解的问题，出现以后瞬间懵逼，典型例子就是死锁，异步调用同一对象导致不安全，基本没有防御手段，排查也只能靠多加log不断复现，然后猜。。。。\n但一般只要代码按照正常的规范写也不会那么容易遇到这问题，但线程冲突理论上只要保证UI操作都在主线程，其他都gcd不在主线程上，然后部分需要线程安全的gcd信号量做锁就可以，但不会有人这样写代码，性能和效率那么搞是都要废的，现在都恨不得你马上出活那有空那样，这类就可以完全不考虑防御的事了！\n\n","slug":"Cocoa-iOS-OSX-安保系统设计实现","published":1,"updated":"2021-07-08T09:20:31.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqe0001nhs6ajhanlh7","content":"<p><img src=\"/assets/blogImage/3994053-6cb0e72bd8827012.jpg\" alt=\"3994053-6cb0e72bd8827012.png\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这里主要以iOS和OSX讲讲crash闪退怎么防御。<br>其中最新的OSX应用本身就有一定闪退防御，但有点类似<code>@try @catch</code>在最外层包了一下普通的越界调用空方法都会中断在操作位置不向下执行，如果没有进一步复杂逻辑不会闪退，只是影响后续的操作。</p>\n<p>而iOS则没这么好说话了，二话不说直接闪退给你看没有上面的那种机制。</p>\n<p>所以才有了设计一个安保系统的意义，来保证最大程度的健壮性，理想的状态就是不crash且能继续正常运行后面的逻辑。</p>\n<p>参考了众多网上的资料有了下面的小成果分享出来，这其实只是安保系统最后的一个环节的防御</p>\n<p><a href=\"https://github.com/heroims/SafeObjectProxy\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/SafeObjectProxy</a></p>\n<h1 id=\"安保系统设计\"><a href=\"#安保系统设计\" class=\"headerlink\" title=\"安保系统设计\"></a>安保系统设计</h1><p>这里我所认为的安保系统应该从代码和规范两个层面看，毕竟想抓到所有的crash情况是一定不可能的，现实中即使处处try catch都没法保证抓到所有crash！</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><ul>\n<li>swizzing切面</li>\n<li>方法防御选型</li>\n<li>防御成功上报</li>\n</ul>\n<a id=\"more\"></a>\n<p>程序内需要的是代码，这个模块是要没有任何侵入性的，所以切面是必须的，其次就是尽量的细化切面颗粒度保证意外情况最小化！</p>\n<p>另一点就是切面以后我们对原方法应该采取怎样的防御，这里即可以<code>try catch</code>的形式也可以进行逻辑判断形式。<br>而我的代码里用逻辑判断，更多的考量是针对的函数都偏下层且容易使用时外部恰巧又有各种循环逻辑，那样相较之下<code>try catch</code>在不间断的调用性能会有一定影响，所以暂时没用<code>try catch</code>作为防御的手段。<br>从另一角度看其实<code>try catch</code>的使用场景有些方法还是比较合适的，首先我们在防御时方法颗粒度已经很细所以抓住异常都会做对应处理不会有内存泄漏或逻辑遗漏，另外无论try还是catch内的方法也不会太多，满足了`try catch的最佳场景，只是个别方法循环利用略过高可能性能没法到达极致仅此而已。</p>\n<p>防御完了crash就是上报，我们保护了程序的同时也就意味着有地方写的有问题，由于没crash所以没crash log，这时候就需要在安保模块里加入上报机制，这时候我的做法则是放出一个协议等人去实现，安保模块就专心处理防御的事情，上报到服务端的事情交给专门处理这事的模块，我们只需要在防御成功时告知协议有这么个事情即可。剩下的就是个人看情况如需详细情况直接<code>[NSThread callStackSymbols]</code>把栈信息输出一下！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安保模块上报协议</span><br><span class=\"line\">@protocol SafeObjectReportProtocol</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\">/**</span><br><span class=\"line\">上报防御的crash log</span><br><span class=\"line\"></span><br><span class=\"line\">@param log log无法抓到Notification的遗漏注销情况</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)reportDefendCrashLog:(NSString*)log;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>而实现这个协议的只需要对<code>SafeObjectProxy</code>做个Category实现一下即可。</p>\n<p>还有就是防御的分类开启，这时候枚举就要用位运算的形式，这样才能兼容多种模式并存如下只开启Array和String的防御<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SafeObjectProxy startSafeObjectProxyWithType: SafeObjectProxyType_Array| SafeObjectProxyType_String]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><p>另一个安保模块的组成则应该是对代码规范的制定与校验，这就需要clang来做了，不是这里主要讲的，相当于多了一种<code>Build Options</code>的<code>Compiler for C/C++/Objective-C</code>属性的选择，用我们开发的Xcode校验插件，检查代码语法上的问题直接报错，这样从源头来规范化编码。</p>\n<h1 id=\"Crash分类及防御实现\"><a href=\"#Crash分类及防御实现\" class=\"headerlink\" title=\"Crash分类及防御实现\"></a>Crash分类及防御实现</h1><ul>\n<li>Unrecognized Selector(找不到方法)</li>\n<li>UI Refresh Not In Main Thread(UI刷新不在主线程)</li>\n<li>Input Parm Abnormal(入参异常)</li>\n<li>Dangling Pointer(野指针)</li>\n<li>Abnormal Matching(异常配对)</li>\n<li>Thread Conflict(线程冲突)</li>\n</ul>\n<p>想要防御crash，首先要做的就是了解都有哪些情况会产生crash,上边就是笔者总结的几种最常见的情况，不全的话希望有人留言补足，毕竟crash的防御真正有发言权开发这种模块的估计只有大公司开发app的，不然用户量不够没样本采集，没法了解坑爹的情况！</p>\n<p>而上面列的6种常见crash，真正能广域控制得了的恐怕也只有一半不到！下面就一一讲解一下,Hook切面就是主要的手段！</p>\n<h2 id=\"Unrecognized-Selector-找不到方法\"><a href=\"#Unrecognized-Selector-找不到方法\" class=\"headerlink\" title=\"Unrecognized Selector(找不到方法)\"></a>Unrecognized Selector(找不到方法)</h2><p>这个找不到方法算是比较好办的。。。也算是比较常见的好查的，另外处理ok了null对象调用的问题也会随之解决<br>可选的方法有两种<br>Hook这两个方法<br><code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code><br><code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code><br>或Hook这一个方法<br><code>-(id)forwardingTargetForSelector:(SEL)aSelector</code></p>\n<p>核心思想就是在找不到方法之前创建方法确保继续执行不挂，为了尽量不多余的创建方法，集中的把创建打到统一的地方。</p>\n<p>前者需要在<code>methodSignatureForSelector</code>执行前在新的target里创建没有的方法，然后用它调用<code>methodSignatureForSelector</code>返回，而这里的target当然要单例弄出来省的以后来回创建。然后在<code>forwardInvocation</code>里用他来调用<code>invokeWithTarget</code>指到我们新的target上。</p>\n<p>后者也就是我用的方法，之所以用它主要是一个方法 就ok！而我们还要兼顾静态方法和实例方法去分别hook才能防住这两种，而前者也要hook的方法更多。。。。<br>而这里只需要切<code>forwardingTargetForSelector</code>方法，静态方法返回class，动态方法返回target，当然返回之前我们要添加上不存在的方法，值得注意的是OSX上一个神奇的问题，我在判断是否系统有这个方法的时候第一次居然<code>respondsToSelector</code>返回false而<code>methodSignatureForSelector</code>有数据，第二次校验是<code>methodSignatureForSelector</code>才为空，而iOS上则没这问题第一次校验就是对的！</p>\n<h2 id=\"UI-Refresh-Not-In-Main-Thread-UI刷新不在主线程\"><a href=\"#UI-Refresh-Not-In-Main-Thread-UI刷新不在主线程\" class=\"headerlink\" title=\"UI Refresh Not In Main Thread(UI刷新不在主线程)\"></a>UI Refresh Not In Main Thread(UI刷新不在主线程)</h2><p>刷新UI不在主线程的情况这里只是针对UIView和NSView的3个方法做切面线程判断。分别是<code>setNeedsLayout</code>,<code>setNeedsDisplay</code>,<code>setNeedsDisplayInRect</code>，执行之前看是不是在主线程，不在的话就切到主线程执行，但很明显这3个方法肯定覆盖不全，而且就算覆盖全了每次都判断一下也是性能浪费，所以这里各自斟酌处理吧，这类情况暂时没想到其他好的处理方式！但好在算是有这么个可控方案！</p>\n<h2 id=\"Input-Parm-Abnormal-入参异常\"><a href=\"#Input-Parm-Abnormal-入参异常\" class=\"headerlink\" title=\"Input Parm Abnormal(入参异常)\"></a>Input Parm Abnormal(入参异常)</h2><p>入参异常这是一大类，防御的方法也相对比较通俗易懂，也是最容易查最容易出现的。</p>\n<h3 id=\"常用类型入参异常\"><a href=\"#常用类型入参异常\" class=\"headerlink\" title=\"常用类型入参异常\"></a>常用类型入参异常</h3><p>常见类包括String，Array，Dictionary，URL，FileManager等这些类空值初始化，越界取值，空赋值等，基本看crash log统计依次切面对应方法在执行前判断一下就ok。如<code>objectAtIndex</code>,<code>objectAtIndexedSubscript</code>,<code>removeObjectAtIndex</code>,<code>fileURLWithPath</code>,<code>initWithAttributedString</code>,<code>substringFromIndex</code>,<code>substringToIndex</code>等等。唯一需要注意的就是这些要切面的类名可是五花八门而且更iOS版本有很大关系，所以这个就是靠crash log积累了解有哪些坑。当然代码写的好就用不到了！<code>__NSSingleObjectArrayI</code>这个就是最近在iOS11上新发现的报错数组类，当然也可能是最近我司有人写出了这个相关的bug……<br>常见的需要注意的hook的类有以下<br><code>objc_getClass(&quot;__NSPlaceholderArray&quot;)</code><br><code>objc_getClass(&quot;__NSSingleObjectArrayI&quot;)</code><br><code>objc_getClass(&quot;__NSArrayI&quot;)</code><br><code>objc_getClass(&quot;__NSArrayM&quot;)</code><br><code>objc_getClass(&quot;__NSPlaceholderDictionary&quot;)</code><br><code>objc_getClass(&quot;__NSDictionaryI&quot;)</code><br><code>objc_getClass(&quot;__NSDictionaryM&quot;)</code><br><code>objc_getClass(&quot;NSConcreteAttributedString&quot;)</code><br><code>objc_getClass(&quot;NSConcreteMutableAttributedString&quot;)</code><br><code>objc_getClass(&quot;__NSCFConstantString&quot;)</code><br><code>objc_getClass(&quot;NSTaggedPointerString&quot;)</code><br><code>objc_getClass(&quot;__NSCFString&quot;)</code><br><code>objc_getClass(&quot;NSPlaceholderMutableString&quot;)</code><br>具体有哪些方法需要切面还是看源码吧，这部分是没什么难点的。</p>\n<p>另外我的防御里面没对NSCache做，可能以后会随便加点，因为缓存相关的模块我的建议是自己封装缓存模块或用第三方，那样对于上层使用者来说已经是安全的了！各种异常处理在缓存模块里就应该有封装。</p>\n<h3 id=\"KVC-Crash\"><a href=\"#KVC-Crash\" class=\"headerlink\" title=\"KVC Crash\"></a>KVC Crash</h3><p>KVC归根结底也算这类入参异常，一共切面3个地方就够防御了！<br><code>-(void)setValue:(id)value forKey:(NSString *)key</code>,<br><code>-(void)setValue:(id)value forKeyPath:(NSString *)keyPath</code><br>空值防御上面2个方法<br><code>-(void)setValue:(id)value forUndefinedKey:(NSString *)key</code><br>上面这个就是没有的属性做赋值操作时走的回调，如果用到我的<a href=\"https://github.com/heroims/SafeObjectProxy\" target=\"_blank\" rel=\"noopener\">SafeObjectProxy</a>要自定义各个类不同的处理是可以不开启<code>UndefinedKey</code>防御的！</p>\n<h2 id=\"Dangling-Pointer-野指针\"><a href=\"#Dangling-Pointer-野指针\" class=\"headerlink\" title=\"Dangling Pointer(野指针)\"></a>Dangling Pointer(野指针)</h2><p>这个种Crash堪称经典！就是那个最难排查的，而这里我们能做的防御事情也十分有限！<br>具体定位看看腾讯这几篇很有帮助！<br><a href=\"https://dev.qq.com/topic/59141e56ca95d00d727ba750\" target=\"_blank\" rel=\"noopener\">如何定位Obj-C野指针随机Crash(一)</a><br><a href=\"https://dev.qq.com/topic/59142d61ca95d00d727ba752\" target=\"_blank\" rel=\"noopener\">如何定位Obj-C野指针随机Crash(二)</a><br><a href=\"https://dev.qq.com/topic/5915134b75d11c055ca7fca0\" target=\"_blank\" rel=\"noopener\">如何定位Obj-C野指针随机Crash(三)</a><br>我们只能去对已知的出现野指针的类进行防御，找到crash的野指针开启Zombie Objects，加上Zombies工具，然后想办法不断提高复现率还是可以的定位到的。<br>我们的防御则是hook系统dealloc，判断需要做处理的类不走系统delloc而是走<code>objc_desctructInstance</code>释放实例内部所持有属性的引用和关联对象,保证对象最小化。紧接着就需要来波<code>isa swizzling</code>了，因为通常野指针伴随着的还有就是调用没有的方法，或者由于调用的这个时机是不正常的，各种数据的安全性都没了保证，所以dealloc后解除所有持有，再把原来的isa指向一个其他的类，而这个类能把所有的调用方法指向一个空方法这样就起到了防御的作用。</p>\n<p>能干这事的也只有NSProxy了，利用协议实现<code>methodSignatureForSelector</code>，<code>forwardInvocation</code>方法，统一打到之前处理找不到方法自动创建的类中，也就是在NSProxy内实现上面<code>Unrecognized Selector</code>的防御，这样所有对于野指针的调用就都是空了！<br>正因为上面的原因一旦开启了这个防御，真正释放的时机就还是有的，如果在野指针出现前触发了真正释放的逻辑，crash就还是会有的！<br>我在<a href=\"https://github.com/heroims/SafeObjectProxy\" target=\"_blank\" rel=\"noopener\">SafeObjectProxy</a>里只是用野指针个数控制做真正释放，回头可能会封装个block方便复杂情况的判断。</p>\n<h2 id=\"Abnormal-Matching-异常配对\"><a href=\"#Abnormal-Matching-异常配对\" class=\"headerlink\" title=\"Abnormal Matching(异常配对)\"></a>Abnormal Matching(异常配对)</h2><p>这一类算是不建议做防御的！成对的方法处理异常像KVO，NSTimer，NSNotification都算，需要注册和注销。<br>这种情况我的建议是统一封装独立模块调用统一的方法，让人不需要关心注册和注销，主要写逻辑处理。从功能实现上做严格限制，这样让人考虑的就是怎么样把一个场景融入到封装的方法中，而不是随意的写！<br>下面说下原因，由于注册和注销是分离写的 ，所以使用场景，解决问题的方法都会有着非常灵活的操作，这其实很可怕，先用KVO做一个举例顺便说一下这类防御如果真要做一般的做法是怎么做。</p>\n<h3 id=\"KVO\"><a href=\"#KVO\" class=\"headerlink\" title=\"KVO\"></a>KVO</h3><p>KVO这种crash如果要防御其实只能防御下面3种情况：<br>1.观察者或被观察者已经不存在了<br>2.取消和添加的次数不匹配<br>3.没写监听回调<code>observeValueForKeyPath:ofObject:change:context:</code></p>\n<p>而这3种情况我们来认真思考下开发的阶段是不是貌似都会第一时间就被发现！而且如果是没经验的程序员写KVO我们是不是都不敢用，会再三审查，而有经验的又不会犯上面的错。。。。<br>如果对上面的情况防御也很复杂，而且我尝试并且用过很多第三方，都在我司稍微有点复杂的项目上挂了，不仅没能防御crash还造了crash，这种成对逻辑的灵活性非常高，你没法知道系统内部人家怎么用着玩的！<br>说一下防御上面的情况首先切面add、removeObserve是一定的，还要在所有的类里再加一个对象，这个对象主要负责管理KVO下面就叫KVOController吧，让所有的观察者都成为了被观察者的一个属性，用map记录原来的观察者和keyPath等信息,这样添加或移除观察者就能判断是不是成对出现的，另外KVOController在dealloc时也可以通过map依次移除监听，而由于所有的监听回调其实都是由KVOController的<code>observeValueForKeyPath:ofObject:change:context:</code>通过<code>[originObserver observeValueForKeyPath:keyPath ofObject:object change:change context:context]</code>传递出去的自然没写监听回调的情况也可以判断了，但也是能解决那3个情况！</p>\n<p>真正KVO产生的恐怖的crash是移除时机不和观察者或被观察者销毁有关系，而是跟我们的逻辑有关，一旦没在合适时机移除导致的crash排查起来超级费劲！还有你在监听回调里处理逻辑有没有线程安全问题，这些才是我们在上线前容易漏，排查又不好排查的！</p>\n<p>安保系统则是要保护上线后能正常运作，然而就像我这里说的KVO，如果不在编码期间就做严格规范，上线后出的问题也是根本无从防御的！</p>\n<p>然后再来说说怎么限制我们的自由发挥，KVOController刚才说到的这里需要的是把它变形，把回调用block放出来，另外就是让它有单例模式和普通的实例模式，只有创建对象、关联监听和逻辑处理，一个KVOController可以是全局或属于一个对象，相当于可视化了KVO的生效周期，一目了然，这里让特殊逻辑适应我们的规范才是正确的安保思路。包括NSTimer在内也也是如此可以搞个TimerController不过封装最好也别用NSTimer精度不高，反正要封装不如直接gcd，与其要手动保持成对不如我们就把逻辑封装好，让使用者忘掉成对的概念！但在开放的今天完全可以GitHub搜一波找些封装好的自己再简单包装下，然后让团队遵循规范开发即可。。。</p>\n<p>KVO:<a href=\"https://github.com/facebook/KVOController\" target=\"_blank\" rel=\"noopener\">KVOController</a>比较推荐的一个KVO管理</p>\n<h3 id=\"NSTimer\"><a href=\"#NSTimer\" class=\"headerlink\" title=\"NSTimer\"></a>NSTimer</h3><p>NSTimer比较特殊，有些时候偏偏不该成对使用，它的成对的逻辑其实是跟自己的生命周期有关，毕竟生命周期结束时要去成对的停掉timer才能释放，另一点就是NSTimer精确度并不高！但它封装出来给人用的方法是ok的正是有单例模式和实例模式两种使用。所以我的建议当然是自己把gcd的timer封装一下，另外把target这个概念变为weak持有，这样我们自己封装的timer就可以dealloc的时候停掉timer释放了，按照系统NSTimer封装方法即可。这样至少能保证timer指定的target释放时timer能停掉不会因为跑了其他不安全的逻辑挂掉。其他可能挂掉的情况应该比较少。。。</p>\n<p>Timer:<a href=\"https://github.com/mindsnacks/MSWeakTimer\" target=\"_blank\" rel=\"noopener\">MSWeakTimer</a>比较推荐的一个计时器封装方法就是我上面讲的那种</p>\n<h3 id=\"NSNotification\"><a href=\"#NSNotification\" class=\"headerlink\" title=\"NSNotification\"></a>NSNotification</h3><p>这个虽然也是成对使用，单比上面的几个要安全一些，因为使用它有<code>[[NSNotificationCenter defaultCenter] removeObserver:self]</code>多次调用或没<code>addObserver</code>都不会挂，所以可以全局搞一下，我在<a href=\"https://github.com/heroims/SafeObjectProxy\" target=\"_blank\" rel=\"noopener\">SafeObjectProxy</a>里面就只是对所有<code>NSObject</code>对象添加了个属性做标识，然后hook一下<code>NSNotificationCenter</code>的<code>-(void)addObserver:(id)observer selector:(SEL)aSelector name:(NSNotificationName)aName object:(id)anObject</code>方法，只要observer是<code>NSObject</code>对象我就标识一下，然后切所有<code>NSObject</code>的<code>dealloc</code>只要标识了的统一执行<code>[[NSNotificationCenter defaultCenter] removeObserver:self]</code>，反正多执行了也没问题用的放心！</p>\n<p>但只要是成对的，就有另一个问题，万一真正需要注销的地方是跟逻辑有关，那你对象销毁时注销早就晚了，就像上面KVO中提到的我们做的这层crash防御其实犯错率并不高能及时发现，而及时发现不了的只能是通过编码规范或者人员分级禁用来解决。</p>\n<h2 id=\"Thread-Conflict-线程冲突\"><a href=\"#Thread-Conflict-线程冲突\" class=\"headerlink\" title=\"Thread Conflict(线程冲突)\"></a>Thread Conflict(线程冲突)</h2><p>基本无解的问题，出现以后瞬间懵逼，典型例子就是死锁，异步调用同一对象导致不安全，基本没有防御手段，排查也只能靠多加log不断复现，然后猜。。。。<br>但一般只要代码按照正常的规范写也不会那么容易遇到这问题，但线程冲突理论上只要保证UI操作都在主线程，其他都gcd不在主线程上，然后部分需要线程安全的gcd信号量做锁就可以，但不会有人这样写代码，性能和效率那么搞是都要废的，现在都恨不得你马上出活那有空那样，这类就可以完全不考虑防御的事了！</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/blogImage/3994053-6cb0e72bd8827012.jpg\" alt=\"3994053-6cb0e72bd8827012.png\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这里主要以iOS和OSX讲讲crash闪退怎么防御。<br>其中最新的OSX应用本身就有一定闪退防御，但有点类似<code>@try @catch</code>在最外层包了一下普通的越界调用空方法都会中断在操作位置不向下执行，如果没有进一步复杂逻辑不会闪退，只是影响后续的操作。</p>\n<p>而iOS则没这么好说话了，二话不说直接闪退给你看没有上面的那种机制。</p>\n<p>所以才有了设计一个安保系统的意义，来保证最大程度的健壮性，理想的状态就是不crash且能继续正常运行后面的逻辑。</p>\n<p>参考了众多网上的资料有了下面的小成果分享出来，这其实只是安保系统最后的一个环节的防御</p>\n<p><a href=\"https://github.com/heroims/SafeObjectProxy\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/SafeObjectProxy</a></p>\n<h1 id=\"安保系统设计\"><a href=\"#安保系统设计\" class=\"headerlink\" title=\"安保系统设计\"></a>安保系统设计</h1><p>这里我所认为的安保系统应该从代码和规范两个层面看，毕竟想抓到所有的crash情况是一定不可能的，现实中即使处处try catch都没法保证抓到所有crash！</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><ul>\n<li>swizzing切面</li>\n<li>方法防御选型</li>\n<li>防御成功上报</li>\n</ul>","more":"<p>程序内需要的是代码，这个模块是要没有任何侵入性的，所以切面是必须的，其次就是尽量的细化切面颗粒度保证意外情况最小化！</p>\n<p>另一点就是切面以后我们对原方法应该采取怎样的防御，这里即可以<code>try catch</code>的形式也可以进行逻辑判断形式。<br>而我的代码里用逻辑判断，更多的考量是针对的函数都偏下层且容易使用时外部恰巧又有各种循环逻辑，那样相较之下<code>try catch</code>在不间断的调用性能会有一定影响，所以暂时没用<code>try catch</code>作为防御的手段。<br>从另一角度看其实<code>try catch</code>的使用场景有些方法还是比较合适的，首先我们在防御时方法颗粒度已经很细所以抓住异常都会做对应处理不会有内存泄漏或逻辑遗漏，另外无论try还是catch内的方法也不会太多，满足了`try catch的最佳场景，只是个别方法循环利用略过高可能性能没法到达极致仅此而已。</p>\n<p>防御完了crash就是上报，我们保护了程序的同时也就意味着有地方写的有问题，由于没crash所以没crash log，这时候就需要在安保模块里加入上报机制，这时候我的做法则是放出一个协议等人去实现，安保模块就专心处理防御的事情，上报到服务端的事情交给专门处理这事的模块，我们只需要在防御成功时告知协议有这么个事情即可。剩下的就是个人看情况如需详细情况直接<code>[NSThread callStackSymbols]</code>把栈信息输出一下！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安保模块上报协议</span><br><span class=\"line\">@protocol SafeObjectReportProtocol</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\">/**</span><br><span class=\"line\">上报防御的crash log</span><br><span class=\"line\"></span><br><span class=\"line\">@param log log无法抓到Notification的遗漏注销情况</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)reportDefendCrashLog:(NSString*)log;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>而实现这个协议的只需要对<code>SafeObjectProxy</code>做个Category实现一下即可。</p>\n<p>还有就是防御的分类开启，这时候枚举就要用位运算的形式，这样才能兼容多种模式并存如下只开启Array和String的防御<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SafeObjectProxy startSafeObjectProxyWithType: SafeObjectProxyType_Array| SafeObjectProxyType_String]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><p>另一个安保模块的组成则应该是对代码规范的制定与校验，这就需要clang来做了，不是这里主要讲的，相当于多了一种<code>Build Options</code>的<code>Compiler for C/C++/Objective-C</code>属性的选择，用我们开发的Xcode校验插件，检查代码语法上的问题直接报错，这样从源头来规范化编码。</p>\n<h1 id=\"Crash分类及防御实现\"><a href=\"#Crash分类及防御实现\" class=\"headerlink\" title=\"Crash分类及防御实现\"></a>Crash分类及防御实现</h1><ul>\n<li>Unrecognized Selector(找不到方法)</li>\n<li>UI Refresh Not In Main Thread(UI刷新不在主线程)</li>\n<li>Input Parm Abnormal(入参异常)</li>\n<li>Dangling Pointer(野指针)</li>\n<li>Abnormal Matching(异常配对)</li>\n<li>Thread Conflict(线程冲突)</li>\n</ul>\n<p>想要防御crash，首先要做的就是了解都有哪些情况会产生crash,上边就是笔者总结的几种最常见的情况，不全的话希望有人留言补足，毕竟crash的防御真正有发言权开发这种模块的估计只有大公司开发app的，不然用户量不够没样本采集，没法了解坑爹的情况！</p>\n<p>而上面列的6种常见crash，真正能广域控制得了的恐怕也只有一半不到！下面就一一讲解一下,Hook切面就是主要的手段！</p>\n<h2 id=\"Unrecognized-Selector-找不到方法\"><a href=\"#Unrecognized-Selector-找不到方法\" class=\"headerlink\" title=\"Unrecognized Selector(找不到方法)\"></a>Unrecognized Selector(找不到方法)</h2><p>这个找不到方法算是比较好办的。。。也算是比较常见的好查的，另外处理ok了null对象调用的问题也会随之解决<br>可选的方法有两种<br>Hook这两个方法<br><code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code><br><code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code><br>或Hook这一个方法<br><code>-(id)forwardingTargetForSelector:(SEL)aSelector</code></p>\n<p>核心思想就是在找不到方法之前创建方法确保继续执行不挂，为了尽量不多余的创建方法，集中的把创建打到统一的地方。</p>\n<p>前者需要在<code>methodSignatureForSelector</code>执行前在新的target里创建没有的方法，然后用它调用<code>methodSignatureForSelector</code>返回，而这里的target当然要单例弄出来省的以后来回创建。然后在<code>forwardInvocation</code>里用他来调用<code>invokeWithTarget</code>指到我们新的target上。</p>\n<p>后者也就是我用的方法，之所以用它主要是一个方法 就ok！而我们还要兼顾静态方法和实例方法去分别hook才能防住这两种，而前者也要hook的方法更多。。。。<br>而这里只需要切<code>forwardingTargetForSelector</code>方法，静态方法返回class，动态方法返回target，当然返回之前我们要添加上不存在的方法，值得注意的是OSX上一个神奇的问题，我在判断是否系统有这个方法的时候第一次居然<code>respondsToSelector</code>返回false而<code>methodSignatureForSelector</code>有数据，第二次校验是<code>methodSignatureForSelector</code>才为空，而iOS上则没这问题第一次校验就是对的！</p>\n<h2 id=\"UI-Refresh-Not-In-Main-Thread-UI刷新不在主线程\"><a href=\"#UI-Refresh-Not-In-Main-Thread-UI刷新不在主线程\" class=\"headerlink\" title=\"UI Refresh Not In Main Thread(UI刷新不在主线程)\"></a>UI Refresh Not In Main Thread(UI刷新不在主线程)</h2><p>刷新UI不在主线程的情况这里只是针对UIView和NSView的3个方法做切面线程判断。分别是<code>setNeedsLayout</code>,<code>setNeedsDisplay</code>,<code>setNeedsDisplayInRect</code>，执行之前看是不是在主线程，不在的话就切到主线程执行，但很明显这3个方法肯定覆盖不全，而且就算覆盖全了每次都判断一下也是性能浪费，所以这里各自斟酌处理吧，这类情况暂时没想到其他好的处理方式！但好在算是有这么个可控方案！</p>\n<h2 id=\"Input-Parm-Abnormal-入参异常\"><a href=\"#Input-Parm-Abnormal-入参异常\" class=\"headerlink\" title=\"Input Parm Abnormal(入参异常)\"></a>Input Parm Abnormal(入参异常)</h2><p>入参异常这是一大类，防御的方法也相对比较通俗易懂，也是最容易查最容易出现的。</p>\n<h3 id=\"常用类型入参异常\"><a href=\"#常用类型入参异常\" class=\"headerlink\" title=\"常用类型入参异常\"></a>常用类型入参异常</h3><p>常见类包括String，Array，Dictionary，URL，FileManager等这些类空值初始化，越界取值，空赋值等，基本看crash log统计依次切面对应方法在执行前判断一下就ok。如<code>objectAtIndex</code>,<code>objectAtIndexedSubscript</code>,<code>removeObjectAtIndex</code>,<code>fileURLWithPath</code>,<code>initWithAttributedString</code>,<code>substringFromIndex</code>,<code>substringToIndex</code>等等。唯一需要注意的就是这些要切面的类名可是五花八门而且更iOS版本有很大关系，所以这个就是靠crash log积累了解有哪些坑。当然代码写的好就用不到了！<code>__NSSingleObjectArrayI</code>这个就是最近在iOS11上新发现的报错数组类，当然也可能是最近我司有人写出了这个相关的bug……<br>常见的需要注意的hook的类有以下<br><code>objc_getClass(&quot;__NSPlaceholderArray&quot;)</code><br><code>objc_getClass(&quot;__NSSingleObjectArrayI&quot;)</code><br><code>objc_getClass(&quot;__NSArrayI&quot;)</code><br><code>objc_getClass(&quot;__NSArrayM&quot;)</code><br><code>objc_getClass(&quot;__NSPlaceholderDictionary&quot;)</code><br><code>objc_getClass(&quot;__NSDictionaryI&quot;)</code><br><code>objc_getClass(&quot;__NSDictionaryM&quot;)</code><br><code>objc_getClass(&quot;NSConcreteAttributedString&quot;)</code><br><code>objc_getClass(&quot;NSConcreteMutableAttributedString&quot;)</code><br><code>objc_getClass(&quot;__NSCFConstantString&quot;)</code><br><code>objc_getClass(&quot;NSTaggedPointerString&quot;)</code><br><code>objc_getClass(&quot;__NSCFString&quot;)</code><br><code>objc_getClass(&quot;NSPlaceholderMutableString&quot;)</code><br>具体有哪些方法需要切面还是看源码吧，这部分是没什么难点的。</p>\n<p>另外我的防御里面没对NSCache做，可能以后会随便加点，因为缓存相关的模块我的建议是自己封装缓存模块或用第三方，那样对于上层使用者来说已经是安全的了！各种异常处理在缓存模块里就应该有封装。</p>\n<h3 id=\"KVC-Crash\"><a href=\"#KVC-Crash\" class=\"headerlink\" title=\"KVC Crash\"></a>KVC Crash</h3><p>KVC归根结底也算这类入参异常，一共切面3个地方就够防御了！<br><code>-(void)setValue:(id)value forKey:(NSString *)key</code>,<br><code>-(void)setValue:(id)value forKeyPath:(NSString *)keyPath</code><br>空值防御上面2个方法<br><code>-(void)setValue:(id)value forUndefinedKey:(NSString *)key</code><br>上面这个就是没有的属性做赋值操作时走的回调，如果用到我的<a href=\"https://github.com/heroims/SafeObjectProxy\" target=\"_blank\" rel=\"noopener\">SafeObjectProxy</a>要自定义各个类不同的处理是可以不开启<code>UndefinedKey</code>防御的！</p>\n<h2 id=\"Dangling-Pointer-野指针\"><a href=\"#Dangling-Pointer-野指针\" class=\"headerlink\" title=\"Dangling Pointer(野指针)\"></a>Dangling Pointer(野指针)</h2><p>这个种Crash堪称经典！就是那个最难排查的，而这里我们能做的防御事情也十分有限！<br>具体定位看看腾讯这几篇很有帮助！<br><a href=\"https://dev.qq.com/topic/59141e56ca95d00d727ba750\" target=\"_blank\" rel=\"noopener\">如何定位Obj-C野指针随机Crash(一)</a><br><a href=\"https://dev.qq.com/topic/59142d61ca95d00d727ba752\" target=\"_blank\" rel=\"noopener\">如何定位Obj-C野指针随机Crash(二)</a><br><a href=\"https://dev.qq.com/topic/5915134b75d11c055ca7fca0\" target=\"_blank\" rel=\"noopener\">如何定位Obj-C野指针随机Crash(三)</a><br>我们只能去对已知的出现野指针的类进行防御，找到crash的野指针开启Zombie Objects，加上Zombies工具，然后想办法不断提高复现率还是可以的定位到的。<br>我们的防御则是hook系统dealloc，判断需要做处理的类不走系统delloc而是走<code>objc_desctructInstance</code>释放实例内部所持有属性的引用和关联对象,保证对象最小化。紧接着就需要来波<code>isa swizzling</code>了，因为通常野指针伴随着的还有就是调用没有的方法，或者由于调用的这个时机是不正常的，各种数据的安全性都没了保证，所以dealloc后解除所有持有，再把原来的isa指向一个其他的类，而这个类能把所有的调用方法指向一个空方法这样就起到了防御的作用。</p>\n<p>能干这事的也只有NSProxy了，利用协议实现<code>methodSignatureForSelector</code>，<code>forwardInvocation</code>方法，统一打到之前处理找不到方法自动创建的类中，也就是在NSProxy内实现上面<code>Unrecognized Selector</code>的防御，这样所有对于野指针的调用就都是空了！<br>正因为上面的原因一旦开启了这个防御，真正释放的时机就还是有的，如果在野指针出现前触发了真正释放的逻辑，crash就还是会有的！<br>我在<a href=\"https://github.com/heroims/SafeObjectProxy\" target=\"_blank\" rel=\"noopener\">SafeObjectProxy</a>里只是用野指针个数控制做真正释放，回头可能会封装个block方便复杂情况的判断。</p>\n<h2 id=\"Abnormal-Matching-异常配对\"><a href=\"#Abnormal-Matching-异常配对\" class=\"headerlink\" title=\"Abnormal Matching(异常配对)\"></a>Abnormal Matching(异常配对)</h2><p>这一类算是不建议做防御的！成对的方法处理异常像KVO，NSTimer，NSNotification都算，需要注册和注销。<br>这种情况我的建议是统一封装独立模块调用统一的方法，让人不需要关心注册和注销，主要写逻辑处理。从功能实现上做严格限制，这样让人考虑的就是怎么样把一个场景融入到封装的方法中，而不是随意的写！<br>下面说下原因，由于注册和注销是分离写的 ，所以使用场景，解决问题的方法都会有着非常灵活的操作，这其实很可怕，先用KVO做一个举例顺便说一下这类防御如果真要做一般的做法是怎么做。</p>\n<h3 id=\"KVO\"><a href=\"#KVO\" class=\"headerlink\" title=\"KVO\"></a>KVO</h3><p>KVO这种crash如果要防御其实只能防御下面3种情况：<br>1.观察者或被观察者已经不存在了<br>2.取消和添加的次数不匹配<br>3.没写监听回调<code>observeValueForKeyPath:ofObject:change:context:</code></p>\n<p>而这3种情况我们来认真思考下开发的阶段是不是貌似都会第一时间就被发现！而且如果是没经验的程序员写KVO我们是不是都不敢用，会再三审查，而有经验的又不会犯上面的错。。。。<br>如果对上面的情况防御也很复杂，而且我尝试并且用过很多第三方，都在我司稍微有点复杂的项目上挂了，不仅没能防御crash还造了crash，这种成对逻辑的灵活性非常高，你没法知道系统内部人家怎么用着玩的！<br>说一下防御上面的情况首先切面add、removeObserve是一定的，还要在所有的类里再加一个对象，这个对象主要负责管理KVO下面就叫KVOController吧，让所有的观察者都成为了被观察者的一个属性，用map记录原来的观察者和keyPath等信息,这样添加或移除观察者就能判断是不是成对出现的，另外KVOController在dealloc时也可以通过map依次移除监听，而由于所有的监听回调其实都是由KVOController的<code>observeValueForKeyPath:ofObject:change:context:</code>通过<code>[originObserver observeValueForKeyPath:keyPath ofObject:object change:change context:context]</code>传递出去的自然没写监听回调的情况也可以判断了，但也是能解决那3个情况！</p>\n<p>真正KVO产生的恐怖的crash是移除时机不和观察者或被观察者销毁有关系，而是跟我们的逻辑有关，一旦没在合适时机移除导致的crash排查起来超级费劲！还有你在监听回调里处理逻辑有没有线程安全问题，这些才是我们在上线前容易漏，排查又不好排查的！</p>\n<p>安保系统则是要保护上线后能正常运作，然而就像我这里说的KVO，如果不在编码期间就做严格规范，上线后出的问题也是根本无从防御的！</p>\n<p>然后再来说说怎么限制我们的自由发挥，KVOController刚才说到的这里需要的是把它变形，把回调用block放出来，另外就是让它有单例模式和普通的实例模式，只有创建对象、关联监听和逻辑处理，一个KVOController可以是全局或属于一个对象，相当于可视化了KVO的生效周期，一目了然，这里让特殊逻辑适应我们的规范才是正确的安保思路。包括NSTimer在内也也是如此可以搞个TimerController不过封装最好也别用NSTimer精度不高，反正要封装不如直接gcd，与其要手动保持成对不如我们就把逻辑封装好，让使用者忘掉成对的概念！但在开放的今天完全可以GitHub搜一波找些封装好的自己再简单包装下，然后让团队遵循规范开发即可。。。</p>\n<p>KVO:<a href=\"https://github.com/facebook/KVOController\" target=\"_blank\" rel=\"noopener\">KVOController</a>比较推荐的一个KVO管理</p>\n<h3 id=\"NSTimer\"><a href=\"#NSTimer\" class=\"headerlink\" title=\"NSTimer\"></a>NSTimer</h3><p>NSTimer比较特殊，有些时候偏偏不该成对使用，它的成对的逻辑其实是跟自己的生命周期有关，毕竟生命周期结束时要去成对的停掉timer才能释放，另一点就是NSTimer精确度并不高！但它封装出来给人用的方法是ok的正是有单例模式和实例模式两种使用。所以我的建议当然是自己把gcd的timer封装一下，另外把target这个概念变为weak持有，这样我们自己封装的timer就可以dealloc的时候停掉timer释放了，按照系统NSTimer封装方法即可。这样至少能保证timer指定的target释放时timer能停掉不会因为跑了其他不安全的逻辑挂掉。其他可能挂掉的情况应该比较少。。。</p>\n<p>Timer:<a href=\"https://github.com/mindsnacks/MSWeakTimer\" target=\"_blank\" rel=\"noopener\">MSWeakTimer</a>比较推荐的一个计时器封装方法就是我上面讲的那种</p>\n<h3 id=\"NSNotification\"><a href=\"#NSNotification\" class=\"headerlink\" title=\"NSNotification\"></a>NSNotification</h3><p>这个虽然也是成对使用，单比上面的几个要安全一些，因为使用它有<code>[[NSNotificationCenter defaultCenter] removeObserver:self]</code>多次调用或没<code>addObserver</code>都不会挂，所以可以全局搞一下，我在<a href=\"https://github.com/heroims/SafeObjectProxy\" target=\"_blank\" rel=\"noopener\">SafeObjectProxy</a>里面就只是对所有<code>NSObject</code>对象添加了个属性做标识，然后hook一下<code>NSNotificationCenter</code>的<code>-(void)addObserver:(id)observer selector:(SEL)aSelector name:(NSNotificationName)aName object:(id)anObject</code>方法，只要observer是<code>NSObject</code>对象我就标识一下，然后切所有<code>NSObject</code>的<code>dealloc</code>只要标识了的统一执行<code>[[NSNotificationCenter defaultCenter] removeObserver:self]</code>，反正多执行了也没问题用的放心！</p>\n<p>但只要是成对的，就有另一个问题，万一真正需要注销的地方是跟逻辑有关，那你对象销毁时注销早就晚了，就像上面KVO中提到的我们做的这层crash防御其实犯错率并不高能及时发现，而及时发现不了的只能是通过编码规范或者人员分级禁用来解决。</p>\n<h2 id=\"Thread-Conflict-线程冲突\"><a href=\"#Thread-Conflict-线程冲突\" class=\"headerlink\" title=\"Thread Conflict(线程冲突)\"></a>Thread Conflict(线程冲突)</h2><p>基本无解的问题，出现以后瞬间懵逼，典型例子就是死锁，异步调用同一对象导致不安全，基本没有防御手段，排查也只能靠多加log不断复现，然后猜。。。。<br>但一般只要代码按照正常的规范写也不会那么容易遇到这问题，但线程冲突理论上只要保证UI操作都在主线程，其他都gcd不在主线程上，然后部分需要线程安全的gcd信号量做锁就可以，但不会有人这样写代码，性能和效率那么搞是都要废的，现在都恨不得你马上出活那有空那样，这类就可以完全不考虑防御的事了！</p>"},{"title":"CocoaPods 动/静态库封装组件化","date":"2017-08-15T15:07:49.000Z","_content":"![DingTalk20170818200900.png](/assets/blogImage/3994053-1fd000b267fa2f10.png)\n# 动/静态库混用\npods的动静态库混用，相信大多数人一想到就会头皮发麻，体会过的应该都懂，那种无助感。。。。\n### 问题\n大型项目里来个尝试性swift过渡，首先就是pod加use_frameworks!来支持pod动态库，接着就是一大片的不支持动态库pod提示error，源码上看不dependency依赖静态库pod其实是不会有问题的，如果你的pod全是源码型也不会有任何问题！\n\nps:其实我感觉这是bug。。。压根就不是啥问题\n\n正常的pod当静态库用的时候vendored_library，vendored_frameworks两个属性搞定一切。。。\n### 解决\n#### 未来\n虽说是未来，但我估计也就只有几个月的事吧，CocoaPods马上就要可以加动静态库标签了！长期关注pods源码的估计不以为然，上个月就定下来1.4.0发布，然而现在是1.3.1。。。。。\n那老哥们PR了好久https://github.com/CocoaPods/Core/pull/386\n看源码写的用法每个pod是可以定义static_framework:true属性,这样其实对简单的小项目半点作用都没有，但大型项目简直是救世的存在！承接上边的问题，对指定pod加静态库标签瞬间解决！\n<!-- more -->\n#### 现在\n接着扯一下现在的解决方案，首先我们针对的就是pod提供framework和.a的情况，核心问题其实是自己怎么建立对framework和.a的支持。\n把dependency一些静态库的pod拍平就是现在的解决方法，自己建pod，保证一层支持framework和.a,另外如果实在自己的pod里dependency的静态库pod，这个时候比较好的选择是建立subspec，直接subspec里面封装对静态库的支持。\n这里支持的时候要分为3类，先放一个友盟分享的例子：\n友盟的framework 和.a都是静态库\n``` \nPod::Spec.new do |s|\ns.name                  = 'XXXThirdPartSocial'\ns.version               = '1.0'\ns.summary               = '第三方社交模块'\ns.homepage              = 'xxx.xxx.xxx'\ns.license               = { :type => 'MIT'}\ns.author                = { 'xxx' => 'xxx@163.com' }\ns.source                = { :git => 'xxx.xxx.xxx', :tag => \"#{s.version}\" }\ns.platform              = :ios, '7.0'\ns.source_files          = ''\ns.requires_arc          = true\n#s.ios.dependency  \t'UMengUShare/Social/ReducedQQ'\n#s.ios.dependency  \t'UMengUShare/Social/ReducedWeChat'\n#s.ios.dependency  \t'UMengUShare/Social/ReducedSina'\ns.subspec 'XXXThirdPartSocialVendor' do |sss|\nsss.source_files            = ''\nsss.resource                = 'UMSocialSDK/UMSocialSDKPromptResources.bundle'\nsss.ios.vendored_frameworks = 'UMSocialSDK/UMSocialCore.framework','UMSocialSDK/UMSocialNetwork.framework'\nsss.ios.vendored_library    = 'SocialLibraries/QQ/libSocialQQ.a','SocialLibraries/Sina/libSocialSina.a','SocialLibraries/WeChat/libSocialWeChat.a'\nsss.ios.public_header_files   = 'SocialLibraries/**/*.{h}'\nsss.ios.library  = 'sqlite3'\nend\nend\n```\n![DingTalk20170817182046.png](/assets/blogImage/3994053-b83bb9df3c448f43.png)\n##### 动态库Pods封装.a\n对.a封装的时候vendored_library属性对应.a，然后看看依赖啥系统库在library，frameworks里加上，最后就是.h,如果你不想暴露的话public_header_files 里加完就不用管了，如果想要暴露给别人调用，只能source_files里再加一遍.h。\n上面例子中XXXThirdPartSocialVendor里的source_files为空，但其实.a里的东西你是可以调用的，原因是友盟在他的framework里的头文件引用了.a的头文件，间接让.a的.h公开,这问题在我看来感觉是个bug。。。\n所以不想在source_files里再写一遍的也可以建个.h引用一遍所有.a的头文件，最后source_files写你自己的.h,但这只是保证我到处可以通过引用自己的头文件实现方法调用，并不能单个引用对应.a的头文件\n##### 动态库Pods封装静态Framework\n对静态的Framework封装的时候可以说是最舒服的了，vendored_frameworks加上去基本就万事大吉了，至于依赖啥系统库加library，frameworks这件事，亲测有的时候并不需要！\n##### 动态库Pods封装动态Framework\n对于动态的Framework封装，我不说估计大家也基本能猜到吧！这就是最难受的，具体情况具体分析，不同情形下用不同套路，就算不用pod也让你很不爽，这里我拿环信客服SDK来讲！\n![DingTalk20170817183749.png](/assets/blogImage/3994053-1e7f9f22cfc89904.png)\n不用pod你要手动把这SDK拖到上边Embedded Binaries位置头文件才能引用，这个是苹果现在引用动态Framework的套路。。。好烦！\n下面讲一下pod怎么搞，如果单纯framework做pod，首先public_header_files要指定xxx.framework/Headers/{*.h}不然你头文件找不到，其次source_files里看具体编译情况决定加不加xxx.framework/Headers/{*.h}，然后就是比较普通的地方vendored_frameworks指定好完事大吉！source_files这个加了的时候还有一个前提就是Framework内引用全是\"\"不能<>，所以大部分情况source_files不加\n另一种混合使用感觉这才是最常见的\n![DingTalk20170818125422.png](/assets/blogImage/3994053-f6b8369f75849747.png)\n这时候不要指定Framework的public_header_files，写一个自己的头文件引用类，把想公开可以调用的在这里#import <xxx.framework/xxx.h>,只能间接把那些搞出去，起作用的只有vendored_frameworks\n#### 动态库Pods封装资源文件的调用\n高能预警！超级天坑降临！\n当你use_frameworks!这么一下你如果自定义的pod有关于resource或resource_bundle的话应该会发现真正的末日降临了，之前的资源全读不出来了！\n![DingTalk20170818141324.png](/assets/blogImage/3994053-79ea56d0ef0438f4.png)\n一张图片告诉你发生了什么，pod构建动态库的时候你的资源文件都在Framework里！\n现在的选择变成：要么资源文件放外面单独加，要么改代码。。。。就问你坑不坑？\n放外面单独加我这就不说了太简单，代码写的话其实也要看本身代码的结构什么样，如果像我举例中的SDK基本没救，没有统一的地方获取NSBundle,也没对bundle名称做统一，更没对UIImage设置加扩展！\n下面简单说下调用方法\n```Objective-C\nNSString * bundleName=@\"Frameworks/xxx.framework/xxx.bundle\";\n\nNSString * bundlePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent: bundleName];\n\nNSBundle *bundle= [NSBundle bundleWithPath:bundlePath];\n\n//本地化（拖入.lproj 文件夹即可）\nNSString *localizedString=[bundle  localizedStringForKey:@\"localizedStringKey\" value:@\"\" table:nil]\n\n//图片获取\nNSString *bundleImageName=[bundleName  stringByAppendingString:@\"myIcon\"];\n\nUIImage *tmpImage=[UIImage imageNamed: bundleImageName];\n\n```\n根据上面代码可以找个单例提供bundleName字段，在模块初始化的时候，先判断xxx.bundle有没有，没有的情况bundleName设置成Frameworks/xxx.framework/xxx.bundle，如果没有bundle而是单纯的资源文件，指定到framework目录里就可以随便用了。\n\n只有这样你的pod才算是支持了CocoaPods 动/静态库,也才算是真正的组件化，而且拆包看.app也会感觉优雅很多，分类明确！\n# CocoaPods 组件化常识普及\n### 模块开发\n在模块开发时可以podfile里指定本地路径，.podspec引入工程内但不要加到target里。这样改podspec方便，而且只是修改文件的话可以随时看到pod的真实效果。\n上面说的并不是最好的方式，bug fix可能还不错，真开发一大块没有的东西还是先开发最后写podspec为上策！\n![DingTalk20170818182404.png](/assets/blogImage/3994053-4cdcb0ac2b4b4918.png)\n```\n  pod 'xxxModule',:path => '../xxxModule.podspec'\n```\n### 指定Spec Repo\n在不指定Spec Repo的情况事实是如下面类似写podfile文件,的确也可以更新，但pod内如果有dependency就不行除非你在外部也pod了你dependency的库。。。如此一来你的podfile就比较臃肿看起来，当然的确是可以凑活用的！\n```\n  pod 'xxxxx',:git => 'ssh://git@git.xxxx.cn/xxxxx.git',branch:'master'\n```\n其实完全可以在podfile最上面写上\n```\nsource 'ssh://xxx.com/my/Specs.git'\n```\n你只需要把官网的Specs弄下来传到你自己的服务器上，至于怎么上传.podspec文件，可以看下面：\n```\n#设置一次我们自己的远程仓库源，类似git remote的概念，REPO_NAME仓库源名，SOURCE_URL仓库源远程地址\npod repo add REPO_NAME SOURCE_URL\n\n#上传.podspec文件到自己的本地命名好的那个仓库源\npod repo push REPO_NAME SPEC_NAME.podspec\n```\n不过没事的时候要合并一下https://github.com/CocoaPods/Specs，不然你的外部引用可就跟不上时代的潮流了！\n\n弄懂上面那些基本上已经够做好工程管理的组件化了！\n","source":"_posts/CocoaPods 动:静态库封装组件化.md","raw":"---\ntitle: CocoaPods 动/静态库封装组件化\ndate: 2017-08-15 23:07:49\ntags:\n    - 工程管理\n    - IOS\n    - 组件化\n    - CocoaPods\n    - 动/静态库\n---\n![DingTalk20170818200900.png](/assets/blogImage/3994053-1fd000b267fa2f10.png)\n# 动/静态库混用\npods的动静态库混用，相信大多数人一想到就会头皮发麻，体会过的应该都懂，那种无助感。。。。\n### 问题\n大型项目里来个尝试性swift过渡，首先就是pod加use_frameworks!来支持pod动态库，接着就是一大片的不支持动态库pod提示error，源码上看不dependency依赖静态库pod其实是不会有问题的，如果你的pod全是源码型也不会有任何问题！\n\nps:其实我感觉这是bug。。。压根就不是啥问题\n\n正常的pod当静态库用的时候vendored_library，vendored_frameworks两个属性搞定一切。。。\n### 解决\n#### 未来\n虽说是未来，但我估计也就只有几个月的事吧，CocoaPods马上就要可以加动静态库标签了！长期关注pods源码的估计不以为然，上个月就定下来1.4.0发布，然而现在是1.3.1。。。。。\n那老哥们PR了好久https://github.com/CocoaPods/Core/pull/386\n看源码写的用法每个pod是可以定义static_framework:true属性,这样其实对简单的小项目半点作用都没有，但大型项目简直是救世的存在！承接上边的问题，对指定pod加静态库标签瞬间解决！\n<!-- more -->\n#### 现在\n接着扯一下现在的解决方案，首先我们针对的就是pod提供framework和.a的情况，核心问题其实是自己怎么建立对framework和.a的支持。\n把dependency一些静态库的pod拍平就是现在的解决方法，自己建pod，保证一层支持framework和.a,另外如果实在自己的pod里dependency的静态库pod，这个时候比较好的选择是建立subspec，直接subspec里面封装对静态库的支持。\n这里支持的时候要分为3类，先放一个友盟分享的例子：\n友盟的framework 和.a都是静态库\n``` \nPod::Spec.new do |s|\ns.name                  = 'XXXThirdPartSocial'\ns.version               = '1.0'\ns.summary               = '第三方社交模块'\ns.homepage              = 'xxx.xxx.xxx'\ns.license               = { :type => 'MIT'}\ns.author                = { 'xxx' => 'xxx@163.com' }\ns.source                = { :git => 'xxx.xxx.xxx', :tag => \"#{s.version}\" }\ns.platform              = :ios, '7.0'\ns.source_files          = ''\ns.requires_arc          = true\n#s.ios.dependency  \t'UMengUShare/Social/ReducedQQ'\n#s.ios.dependency  \t'UMengUShare/Social/ReducedWeChat'\n#s.ios.dependency  \t'UMengUShare/Social/ReducedSina'\ns.subspec 'XXXThirdPartSocialVendor' do |sss|\nsss.source_files            = ''\nsss.resource                = 'UMSocialSDK/UMSocialSDKPromptResources.bundle'\nsss.ios.vendored_frameworks = 'UMSocialSDK/UMSocialCore.framework','UMSocialSDK/UMSocialNetwork.framework'\nsss.ios.vendored_library    = 'SocialLibraries/QQ/libSocialQQ.a','SocialLibraries/Sina/libSocialSina.a','SocialLibraries/WeChat/libSocialWeChat.a'\nsss.ios.public_header_files   = 'SocialLibraries/**/*.{h}'\nsss.ios.library  = 'sqlite3'\nend\nend\n```\n![DingTalk20170817182046.png](/assets/blogImage/3994053-b83bb9df3c448f43.png)\n##### 动态库Pods封装.a\n对.a封装的时候vendored_library属性对应.a，然后看看依赖啥系统库在library，frameworks里加上，最后就是.h,如果你不想暴露的话public_header_files 里加完就不用管了，如果想要暴露给别人调用，只能source_files里再加一遍.h。\n上面例子中XXXThirdPartSocialVendor里的source_files为空，但其实.a里的东西你是可以调用的，原因是友盟在他的framework里的头文件引用了.a的头文件，间接让.a的.h公开,这问题在我看来感觉是个bug。。。\n所以不想在source_files里再写一遍的也可以建个.h引用一遍所有.a的头文件，最后source_files写你自己的.h,但这只是保证我到处可以通过引用自己的头文件实现方法调用，并不能单个引用对应.a的头文件\n##### 动态库Pods封装静态Framework\n对静态的Framework封装的时候可以说是最舒服的了，vendored_frameworks加上去基本就万事大吉了，至于依赖啥系统库加library，frameworks这件事，亲测有的时候并不需要！\n##### 动态库Pods封装动态Framework\n对于动态的Framework封装，我不说估计大家也基本能猜到吧！这就是最难受的，具体情况具体分析，不同情形下用不同套路，就算不用pod也让你很不爽，这里我拿环信客服SDK来讲！\n![DingTalk20170817183749.png](/assets/blogImage/3994053-1e7f9f22cfc89904.png)\n不用pod你要手动把这SDK拖到上边Embedded Binaries位置头文件才能引用，这个是苹果现在引用动态Framework的套路。。。好烦！\n下面讲一下pod怎么搞，如果单纯framework做pod，首先public_header_files要指定xxx.framework/Headers/{*.h}不然你头文件找不到，其次source_files里看具体编译情况决定加不加xxx.framework/Headers/{*.h}，然后就是比较普通的地方vendored_frameworks指定好完事大吉！source_files这个加了的时候还有一个前提就是Framework内引用全是\"\"不能<>，所以大部分情况source_files不加\n另一种混合使用感觉这才是最常见的\n![DingTalk20170818125422.png](/assets/blogImage/3994053-f6b8369f75849747.png)\n这时候不要指定Framework的public_header_files，写一个自己的头文件引用类，把想公开可以调用的在这里#import <xxx.framework/xxx.h>,只能间接把那些搞出去，起作用的只有vendored_frameworks\n#### 动态库Pods封装资源文件的调用\n高能预警！超级天坑降临！\n当你use_frameworks!这么一下你如果自定义的pod有关于resource或resource_bundle的话应该会发现真正的末日降临了，之前的资源全读不出来了！\n![DingTalk20170818141324.png](/assets/blogImage/3994053-79ea56d0ef0438f4.png)\n一张图片告诉你发生了什么，pod构建动态库的时候你的资源文件都在Framework里！\n现在的选择变成：要么资源文件放外面单独加，要么改代码。。。。就问你坑不坑？\n放外面单独加我这就不说了太简单，代码写的话其实也要看本身代码的结构什么样，如果像我举例中的SDK基本没救，没有统一的地方获取NSBundle,也没对bundle名称做统一，更没对UIImage设置加扩展！\n下面简单说下调用方法\n```Objective-C\nNSString * bundleName=@\"Frameworks/xxx.framework/xxx.bundle\";\n\nNSString * bundlePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent: bundleName];\n\nNSBundle *bundle= [NSBundle bundleWithPath:bundlePath];\n\n//本地化（拖入.lproj 文件夹即可）\nNSString *localizedString=[bundle  localizedStringForKey:@\"localizedStringKey\" value:@\"\" table:nil]\n\n//图片获取\nNSString *bundleImageName=[bundleName  stringByAppendingString:@\"myIcon\"];\n\nUIImage *tmpImage=[UIImage imageNamed: bundleImageName];\n\n```\n根据上面代码可以找个单例提供bundleName字段，在模块初始化的时候，先判断xxx.bundle有没有，没有的情况bundleName设置成Frameworks/xxx.framework/xxx.bundle，如果没有bundle而是单纯的资源文件，指定到framework目录里就可以随便用了。\n\n只有这样你的pod才算是支持了CocoaPods 动/静态库,也才算是真正的组件化，而且拆包看.app也会感觉优雅很多，分类明确！\n# CocoaPods 组件化常识普及\n### 模块开发\n在模块开发时可以podfile里指定本地路径，.podspec引入工程内但不要加到target里。这样改podspec方便，而且只是修改文件的话可以随时看到pod的真实效果。\n上面说的并不是最好的方式，bug fix可能还不错，真开发一大块没有的东西还是先开发最后写podspec为上策！\n![DingTalk20170818182404.png](/assets/blogImage/3994053-4cdcb0ac2b4b4918.png)\n```\n  pod 'xxxModule',:path => '../xxxModule.podspec'\n```\n### 指定Spec Repo\n在不指定Spec Repo的情况事实是如下面类似写podfile文件,的确也可以更新，但pod内如果有dependency就不行除非你在外部也pod了你dependency的库。。。如此一来你的podfile就比较臃肿看起来，当然的确是可以凑活用的！\n```\n  pod 'xxxxx',:git => 'ssh://git@git.xxxx.cn/xxxxx.git',branch:'master'\n```\n其实完全可以在podfile最上面写上\n```\nsource 'ssh://xxx.com/my/Specs.git'\n```\n你只需要把官网的Specs弄下来传到你自己的服务器上，至于怎么上传.podspec文件，可以看下面：\n```\n#设置一次我们自己的远程仓库源，类似git remote的概念，REPO_NAME仓库源名，SOURCE_URL仓库源远程地址\npod repo add REPO_NAME SOURCE_URL\n\n#上传.podspec文件到自己的本地命名好的那个仓库源\npod repo push REPO_NAME SPEC_NAME.podspec\n```\n不过没事的时候要合并一下https://github.com/CocoaPods/Specs，不然你的外部引用可就跟不上时代的潮流了！\n\n弄懂上面那些基本上已经够做好工程管理的组件化了！\n","slug":"CocoaPods 动:静态库封装组件化","published":1,"updated":"2021-07-08T09:20:31.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqi0003nhs6gsexdon2","content":"<p><img src=\"/assets/blogImage/3994053-1fd000b267fa2f10.png\" alt=\"DingTalk20170818200900.png\"></p>\n<h1 id=\"动-静态库混用\"><a href=\"#动-静态库混用\" class=\"headerlink\" title=\"动/静态库混用\"></a>动/静态库混用</h1><p>pods的动静态库混用，相信大多数人一想到就会头皮发麻，体会过的应该都懂，那种无助感。。。。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>大型项目里来个尝试性swift过渡，首先就是pod加use_frameworks!来支持pod动态库，接着就是一大片的不支持动态库pod提示error，源码上看不dependency依赖静态库pod其实是不会有问题的，如果你的pod全是源码型也不会有任何问题！</p>\n<p>ps:其实我感觉这是bug。。。压根就不是啥问题</p>\n<p>正常的pod当静态库用的时候vendored_library，vendored_frameworks两个属性搞定一切。。。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><h4 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h4><p>虽说是未来，但我估计也就只有几个月的事吧，CocoaPods马上就要可以加动静态库标签了！长期关注pods源码的估计不以为然，上个月就定下来1.4.0发布，然而现在是1.3.1。。。。。<br>那老哥们PR了好久<a href=\"https://github.com/CocoaPods/Core/pull/386\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Core/pull/386</a><br>看源码写的用法每个pod是可以定义static_framework:true属性,这样其实对简单的小项目半点作用都没有，但大型项目简直是救世的存在！承接上边的问题，对指定pod加静态库标签瞬间解决！<br><a id=\"more\"></a></p>\n<h4 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h4><p>接着扯一下现在的解决方案，首先我们针对的就是pod提供framework和.a的情况，核心问题其实是自己怎么建立对framework和.a的支持。<br>把dependency一些静态库的pod拍平就是现在的解决方法，自己建pod，保证一层支持framework和.a,另外如果实在自己的pod里dependency的静态库pod，这个时候比较好的选择是建立subspec，直接subspec里面封装对静态库的支持。<br>这里支持的时候要分为3类，先放一个友盟分享的例子：<br>友盟的framework 和.a都是静态库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new do |s|</span><br><span class=\"line\">s.name                  = &apos;XXXThirdPartSocial&apos;</span><br><span class=\"line\">s.version               = &apos;1.0&apos;</span><br><span class=\"line\">s.summary               = &apos;第三方社交模块&apos;</span><br><span class=\"line\">s.homepage              = &apos;xxx.xxx.xxx&apos;</span><br><span class=\"line\">s.license               = &#123; :type =&gt; &apos;MIT&apos;&#125;</span><br><span class=\"line\">s.author                = &#123; &apos;xxx&apos; =&gt; &apos;xxx@163.com&apos; &#125;</span><br><span class=\"line\">s.source                = &#123; :git =&gt; &apos;xxx.xxx.xxx&apos;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class=\"line\">s.platform              = :ios, &apos;7.0&apos;</span><br><span class=\"line\">s.source_files          = &apos;&apos;</span><br><span class=\"line\">s.requires_arc          = true</span><br><span class=\"line\">#s.ios.dependency  \t&apos;UMengUShare/Social/ReducedQQ&apos;</span><br><span class=\"line\">#s.ios.dependency  \t&apos;UMengUShare/Social/ReducedWeChat&apos;</span><br><span class=\"line\">#s.ios.dependency  \t&apos;UMengUShare/Social/ReducedSina&apos;</span><br><span class=\"line\">s.subspec &apos;XXXThirdPartSocialVendor&apos; do |sss|</span><br><span class=\"line\">sss.source_files            = &apos;&apos;</span><br><span class=\"line\">sss.resource                = &apos;UMSocialSDK/UMSocialSDKPromptResources.bundle&apos;</span><br><span class=\"line\">sss.ios.vendored_frameworks = &apos;UMSocialSDK/UMSocialCore.framework&apos;,&apos;UMSocialSDK/UMSocialNetwork.framework&apos;</span><br><span class=\"line\">sss.ios.vendored_library    = &apos;SocialLibraries/QQ/libSocialQQ.a&apos;,&apos;SocialLibraries/Sina/libSocialSina.a&apos;,&apos;SocialLibraries/WeChat/libSocialWeChat.a&apos;</span><br><span class=\"line\">sss.ios.public_header_files   = &apos;SocialLibraries/**/*.&#123;h&#125;&apos;</span><br><span class=\"line\">sss.ios.library  = &apos;sqlite3&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/assets/blogImage/3994053-b83bb9df3c448f43.png\" alt=\"DingTalk20170817182046.png\"></p>\n<h5 id=\"动态库Pods封装-a\"><a href=\"#动态库Pods封装-a\" class=\"headerlink\" title=\"动态库Pods封装.a\"></a>动态库Pods封装.a</h5><p>对.a封装的时候vendored_library属性对应.a，然后看看依赖啥系统库在library，frameworks里加上，最后就是.h,如果你不想暴露的话public_header_files 里加完就不用管了，如果想要暴露给别人调用，只能source_files里再加一遍.h。<br>上面例子中XXXThirdPartSocialVendor里的source_files为空，但其实.a里的东西你是可以调用的，原因是友盟在他的framework里的头文件引用了.a的头文件，间接让.a的.h公开,这问题在我看来感觉是个bug。。。<br>所以不想在source_files里再写一遍的也可以建个.h引用一遍所有.a的头文件，最后source_files写你自己的.h,但这只是保证我到处可以通过引用自己的头文件实现方法调用，并不能单个引用对应.a的头文件</p>\n<h5 id=\"动态库Pods封装静态Framework\"><a href=\"#动态库Pods封装静态Framework\" class=\"headerlink\" title=\"动态库Pods封装静态Framework\"></a>动态库Pods封装静态Framework</h5><p>对静态的Framework封装的时候可以说是最舒服的了，vendored_frameworks加上去基本就万事大吉了，至于依赖啥系统库加library，frameworks这件事，亲测有的时候并不需要！</p>\n<h5 id=\"动态库Pods封装动态Framework\"><a href=\"#动态库Pods封装动态Framework\" class=\"headerlink\" title=\"动态库Pods封装动态Framework\"></a>动态库Pods封装动态Framework</h5><p>对于动态的Framework封装，我不说估计大家也基本能猜到吧！这就是最难受的，具体情况具体分析，不同情形下用不同套路，就算不用pod也让你很不爽，这里我拿环信客服SDK来讲！<br><img src=\"/assets/blogImage/3994053-1e7f9f22cfc89904.png\" alt=\"DingTalk20170817183749.png\"><br>不用pod你要手动把这SDK拖到上边Embedded Binaries位置头文件才能引用，这个是苹果现在引用动态Framework的套路。。。好烦！<br>下面讲一下pod怎么搞，如果单纯framework做pod，首先public_header_files要指定xxx.framework/Headers/{<em>.h}不然你头文件找不到，其次source_files里看具体编译情况决定加不加xxx.framework/Headers/{</em>.h}，然后就是比较普通的地方vendored_frameworks指定好完事大吉！source_files这个加了的时候还有一个前提就是Framework内引用全是””不能&lt;&gt;，所以大部分情况source_files不加<br>另一种混合使用感觉这才是最常见的<br><img src=\"/assets/blogImage/3994053-f6b8369f75849747.png\" alt=\"DingTalk20170818125422.png\"><br>这时候不要指定Framework的public_header_files，写一个自己的头文件引用类，把想公开可以调用的在这里#import &lt;xxx.framework/xxx.h&gt;,只能间接把那些搞出去，起作用的只有vendored_frameworks</p>\n<h4 id=\"动态库Pods封装资源文件的调用\"><a href=\"#动态库Pods封装资源文件的调用\" class=\"headerlink\" title=\"动态库Pods封装资源文件的调用\"></a>动态库Pods封装资源文件的调用</h4><p>高能预警！超级天坑降临！<br>当你use_frameworks!这么一下你如果自定义的pod有关于resource或resource_bundle的话应该会发现真正的末日降临了，之前的资源全读不出来了！<br><img src=\"/assets/blogImage/3994053-79ea56d0ef0438f4.png\" alt=\"DingTalk20170818141324.png\"><br>一张图片告诉你发生了什么，pod构建动态库的时候你的资源文件都在Framework里！<br>现在的选择变成：要么资源文件放外面单独加，要么改代码。。。。就问你坑不坑？<br>放外面单独加我这就不说了太简单，代码写的话其实也要看本身代码的结构什么样，如果像我举例中的SDK基本没救，没有统一的地方获取NSBundle,也没对bundle名称做统一，更没对UIImage设置加扩展！<br>下面简单说下调用方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * bundleName=@&quot;Frameworks/xxx.framework/xxx.bundle&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">NSString * bundlePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent: bundleName];</span><br><span class=\"line\"></span><br><span class=\"line\">NSBundle *bundle= [NSBundle bundleWithPath:bundlePath];</span><br><span class=\"line\"></span><br><span class=\"line\">//本地化（拖入.lproj 文件夹即可）</span><br><span class=\"line\">NSString *localizedString=[bundle  localizedStringForKey:@&quot;localizedStringKey&quot; value:@&quot;&quot; table:nil]</span><br><span class=\"line\"></span><br><span class=\"line\">//图片获取</span><br><span class=\"line\">NSString *bundleImageName=[bundleName  stringByAppendingString:@&quot;myIcon&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">UIImage *tmpImage=[UIImage imageNamed: bundleImageName];</span><br></pre></td></tr></table></figure></p>\n<p>根据上面代码可以找个单例提供bundleName字段，在模块初始化的时候，先判断xxx.bundle有没有，没有的情况bundleName设置成Frameworks/xxx.framework/xxx.bundle，如果没有bundle而是单纯的资源文件，指定到framework目录里就可以随便用了。</p>\n<p>只有这样你的pod才算是支持了CocoaPods 动/静态库,也才算是真正的组件化，而且拆包看.app也会感觉优雅很多，分类明确！</p>\n<h1 id=\"CocoaPods-组件化常识普及\"><a href=\"#CocoaPods-组件化常识普及\" class=\"headerlink\" title=\"CocoaPods 组件化常识普及\"></a>CocoaPods 组件化常识普及</h1><h3 id=\"模块开发\"><a href=\"#模块开发\" class=\"headerlink\" title=\"模块开发\"></a>模块开发</h3><p>在模块开发时可以podfile里指定本地路径，.podspec引入工程内但不要加到target里。这样改podspec方便，而且只是修改文件的话可以随时看到pod的真实效果。<br>上面说的并不是最好的方式，bug fix可能还不错，真开发一大块没有的东西还是先开发最后写podspec为上策！<br><img src=\"/assets/blogImage/3994053-4cdcb0ac2b4b4918.png\" alt=\"DingTalk20170818182404.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;xxxModule&apos;,:path =&gt; &apos;../xxxModule.podspec&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"指定Spec-Repo\"><a href=\"#指定Spec-Repo\" class=\"headerlink\" title=\"指定Spec Repo\"></a>指定Spec Repo</h3><p>在不指定Spec Repo的情况事实是如下面类似写podfile文件,的确也可以更新，但pod内如果有dependency就不行除非你在外部也pod了你dependency的库。。。如此一来你的podfile就比较臃肿看起来，当然的确是可以凑活用的！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;xxxxx&apos;,:git =&gt; &apos;ssh://git@git.xxxx.cn/xxxxx.git&apos;,branch:&apos;master&apos;</span><br></pre></td></tr></table></figure></p>\n<p>其实完全可以在podfile最上面写上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;ssh://xxx.com/my/Specs.git&apos;</span><br></pre></td></tr></table></figure></p>\n<p>你只需要把官网的Specs弄下来传到你自己的服务器上，至于怎么上传.podspec文件，可以看下面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#设置一次我们自己的远程仓库源，类似git remote的概念，REPO_NAME仓库源名，SOURCE_URL仓库源远程地址</span><br><span class=\"line\">pod repo add REPO_NAME SOURCE_URL</span><br><span class=\"line\"></span><br><span class=\"line\">#上传.podspec文件到自己的本地命名好的那个仓库源</span><br><span class=\"line\">pod repo push REPO_NAME SPEC_NAME.podspec</span><br></pre></td></tr></table></figure></p>\n<p>不过没事的时候要合并一下<a href=\"https://github.com/CocoaPods/Specs，不然你的外部引用可就跟不上时代的潮流了！\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs，不然你的外部引用可就跟不上时代的潮流了！</a></p>\n<p>弄懂上面那些基本上已经够做好工程管理的组件化了！</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/blogImage/3994053-1fd000b267fa2f10.png\" alt=\"DingTalk20170818200900.png\"></p>\n<h1 id=\"动-静态库混用\"><a href=\"#动-静态库混用\" class=\"headerlink\" title=\"动/静态库混用\"></a>动/静态库混用</h1><p>pods的动静态库混用，相信大多数人一想到就会头皮发麻，体会过的应该都懂，那种无助感。。。。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>大型项目里来个尝试性swift过渡，首先就是pod加use_frameworks!来支持pod动态库，接着就是一大片的不支持动态库pod提示error，源码上看不dependency依赖静态库pod其实是不会有问题的，如果你的pod全是源码型也不会有任何问题！</p>\n<p>ps:其实我感觉这是bug。。。压根就不是啥问题</p>\n<p>正常的pod当静态库用的时候vendored_library，vendored_frameworks两个属性搞定一切。。。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><h4 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h4><p>虽说是未来，但我估计也就只有几个月的事吧，CocoaPods马上就要可以加动静态库标签了！长期关注pods源码的估计不以为然，上个月就定下来1.4.0发布，然而现在是1.3.1。。。。。<br>那老哥们PR了好久<a href=\"https://github.com/CocoaPods/Core/pull/386\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Core/pull/386</a><br>看源码写的用法每个pod是可以定义static_framework:true属性,这样其实对简单的小项目半点作用都没有，但大型项目简直是救世的存在！承接上边的问题，对指定pod加静态库标签瞬间解决！<br>","more":"</p>\n<h4 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h4><p>接着扯一下现在的解决方案，首先我们针对的就是pod提供framework和.a的情况，核心问题其实是自己怎么建立对framework和.a的支持。<br>把dependency一些静态库的pod拍平就是现在的解决方法，自己建pod，保证一层支持framework和.a,另外如果实在自己的pod里dependency的静态库pod，这个时候比较好的选择是建立subspec，直接subspec里面封装对静态库的支持。<br>这里支持的时候要分为3类，先放一个友盟分享的例子：<br>友盟的framework 和.a都是静态库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new do |s|</span><br><span class=\"line\">s.name                  = &apos;XXXThirdPartSocial&apos;</span><br><span class=\"line\">s.version               = &apos;1.0&apos;</span><br><span class=\"line\">s.summary               = &apos;第三方社交模块&apos;</span><br><span class=\"line\">s.homepage              = &apos;xxx.xxx.xxx&apos;</span><br><span class=\"line\">s.license               = &#123; :type =&gt; &apos;MIT&apos;&#125;</span><br><span class=\"line\">s.author                = &#123; &apos;xxx&apos; =&gt; &apos;xxx@163.com&apos; &#125;</span><br><span class=\"line\">s.source                = &#123; :git =&gt; &apos;xxx.xxx.xxx&apos;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class=\"line\">s.platform              = :ios, &apos;7.0&apos;</span><br><span class=\"line\">s.source_files          = &apos;&apos;</span><br><span class=\"line\">s.requires_arc          = true</span><br><span class=\"line\">#s.ios.dependency  \t&apos;UMengUShare/Social/ReducedQQ&apos;</span><br><span class=\"line\">#s.ios.dependency  \t&apos;UMengUShare/Social/ReducedWeChat&apos;</span><br><span class=\"line\">#s.ios.dependency  \t&apos;UMengUShare/Social/ReducedSina&apos;</span><br><span class=\"line\">s.subspec &apos;XXXThirdPartSocialVendor&apos; do |sss|</span><br><span class=\"line\">sss.source_files            = &apos;&apos;</span><br><span class=\"line\">sss.resource                = &apos;UMSocialSDK/UMSocialSDKPromptResources.bundle&apos;</span><br><span class=\"line\">sss.ios.vendored_frameworks = &apos;UMSocialSDK/UMSocialCore.framework&apos;,&apos;UMSocialSDK/UMSocialNetwork.framework&apos;</span><br><span class=\"line\">sss.ios.vendored_library    = &apos;SocialLibraries/QQ/libSocialQQ.a&apos;,&apos;SocialLibraries/Sina/libSocialSina.a&apos;,&apos;SocialLibraries/WeChat/libSocialWeChat.a&apos;</span><br><span class=\"line\">sss.ios.public_header_files   = &apos;SocialLibraries/**/*.&#123;h&#125;&apos;</span><br><span class=\"line\">sss.ios.library  = &apos;sqlite3&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/assets/blogImage/3994053-b83bb9df3c448f43.png\" alt=\"DingTalk20170817182046.png\"></p>\n<h5 id=\"动态库Pods封装-a\"><a href=\"#动态库Pods封装-a\" class=\"headerlink\" title=\"动态库Pods封装.a\"></a>动态库Pods封装.a</h5><p>对.a封装的时候vendored_library属性对应.a，然后看看依赖啥系统库在library，frameworks里加上，最后就是.h,如果你不想暴露的话public_header_files 里加完就不用管了，如果想要暴露给别人调用，只能source_files里再加一遍.h。<br>上面例子中XXXThirdPartSocialVendor里的source_files为空，但其实.a里的东西你是可以调用的，原因是友盟在他的framework里的头文件引用了.a的头文件，间接让.a的.h公开,这问题在我看来感觉是个bug。。。<br>所以不想在source_files里再写一遍的也可以建个.h引用一遍所有.a的头文件，最后source_files写你自己的.h,但这只是保证我到处可以通过引用自己的头文件实现方法调用，并不能单个引用对应.a的头文件</p>\n<h5 id=\"动态库Pods封装静态Framework\"><a href=\"#动态库Pods封装静态Framework\" class=\"headerlink\" title=\"动态库Pods封装静态Framework\"></a>动态库Pods封装静态Framework</h5><p>对静态的Framework封装的时候可以说是最舒服的了，vendored_frameworks加上去基本就万事大吉了，至于依赖啥系统库加library，frameworks这件事，亲测有的时候并不需要！</p>\n<h5 id=\"动态库Pods封装动态Framework\"><a href=\"#动态库Pods封装动态Framework\" class=\"headerlink\" title=\"动态库Pods封装动态Framework\"></a>动态库Pods封装动态Framework</h5><p>对于动态的Framework封装，我不说估计大家也基本能猜到吧！这就是最难受的，具体情况具体分析，不同情形下用不同套路，就算不用pod也让你很不爽，这里我拿环信客服SDK来讲！<br><img src=\"/assets/blogImage/3994053-1e7f9f22cfc89904.png\" alt=\"DingTalk20170817183749.png\"><br>不用pod你要手动把这SDK拖到上边Embedded Binaries位置头文件才能引用，这个是苹果现在引用动态Framework的套路。。。好烦！<br>下面讲一下pod怎么搞，如果单纯framework做pod，首先public_header_files要指定xxx.framework/Headers/{<em>.h}不然你头文件找不到，其次source_files里看具体编译情况决定加不加xxx.framework/Headers/{</em>.h}，然后就是比较普通的地方vendored_frameworks指定好完事大吉！source_files这个加了的时候还有一个前提就是Framework内引用全是””不能&lt;&gt;，所以大部分情况source_files不加<br>另一种混合使用感觉这才是最常见的<br><img src=\"/assets/blogImage/3994053-f6b8369f75849747.png\" alt=\"DingTalk20170818125422.png\"><br>这时候不要指定Framework的public_header_files，写一个自己的头文件引用类，把想公开可以调用的在这里#import &lt;xxx.framework/xxx.h&gt;,只能间接把那些搞出去，起作用的只有vendored_frameworks</p>\n<h4 id=\"动态库Pods封装资源文件的调用\"><a href=\"#动态库Pods封装资源文件的调用\" class=\"headerlink\" title=\"动态库Pods封装资源文件的调用\"></a>动态库Pods封装资源文件的调用</h4><p>高能预警！超级天坑降临！<br>当你use_frameworks!这么一下你如果自定义的pod有关于resource或resource_bundle的话应该会发现真正的末日降临了，之前的资源全读不出来了！<br><img src=\"/assets/blogImage/3994053-79ea56d0ef0438f4.png\" alt=\"DingTalk20170818141324.png\"><br>一张图片告诉你发生了什么，pod构建动态库的时候你的资源文件都在Framework里！<br>现在的选择变成：要么资源文件放外面单独加，要么改代码。。。。就问你坑不坑？<br>放外面单独加我这就不说了太简单，代码写的话其实也要看本身代码的结构什么样，如果像我举例中的SDK基本没救，没有统一的地方获取NSBundle,也没对bundle名称做统一，更没对UIImage设置加扩展！<br>下面简单说下调用方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * bundleName=@&quot;Frameworks/xxx.framework/xxx.bundle&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">NSString * bundlePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent: bundleName];</span><br><span class=\"line\"></span><br><span class=\"line\">NSBundle *bundle= [NSBundle bundleWithPath:bundlePath];</span><br><span class=\"line\"></span><br><span class=\"line\">//本地化（拖入.lproj 文件夹即可）</span><br><span class=\"line\">NSString *localizedString=[bundle  localizedStringForKey:@&quot;localizedStringKey&quot; value:@&quot;&quot; table:nil]</span><br><span class=\"line\"></span><br><span class=\"line\">//图片获取</span><br><span class=\"line\">NSString *bundleImageName=[bundleName  stringByAppendingString:@&quot;myIcon&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">UIImage *tmpImage=[UIImage imageNamed: bundleImageName];</span><br></pre></td></tr></table></figure></p>\n<p>根据上面代码可以找个单例提供bundleName字段，在模块初始化的时候，先判断xxx.bundle有没有，没有的情况bundleName设置成Frameworks/xxx.framework/xxx.bundle，如果没有bundle而是单纯的资源文件，指定到framework目录里就可以随便用了。</p>\n<p>只有这样你的pod才算是支持了CocoaPods 动/静态库,也才算是真正的组件化，而且拆包看.app也会感觉优雅很多，分类明确！</p>\n<h1 id=\"CocoaPods-组件化常识普及\"><a href=\"#CocoaPods-组件化常识普及\" class=\"headerlink\" title=\"CocoaPods 组件化常识普及\"></a>CocoaPods 组件化常识普及</h1><h3 id=\"模块开发\"><a href=\"#模块开发\" class=\"headerlink\" title=\"模块开发\"></a>模块开发</h3><p>在模块开发时可以podfile里指定本地路径，.podspec引入工程内但不要加到target里。这样改podspec方便，而且只是修改文件的话可以随时看到pod的真实效果。<br>上面说的并不是最好的方式，bug fix可能还不错，真开发一大块没有的东西还是先开发最后写podspec为上策！<br><img src=\"/assets/blogImage/3994053-4cdcb0ac2b4b4918.png\" alt=\"DingTalk20170818182404.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;xxxModule&apos;,:path =&gt; &apos;../xxxModule.podspec&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"指定Spec-Repo\"><a href=\"#指定Spec-Repo\" class=\"headerlink\" title=\"指定Spec Repo\"></a>指定Spec Repo</h3><p>在不指定Spec Repo的情况事实是如下面类似写podfile文件,的确也可以更新，但pod内如果有dependency就不行除非你在外部也pod了你dependency的库。。。如此一来你的podfile就比较臃肿看起来，当然的确是可以凑活用的！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &apos;xxxxx&apos;,:git =&gt; &apos;ssh://git@git.xxxx.cn/xxxxx.git&apos;,branch:&apos;master&apos;</span><br></pre></td></tr></table></figure></p>\n<p>其实完全可以在podfile最上面写上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;ssh://xxx.com/my/Specs.git&apos;</span><br></pre></td></tr></table></figure></p>\n<p>你只需要把官网的Specs弄下来传到你自己的服务器上，至于怎么上传.podspec文件，可以看下面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#设置一次我们自己的远程仓库源，类似git remote的概念，REPO_NAME仓库源名，SOURCE_URL仓库源远程地址</span><br><span class=\"line\">pod repo add REPO_NAME SOURCE_URL</span><br><span class=\"line\"></span><br><span class=\"line\">#上传.podspec文件到自己的本地命名好的那个仓库源</span><br><span class=\"line\">pod repo push REPO_NAME SPEC_NAME.podspec</span><br></pre></td></tr></table></figure></p>\n<p>不过没事的时候要合并一下<a href=\"https://github.com/CocoaPods/Specs，不然你的外部引用可就跟不上时代的潮流了！\" target=\"_blank\" rel=\"noopener\">https://github.com/CocoaPods/Specs，不然你的外部引用可就跟不上时代的潮流了！</a></p>\n<p>弄懂上面那些基本上已经够做好工程管理的组件化了！</p>"},{"title":"Http中的Content-Type","date":"2013-02-25T08:16:05.000Z","_content":"\nHTTP协议（RFC2616）采用了请求/响应模型。客户端向服务器发送一个请求，请求头包含请求的方法、URI、协议版本、以及包含请求修饰符、客户 信息和内容的类似于MIME的消息结构。服务器以一个状态行作为响应，相应的内容包括消息协议的版本，成功或者错误编码加上包含服务器信息、实体元信息以 及可能的实体内容。\n\n通常HTTP消息由一个起始行，一个或者多个头域，一个只是头域结束的空行和可选的消息体组成。HTTP的头域包括通用头，请求头，响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域 值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。\n\n请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content- Base、Content-Encoding、Content-Language、 Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、 Etag、Expires、Last-Modified、extension-header。\nContent-Type是返回消息中非常重要的内容，表示后面的文档属于什么MIME类型。Content-Type: [type]/[subtype]; parameter。例如最常见的就是text/html，它的意思是说返回的内容是文本类型，这个文本又是HTML格式的。原则上浏览器会根据Content-Type来决定如何显示返回的消息体内容。\n\ntype有下面的形式。\n\nText：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；\n\nMultipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；\n\nApplication：用于传输应用程序数据或者二进制数据；\n\nMessage：用于包装一个E-mail消息；\n\nImage：用于传输静态图片数据；\n\nAudio：用于传输音频或者音声数据；\n\nVideo：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。\n\nsubtype用于指定type的详细形式。content-type/subtype配对的集合和与此相关的参数，将随着时间而增长。为了确保这些值在一个有序而且公开的状态下开发，MIME使用Internet Assigned Numbers Authority (IANA)作为中心的注册机制来管理这些值。\n\nparameter可以用来指定附加的信息，更多情况下是用于指定text/plain和text/htm等的文字编码方式的charset参数。MIME根据type制定了默认的subtype，当客户端不能确定消息的subtype的情况下，消息被看作默认的subtype进行处理。Text默认是text/plain，Application默认是application/octet-stream而Multipart默认情况下被看作multipart/mixed。Json常用application/json。\n\napplication/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式。\n\nmultipart/form-data： 数据被编码为一条消息，页上的每个控件对应消息中的一个部分\n\ntext/plain： 数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符。postman软件里标的是RAW。\n\n\nMIME定义在RFC-2046 MIME Part 2: Media Types 。\n\n常用类型：\n\nMime Types By File Extension\n\n|Extension|Type/sub-type|\n|:--:|:--:|\n||application/octet-stream|\n|323|text/h323|\n|acx|application/internet-property-stream|\n|ai|application/postscript|\n|aif|audio/x-aiff|\n|aifc|audio/x-aiff|\n|aiff|audio/x-aiff|\n|asf|video/x-ms-asf|\n|asr|video/x-ms-asf|\n|asx|video/x-ms-asf|\n|au|audio/basic|\n|avi|video/x-msvideo|\n|axs|application/olescript|\n|bas|text/plain|\n|bcpio|application/x-bcpio|\n|bin|application/octet-stream|\n|bmp|image/bmp|\n|c|text/plain|\n|cat|application/vnd.ms-pkiseccat|\n|cdf|application/x-cdf|\n|cer|application/x-x509-ca-cert|\n|class|application/octet-stream|\n|clp|application/x-msclip|\n|cmx|image/x-cmx|\n|cod|image/cis-cod|\n|cpio|application/x-cpio|\n|crd|application/x-mscardfile|\n|crl|application/pkix-crl|\n|crt|application/x-x509-ca-cert|\n|csh|application/x-csh|\n|css|text/css|\n|dcr|application/x-director|\n|der|application/x-x509-ca-cert|\n|dir|application/x-director|\n|dll|application/x-msdownload|\n|dms|application/octet-stream|\n|doc|application/msword|\n|dot|application/msword|\n|dvi|application/x-dvi|\n|dxr|application/x-director|\n|eps|application/postscript|\n|etx|text/x-setext|\n|evy|application/envoy|\n|exe|application/octet-stream|\n|fif|application/fractals|\n|flr|x-world/x-vrml|\n|gif|image/gif|\n|gtar|application/x-gtar|\n|gz|application/x-gzip|\n|h|text/plain|\n|hdf|application/x-hdf|\n|hlp|application/winhlp|\n|hqx|application/mac-binhex40|\n|hta|application/hta|\n|htc|text/x-component|\n|htm|text/html|\n|html|text/html|\n|htt|text/webviewhtml|\n|ico|image/x-icon|\n|ief|image/ief|\n|iii|application/x-iphone|\n|ins|application/x-internet-signup|\n|isp|application/x-internet-signup|\n|jfif|image/pipeg|\n|jpe|image/jpeg|\n|jpeg|image/jpeg|\n|jpg|image/jpeg|\n|js|application/x-javascript|\n|latex|application/x-latex|\n|lha|application/octet-stream|\n|lsf|video/x-la-asf|\n|lsx|video/x-la-asf|\n|lzh|application/octet-stream|\n|m13|application/x-msmediaview|\n|m14|application/x-msmediaview|\n|m3u|audio/x-mpegurl|\n|man|application/x-troff-man|\n|mdb|application/x-msaccess|\n|me|application/x-troff-me|\n|mht|message/rfc822|\n|mhtml|message/rfc822|\n|mid|audio/mid|\n|mny|application/x-msmoney|\n|mov|video/quicktime|\n|movie|video/x-sgi-movie|\n|mp2|video/mpeg|\n|mp3|audio/mpeg|\n|mpa|video/mpeg|\n|mpe|video/mpeg|\n|mpeg|video/mpeg|\n|mpg|video/mpeg|\n|mpp|application/vnd.ms-project|\n|mpv2|video/mpeg|\n|ms|application/x-troff-ms|\n|mvb|application/x-msmediaview|\n|nws|message/rfc822|\n|oda|application/oda|\n|p10|application/pkcs10|\n|p12|application/x-pkcs12|\n|p7b|application/x-pkcs7-certificates|\n|p7c|application/x-pkcs7-mime|\n|p7m|application/x-pkcs7-mime|\n|p7r|application/x-pkcs7-certreqresp|\n|p7s|application/x-pkcs7-signature|\n|pbm|image/x-portable-bitmap|\n|pdf|application/pdf|\n|pfx|application/x-pkcs12|\n|pgm|image/x-portable-graymap|\n|pko|application/ynd.ms-pkipko|\n|pma|application/x-perfmon|\n|pmc|application/x-perfmon|\n|pml|application/x-perfmon|\n|pmr|application/x-perfmon|\n|pmw|application/x-perfmon|\n|pnm|image/x-portable-anymap|\n|pot|application/vnd.ms-powerpoint|\n|ppm|image/x-portable-pixmap|\n|pps|application/vnd.ms-powerpoint|\n|ppt|application/vnd.ms-powerpoint|\n|prf|application/pics-rules|\n|ps|application/postscript|\n|pub|application/x-mspublisher|\n|qt|video/quicktime|\n|ra|audio/x-pn-realaudio|\n|ram|audio/x-pn-realaudio|\n|ras|image/x-cmu-raster|\n|rgb|image/x-rgb|\n|rmi|audio/mid|\n|roff|application/x-troff|\n|rtf|application/rtf|\n|rtx|text/richtext|\n|scd|application/x-msschedule|\n|sct|text/scriptlet|\n|setpay|application/set-payment-initiation|\n|setreg|application/set-registration-initiation|\n|sh|application/x-sh|\n|shar|application/x-shar|\n|sit|application/x-stuffit|\n|snd|audio/basic|\n|spc|application/x-pkcs7-certificates|\n|spl|application/futuresplash|\n|src|application/x-wais-source|\n|sst|application/vnd.ms-pkicertstore|\n|stl|application/vnd.ms-pkistl|\n|stm|text/html|\n|svg|image/svg+xml|\n|sv4cpio|application/x-sv4cpio|\n|sv4crc|application/x-sv4crc|\n|swf|application/x-shockwave-flash|\n|tapplication/x-troff|\n|tar|application/x-tar|\n|tcl|application/x-tcl|\n|tex|application/x-tex|\n|texi|application/x-texinfo|\n|texinfo|application/x-texinfo|\n|tgz|application/x-compressed|\n|tif|image/tiff|\n|tiff|image/tiff|\n|tr|application/x-troff|\n|trm|application/x-msterminal|\n|tsv|text/tab-separated-values|\n|txt|text/plain|\n|uls|text/iuls|\n|ustar|application/x-ustar|\n|vcf|text/x-vcard|\n|vrml|x-world/x-vrml|\n|wav|audio/x-wav|\n|wcm|application/vnd.ms-works|\n|wdb|application/vnd.ms-works|\n|wks|application/vnd.ms-works|\n|wmf|application/x-msmetafile|\n|wps|application/vnd.ms-works|\n|wri|application/x-mswrite|\n|wrl|x-world/x-vrml|\n|wrz|x-world/x-vrml|\n|xaf|x-world/x-vrml|\n|xbm|image/x-xbitmap|\n|xla|application/vnd.ms-excel|\n|xlc|application/vnd.ms-excel|\n|xlm|application/vnd.ms-excel|\n|xls|application/vnd.ms-excel|\n|xlt|application/vnd.ms-excel|\n|xlw|application/vnd.ms-excel|\n|xof|x-world/x-vrml|\n|xpm|image/x-xpixmap|\n|xwd|image/x-xwindowdump|\n|z|application/x-compress|\n|zip|application/zip|\n","source":"_posts/Http中的Content-Type.md","raw":"---\ntitle: Http中的Content-Type\ndate: 2013-02-25 16:16:05\ntags:\n    - 网络\n    - Content-Type\n---\n\nHTTP协议（RFC2616）采用了请求/响应模型。客户端向服务器发送一个请求，请求头包含请求的方法、URI、协议版本、以及包含请求修饰符、客户 信息和内容的类似于MIME的消息结构。服务器以一个状态行作为响应，相应的内容包括消息协议的版本，成功或者错误编码加上包含服务器信息、实体元信息以 及可能的实体内容。\n\n通常HTTP消息由一个起始行，一个或者多个头域，一个只是头域结束的空行和可选的消息体组成。HTTP的头域包括通用头，请求头，响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域 值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。\n\n请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content- Base、Content-Encoding、Content-Language、 Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、 Etag、Expires、Last-Modified、extension-header。\nContent-Type是返回消息中非常重要的内容，表示后面的文档属于什么MIME类型。Content-Type: [type]/[subtype]; parameter。例如最常见的就是text/html，它的意思是说返回的内容是文本类型，这个文本又是HTML格式的。原则上浏览器会根据Content-Type来决定如何显示返回的消息体内容。\n\ntype有下面的形式。\n\nText：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；\n\nMultipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；\n\nApplication：用于传输应用程序数据或者二进制数据；\n\nMessage：用于包装一个E-mail消息；\n\nImage：用于传输静态图片数据；\n\nAudio：用于传输音频或者音声数据；\n\nVideo：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。\n\nsubtype用于指定type的详细形式。content-type/subtype配对的集合和与此相关的参数，将随着时间而增长。为了确保这些值在一个有序而且公开的状态下开发，MIME使用Internet Assigned Numbers Authority (IANA)作为中心的注册机制来管理这些值。\n\nparameter可以用来指定附加的信息，更多情况下是用于指定text/plain和text/htm等的文字编码方式的charset参数。MIME根据type制定了默认的subtype，当客户端不能确定消息的subtype的情况下，消息被看作默认的subtype进行处理。Text默认是text/plain，Application默认是application/octet-stream而Multipart默认情况下被看作multipart/mixed。Json常用application/json。\n\napplication/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式。\n\nmultipart/form-data： 数据被编码为一条消息，页上的每个控件对应消息中的一个部分\n\ntext/plain： 数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符。postman软件里标的是RAW。\n\n\nMIME定义在RFC-2046 MIME Part 2: Media Types 。\n\n常用类型：\n\nMime Types By File Extension\n\n|Extension|Type/sub-type|\n|:--:|:--:|\n||application/octet-stream|\n|323|text/h323|\n|acx|application/internet-property-stream|\n|ai|application/postscript|\n|aif|audio/x-aiff|\n|aifc|audio/x-aiff|\n|aiff|audio/x-aiff|\n|asf|video/x-ms-asf|\n|asr|video/x-ms-asf|\n|asx|video/x-ms-asf|\n|au|audio/basic|\n|avi|video/x-msvideo|\n|axs|application/olescript|\n|bas|text/plain|\n|bcpio|application/x-bcpio|\n|bin|application/octet-stream|\n|bmp|image/bmp|\n|c|text/plain|\n|cat|application/vnd.ms-pkiseccat|\n|cdf|application/x-cdf|\n|cer|application/x-x509-ca-cert|\n|class|application/octet-stream|\n|clp|application/x-msclip|\n|cmx|image/x-cmx|\n|cod|image/cis-cod|\n|cpio|application/x-cpio|\n|crd|application/x-mscardfile|\n|crl|application/pkix-crl|\n|crt|application/x-x509-ca-cert|\n|csh|application/x-csh|\n|css|text/css|\n|dcr|application/x-director|\n|der|application/x-x509-ca-cert|\n|dir|application/x-director|\n|dll|application/x-msdownload|\n|dms|application/octet-stream|\n|doc|application/msword|\n|dot|application/msword|\n|dvi|application/x-dvi|\n|dxr|application/x-director|\n|eps|application/postscript|\n|etx|text/x-setext|\n|evy|application/envoy|\n|exe|application/octet-stream|\n|fif|application/fractals|\n|flr|x-world/x-vrml|\n|gif|image/gif|\n|gtar|application/x-gtar|\n|gz|application/x-gzip|\n|h|text/plain|\n|hdf|application/x-hdf|\n|hlp|application/winhlp|\n|hqx|application/mac-binhex40|\n|hta|application/hta|\n|htc|text/x-component|\n|htm|text/html|\n|html|text/html|\n|htt|text/webviewhtml|\n|ico|image/x-icon|\n|ief|image/ief|\n|iii|application/x-iphone|\n|ins|application/x-internet-signup|\n|isp|application/x-internet-signup|\n|jfif|image/pipeg|\n|jpe|image/jpeg|\n|jpeg|image/jpeg|\n|jpg|image/jpeg|\n|js|application/x-javascript|\n|latex|application/x-latex|\n|lha|application/octet-stream|\n|lsf|video/x-la-asf|\n|lsx|video/x-la-asf|\n|lzh|application/octet-stream|\n|m13|application/x-msmediaview|\n|m14|application/x-msmediaview|\n|m3u|audio/x-mpegurl|\n|man|application/x-troff-man|\n|mdb|application/x-msaccess|\n|me|application/x-troff-me|\n|mht|message/rfc822|\n|mhtml|message/rfc822|\n|mid|audio/mid|\n|mny|application/x-msmoney|\n|mov|video/quicktime|\n|movie|video/x-sgi-movie|\n|mp2|video/mpeg|\n|mp3|audio/mpeg|\n|mpa|video/mpeg|\n|mpe|video/mpeg|\n|mpeg|video/mpeg|\n|mpg|video/mpeg|\n|mpp|application/vnd.ms-project|\n|mpv2|video/mpeg|\n|ms|application/x-troff-ms|\n|mvb|application/x-msmediaview|\n|nws|message/rfc822|\n|oda|application/oda|\n|p10|application/pkcs10|\n|p12|application/x-pkcs12|\n|p7b|application/x-pkcs7-certificates|\n|p7c|application/x-pkcs7-mime|\n|p7m|application/x-pkcs7-mime|\n|p7r|application/x-pkcs7-certreqresp|\n|p7s|application/x-pkcs7-signature|\n|pbm|image/x-portable-bitmap|\n|pdf|application/pdf|\n|pfx|application/x-pkcs12|\n|pgm|image/x-portable-graymap|\n|pko|application/ynd.ms-pkipko|\n|pma|application/x-perfmon|\n|pmc|application/x-perfmon|\n|pml|application/x-perfmon|\n|pmr|application/x-perfmon|\n|pmw|application/x-perfmon|\n|pnm|image/x-portable-anymap|\n|pot|application/vnd.ms-powerpoint|\n|ppm|image/x-portable-pixmap|\n|pps|application/vnd.ms-powerpoint|\n|ppt|application/vnd.ms-powerpoint|\n|prf|application/pics-rules|\n|ps|application/postscript|\n|pub|application/x-mspublisher|\n|qt|video/quicktime|\n|ra|audio/x-pn-realaudio|\n|ram|audio/x-pn-realaudio|\n|ras|image/x-cmu-raster|\n|rgb|image/x-rgb|\n|rmi|audio/mid|\n|roff|application/x-troff|\n|rtf|application/rtf|\n|rtx|text/richtext|\n|scd|application/x-msschedule|\n|sct|text/scriptlet|\n|setpay|application/set-payment-initiation|\n|setreg|application/set-registration-initiation|\n|sh|application/x-sh|\n|shar|application/x-shar|\n|sit|application/x-stuffit|\n|snd|audio/basic|\n|spc|application/x-pkcs7-certificates|\n|spl|application/futuresplash|\n|src|application/x-wais-source|\n|sst|application/vnd.ms-pkicertstore|\n|stl|application/vnd.ms-pkistl|\n|stm|text/html|\n|svg|image/svg+xml|\n|sv4cpio|application/x-sv4cpio|\n|sv4crc|application/x-sv4crc|\n|swf|application/x-shockwave-flash|\n|tapplication/x-troff|\n|tar|application/x-tar|\n|tcl|application/x-tcl|\n|tex|application/x-tex|\n|texi|application/x-texinfo|\n|texinfo|application/x-texinfo|\n|tgz|application/x-compressed|\n|tif|image/tiff|\n|tiff|image/tiff|\n|tr|application/x-troff|\n|trm|application/x-msterminal|\n|tsv|text/tab-separated-values|\n|txt|text/plain|\n|uls|text/iuls|\n|ustar|application/x-ustar|\n|vcf|text/x-vcard|\n|vrml|x-world/x-vrml|\n|wav|audio/x-wav|\n|wcm|application/vnd.ms-works|\n|wdb|application/vnd.ms-works|\n|wks|application/vnd.ms-works|\n|wmf|application/x-msmetafile|\n|wps|application/vnd.ms-works|\n|wri|application/x-mswrite|\n|wrl|x-world/x-vrml|\n|wrz|x-world/x-vrml|\n|xaf|x-world/x-vrml|\n|xbm|image/x-xbitmap|\n|xla|application/vnd.ms-excel|\n|xlc|application/vnd.ms-excel|\n|xlm|application/vnd.ms-excel|\n|xls|application/vnd.ms-excel|\n|xlt|application/vnd.ms-excel|\n|xlw|application/vnd.ms-excel|\n|xof|x-world/x-vrml|\n|xpm|image/x-xpixmap|\n|xwd|image/x-xwindowdump|\n|z|application/x-compress|\n|zip|application/zip|\n","slug":"Http中的Content-Type","published":1,"updated":"2021-07-08T09:20:31.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqk0004nhs6eqtvnbpu","content":"<p>HTTP协议（RFC2616）采用了请求/响应模型。客户端向服务器发送一个请求，请求头包含请求的方法、URI、协议版本、以及包含请求修饰符、客户 信息和内容的类似于MIME的消息结构。服务器以一个状态行作为响应，相应的内容包括消息协议的版本，成功或者错误编码加上包含服务器信息、实体元信息以 及可能的实体内容。</p>\n<p>通常HTTP消息由一个起始行，一个或者多个头域，一个只是头域结束的空行和可选的消息体组成。HTTP的头域包括通用头，请求头，响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域 值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。</p>\n<p>请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content- Base、Content-Encoding、Content-Language、 Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、 Etag、Expires、Last-Modified、extension-header。<br>Content-Type是返回消息中非常重要的内容，表示后面的文档属于什么MIME类型。Content-Type: [type]/[subtype]; parameter。例如最常见的就是text/html，它的意思是说返回的内容是文本类型，这个文本又是HTML格式的。原则上浏览器会根据Content-Type来决定如何显示返回的消息体内容。</p>\n<p>type有下面的形式。</p>\n<p>Text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；</p>\n<p>Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；</p>\n<p>Application：用于传输应用程序数据或者二进制数据；</p>\n<p>Message：用于包装一个E-mail消息；</p>\n<p>Image：用于传输静态图片数据；</p>\n<p>Audio：用于传输音频或者音声数据；</p>\n<p>Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。</p>\n<p>subtype用于指定type的详细形式。content-type/subtype配对的集合和与此相关的参数，将随着时间而增长。为了确保这些值在一个有序而且公开的状态下开发，MIME使用Internet Assigned Numbers Authority (IANA)作为中心的注册机制来管理这些值。</p>\n<p>parameter可以用来指定附加的信息，更多情况下是用于指定text/plain和text/htm等的文字编码方式的charset参数。MIME根据type制定了默认的subtype，当客户端不能确定消息的subtype的情况下，消息被看作默认的subtype进行处理。Text默认是text/plain，Application默认是application/octet-stream而Multipart默认情况下被看作multipart/mixed。Json常用application/json。</p>\n<p>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式。</p>\n<p>multipart/form-data： 数据被编码为一条消息，页上的每个控件对应消息中的一个部分</p>\n<p>text/plain： 数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符。postman软件里标的是RAW。</p>\n<p>MIME定义在RFC-2046 MIME Part 2: Media Types 。</p>\n<p>常用类型：</p>\n<p>Mime Types By File Extension</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Extension</th>\n<th style=\"text-align:center\">Type/sub-type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">323</td>\n<td style=\"text-align:center\">text/h323</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">acx</td>\n<td style=\"text-align:center\">application/internet-property-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ai</td>\n<td style=\"text-align:center\">application/postscript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">aif</td>\n<td style=\"text-align:center\">audio/x-aiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">aifc</td>\n<td style=\"text-align:center\">audio/x-aiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">aiff</td>\n<td style=\"text-align:center\">audio/x-aiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asf</td>\n<td style=\"text-align:center\">video/x-ms-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asr</td>\n<td style=\"text-align:center\">video/x-ms-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asx</td>\n<td style=\"text-align:center\">video/x-ms-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">au</td>\n<td style=\"text-align:center\">audio/basic</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">avi</td>\n<td style=\"text-align:center\">video/x-msvideo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">axs</td>\n<td style=\"text-align:center\">application/olescript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bas</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bcpio</td>\n<td style=\"text-align:center\">application/x-bcpio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bin</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bmp</td>\n<td style=\"text-align:center\">image/bmp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cat</td>\n<td style=\"text-align:center\">application/vnd.ms-pkiseccat</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cdf</td>\n<td style=\"text-align:center\">application/x-cdf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cer</td>\n<td style=\"text-align:center\">application/x-x509-ca-cert</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">class</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clp</td>\n<td style=\"text-align:center\">application/x-msclip</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cmx</td>\n<td style=\"text-align:center\">image/x-cmx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cod</td>\n<td style=\"text-align:center\">image/cis-cod</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cpio</td>\n<td style=\"text-align:center\">application/x-cpio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">crd</td>\n<td style=\"text-align:center\">application/x-mscardfile</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">crl</td>\n<td style=\"text-align:center\">application/pkix-crl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">crt</td>\n<td style=\"text-align:center\">application/x-x509-ca-cert</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">csh</td>\n<td style=\"text-align:center\">application/x-csh</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">css</td>\n<td style=\"text-align:center\">text/css</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dcr</td>\n<td style=\"text-align:center\">application/x-director</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">der</td>\n<td style=\"text-align:center\">application/x-x509-ca-cert</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dir</td>\n<td style=\"text-align:center\">application/x-director</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dll</td>\n<td style=\"text-align:center\">application/x-msdownload</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dms</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">doc</td>\n<td style=\"text-align:center\">application/msword</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dot</td>\n<td style=\"text-align:center\">application/msword</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dvi</td>\n<td style=\"text-align:center\">application/x-dvi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dxr</td>\n<td style=\"text-align:center\">application/x-director</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eps</td>\n<td style=\"text-align:center\">application/postscript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">etx</td>\n<td style=\"text-align:center\">text/x-setext</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">evy</td>\n<td style=\"text-align:center\">application/envoy</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exe</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fif</td>\n<td style=\"text-align:center\">application/fractals</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">flr</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gif</td>\n<td style=\"text-align:center\">image/gif</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gtar</td>\n<td style=\"text-align:center\">application/x-gtar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gz</td>\n<td style=\"text-align:center\">application/x-gzip</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">h</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hdf</td>\n<td style=\"text-align:center\">application/x-hdf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hlp</td>\n<td style=\"text-align:center\">application/winhlp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hqx</td>\n<td style=\"text-align:center\">application/mac-binhex40</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hta</td>\n<td style=\"text-align:center\">application/hta</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htc</td>\n<td style=\"text-align:center\">text/x-component</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htm</td>\n<td style=\"text-align:center\">text/html</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">html</td>\n<td style=\"text-align:center\">text/html</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htt</td>\n<td style=\"text-align:center\">text/webviewhtml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ico</td>\n<td style=\"text-align:center\">image/x-icon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ief</td>\n<td style=\"text-align:center\">image/ief</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iii</td>\n<td style=\"text-align:center\">application/x-iphone</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ins</td>\n<td style=\"text-align:center\">application/x-internet-signup</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isp</td>\n<td style=\"text-align:center\">application/x-internet-signup</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jfif</td>\n<td style=\"text-align:center\">image/pipeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jpe</td>\n<td style=\"text-align:center\">image/jpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jpeg</td>\n<td style=\"text-align:center\">image/jpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jpg</td>\n<td style=\"text-align:center\">image/jpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">js</td>\n<td style=\"text-align:center\">application/x-javascript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">latex</td>\n<td style=\"text-align:center\">application/x-latex</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lha</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lsf</td>\n<td style=\"text-align:center\">video/x-la-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lsx</td>\n<td style=\"text-align:center\">video/x-la-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lzh</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m13</td>\n<td style=\"text-align:center\">application/x-msmediaview</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m14</td>\n<td style=\"text-align:center\">application/x-msmediaview</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m3u</td>\n<td style=\"text-align:center\">audio/x-mpegurl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">man</td>\n<td style=\"text-align:center\">application/x-troff-man</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mdb</td>\n<td style=\"text-align:center\">application/x-msaccess</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">me</td>\n<td style=\"text-align:center\">application/x-troff-me</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mht</td>\n<td style=\"text-align:center\">message/rfc822</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mhtml</td>\n<td style=\"text-align:center\">message/rfc822</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mid</td>\n<td style=\"text-align:center\">audio/mid</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mny</td>\n<td style=\"text-align:center\">application/x-msmoney</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mov</td>\n<td style=\"text-align:center\">video/quicktime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">movie</td>\n<td style=\"text-align:center\">video/x-sgi-movie</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mp2</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mp3</td>\n<td style=\"text-align:center\">audio/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpa</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpe</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpeg</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpg</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpp</td>\n<td style=\"text-align:center\">application/vnd.ms-project</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpv2</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ms</td>\n<td style=\"text-align:center\">application/x-troff-ms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mvb</td>\n<td style=\"text-align:center\">application/x-msmediaview</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nws</td>\n<td style=\"text-align:center\">message/rfc822</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">oda</td>\n<td style=\"text-align:center\">application/oda</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p10</td>\n<td style=\"text-align:center\">application/pkcs10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p12</td>\n<td style=\"text-align:center\">application/x-pkcs12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7b</td>\n<td style=\"text-align:center\">application/x-pkcs7-certificates</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7c</td>\n<td style=\"text-align:center\">application/x-pkcs7-mime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7m</td>\n<td style=\"text-align:center\">application/x-pkcs7-mime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7r</td>\n<td style=\"text-align:center\">application/x-pkcs7-certreqresp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7s</td>\n<td style=\"text-align:center\">application/x-pkcs7-signature</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pbm</td>\n<td style=\"text-align:center\">image/x-portable-bitmap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pdf</td>\n<td style=\"text-align:center\">application/pdf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pfx</td>\n<td style=\"text-align:center\">application/x-pkcs12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pgm</td>\n<td style=\"text-align:center\">image/x-portable-graymap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pko</td>\n<td style=\"text-align:center\">application/ynd.ms-pkipko</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pma</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pmc</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pml</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pmr</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pmw</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pnm</td>\n<td style=\"text-align:center\">image/x-portable-anymap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pot</td>\n<td style=\"text-align:center\">application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ppm</td>\n<td style=\"text-align:center\">image/x-portable-pixmap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pps</td>\n<td style=\"text-align:center\">application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ppt</td>\n<td style=\"text-align:center\">application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">prf</td>\n<td style=\"text-align:center\">application/pics-rules</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ps</td>\n<td style=\"text-align:center\">application/postscript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pub</td>\n<td style=\"text-align:center\">application/x-mspublisher</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qt</td>\n<td style=\"text-align:center\">video/quicktime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ra</td>\n<td style=\"text-align:center\">audio/x-pn-realaudio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ram</td>\n<td style=\"text-align:center\">audio/x-pn-realaudio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ras</td>\n<td style=\"text-align:center\">image/x-cmu-raster</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rgb</td>\n<td style=\"text-align:center\">image/x-rgb</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rmi</td>\n<td style=\"text-align:center\">audio/mid</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">roff</td>\n<td style=\"text-align:center\">application/x-troff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rtf</td>\n<td style=\"text-align:center\">application/rtf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rtx</td>\n<td style=\"text-align:center\">text/richtext</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scd</td>\n<td style=\"text-align:center\">application/x-msschedule</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sct</td>\n<td style=\"text-align:center\">text/scriptlet</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setpay</td>\n<td style=\"text-align:center\">application/set-payment-initiation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setreg</td>\n<td style=\"text-align:center\">application/set-registration-initiation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sh</td>\n<td style=\"text-align:center\">application/x-sh</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">shar</td>\n<td style=\"text-align:center\">application/x-shar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sit</td>\n<td style=\"text-align:center\">application/x-stuffit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">snd</td>\n<td style=\"text-align:center\">audio/basic</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">spc</td>\n<td style=\"text-align:center\">application/x-pkcs7-certificates</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">spl</td>\n<td style=\"text-align:center\">application/futuresplash</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">src</td>\n<td style=\"text-align:center\">application/x-wais-source</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sst</td>\n<td style=\"text-align:center\">application/vnd.ms-pkicertstore</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stl</td>\n<td style=\"text-align:center\">application/vnd.ms-pkistl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stm</td>\n<td style=\"text-align:center\">text/html</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">svg</td>\n<td style=\"text-align:center\">image/svg+xml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sv4cpio</td>\n<td style=\"text-align:center\">application/x-sv4cpio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sv4crc</td>\n<td style=\"text-align:center\">application/x-sv4crc</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">swf</td>\n<td style=\"text-align:center\">application/x-shockwave-flash</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tapplication/x-troff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tar</td>\n<td style=\"text-align:center\">application/x-tar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tcl</td>\n<td style=\"text-align:center\">application/x-tcl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tex</td>\n<td style=\"text-align:center\">application/x-tex</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">texi</td>\n<td style=\"text-align:center\">application/x-texinfo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">texinfo</td>\n<td style=\"text-align:center\">application/x-texinfo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tgz</td>\n<td style=\"text-align:center\">application/x-compressed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tif</td>\n<td style=\"text-align:center\">image/tiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tiff</td>\n<td style=\"text-align:center\">image/tiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tr</td>\n<td style=\"text-align:center\">application/x-troff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trm</td>\n<td style=\"text-align:center\">application/x-msterminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tsv</td>\n<td style=\"text-align:center\">text/tab-separated-values</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">txt</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">uls</td>\n<td style=\"text-align:center\">text/iuls</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ustar</td>\n<td style=\"text-align:center\">application/x-ustar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vcf</td>\n<td style=\"text-align:center\">text/x-vcard</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vrml</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wav</td>\n<td style=\"text-align:center\">audio/x-wav</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wcm</td>\n<td style=\"text-align:center\">application/vnd.ms-works</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wdb</td>\n<td style=\"text-align:center\">application/vnd.ms-works</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wks</td>\n<td style=\"text-align:center\">application/vnd.ms-works</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wmf</td>\n<td style=\"text-align:center\">application/x-msmetafile</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wps</td>\n<td style=\"text-align:center\">application/vnd.ms-works</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wri</td>\n<td style=\"text-align:center\">application/x-mswrite</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wrl</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wrz</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xaf</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xbm</td>\n<td style=\"text-align:center\">image/x-xbitmap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xla</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xlc</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xlm</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xls</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xlt</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xlw</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xof</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xpm</td>\n<td style=\"text-align:center\">image/x-xpixmap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xwd</td>\n<td style=\"text-align:center\">image/x-xwindowdump</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">z</td>\n<td style=\"text-align:center\">application/x-compress</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">zip</td>\n<td style=\"text-align:center\">application/zip</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>HTTP协议（RFC2616）采用了请求/响应模型。客户端向服务器发送一个请求，请求头包含请求的方法、URI、协议版本、以及包含请求修饰符、客户 信息和内容的类似于MIME的消息结构。服务器以一个状态行作为响应，相应的内容包括消息协议的版本，成功或者错误编码加上包含服务器信息、实体元信息以 及可能的实体内容。</p>\n<p>通常HTTP消息由一个起始行，一个或者多个头域，一个只是头域结束的空行和可选的消息体组成。HTTP的头域包括通用头，请求头，响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域 值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。</p>\n<p>请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content- Base、Content-Encoding、Content-Language、 Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、 Etag、Expires、Last-Modified、extension-header。<br>Content-Type是返回消息中非常重要的内容，表示后面的文档属于什么MIME类型。Content-Type: [type]/[subtype]; parameter。例如最常见的就是text/html，它的意思是说返回的内容是文本类型，这个文本又是HTML格式的。原则上浏览器会根据Content-Type来决定如何显示返回的消息体内容。</p>\n<p>type有下面的形式。</p>\n<p>Text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；</p>\n<p>Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；</p>\n<p>Application：用于传输应用程序数据或者二进制数据；</p>\n<p>Message：用于包装一个E-mail消息；</p>\n<p>Image：用于传输静态图片数据；</p>\n<p>Audio：用于传输音频或者音声数据；</p>\n<p>Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。</p>\n<p>subtype用于指定type的详细形式。content-type/subtype配对的集合和与此相关的参数，将随着时间而增长。为了确保这些值在一个有序而且公开的状态下开发，MIME使用Internet Assigned Numbers Authority (IANA)作为中心的注册机制来管理这些值。</p>\n<p>parameter可以用来指定附加的信息，更多情况下是用于指定text/plain和text/htm等的文字编码方式的charset参数。MIME根据type制定了默认的subtype，当客户端不能确定消息的subtype的情况下，消息被看作默认的subtype进行处理。Text默认是text/plain，Application默认是application/octet-stream而Multipart默认情况下被看作multipart/mixed。Json常用application/json。</p>\n<p>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式。</p>\n<p>multipart/form-data： 数据被编码为一条消息，页上的每个控件对应消息中的一个部分</p>\n<p>text/plain： 数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符。postman软件里标的是RAW。</p>\n<p>MIME定义在RFC-2046 MIME Part 2: Media Types 。</p>\n<p>常用类型：</p>\n<p>Mime Types By File Extension</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Extension</th>\n<th style=\"text-align:center\">Type/sub-type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">323</td>\n<td style=\"text-align:center\">text/h323</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">acx</td>\n<td style=\"text-align:center\">application/internet-property-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ai</td>\n<td style=\"text-align:center\">application/postscript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">aif</td>\n<td style=\"text-align:center\">audio/x-aiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">aifc</td>\n<td style=\"text-align:center\">audio/x-aiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">aiff</td>\n<td style=\"text-align:center\">audio/x-aiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asf</td>\n<td style=\"text-align:center\">video/x-ms-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asr</td>\n<td style=\"text-align:center\">video/x-ms-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">asx</td>\n<td style=\"text-align:center\">video/x-ms-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">au</td>\n<td style=\"text-align:center\">audio/basic</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">avi</td>\n<td style=\"text-align:center\">video/x-msvideo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">axs</td>\n<td style=\"text-align:center\">application/olescript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bas</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bcpio</td>\n<td style=\"text-align:center\">application/x-bcpio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bin</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bmp</td>\n<td style=\"text-align:center\">image/bmp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cat</td>\n<td style=\"text-align:center\">application/vnd.ms-pkiseccat</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cdf</td>\n<td style=\"text-align:center\">application/x-cdf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cer</td>\n<td style=\"text-align:center\">application/x-x509-ca-cert</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">class</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clp</td>\n<td style=\"text-align:center\">application/x-msclip</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cmx</td>\n<td style=\"text-align:center\">image/x-cmx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cod</td>\n<td style=\"text-align:center\">image/cis-cod</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cpio</td>\n<td style=\"text-align:center\">application/x-cpio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">crd</td>\n<td style=\"text-align:center\">application/x-mscardfile</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">crl</td>\n<td style=\"text-align:center\">application/pkix-crl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">crt</td>\n<td style=\"text-align:center\">application/x-x509-ca-cert</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">csh</td>\n<td style=\"text-align:center\">application/x-csh</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">css</td>\n<td style=\"text-align:center\">text/css</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dcr</td>\n<td style=\"text-align:center\">application/x-director</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">der</td>\n<td style=\"text-align:center\">application/x-x509-ca-cert</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dir</td>\n<td style=\"text-align:center\">application/x-director</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dll</td>\n<td style=\"text-align:center\">application/x-msdownload</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dms</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">doc</td>\n<td style=\"text-align:center\">application/msword</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dot</td>\n<td style=\"text-align:center\">application/msword</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dvi</td>\n<td style=\"text-align:center\">application/x-dvi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dxr</td>\n<td style=\"text-align:center\">application/x-director</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eps</td>\n<td style=\"text-align:center\">application/postscript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">etx</td>\n<td style=\"text-align:center\">text/x-setext</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">evy</td>\n<td style=\"text-align:center\">application/envoy</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exe</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fif</td>\n<td style=\"text-align:center\">application/fractals</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">flr</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gif</td>\n<td style=\"text-align:center\">image/gif</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gtar</td>\n<td style=\"text-align:center\">application/x-gtar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gz</td>\n<td style=\"text-align:center\">application/x-gzip</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">h</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hdf</td>\n<td style=\"text-align:center\">application/x-hdf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hlp</td>\n<td style=\"text-align:center\">application/winhlp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hqx</td>\n<td style=\"text-align:center\">application/mac-binhex40</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hta</td>\n<td style=\"text-align:center\">application/hta</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htc</td>\n<td style=\"text-align:center\">text/x-component</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htm</td>\n<td style=\"text-align:center\">text/html</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">html</td>\n<td style=\"text-align:center\">text/html</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">htt</td>\n<td style=\"text-align:center\">text/webviewhtml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ico</td>\n<td style=\"text-align:center\">image/x-icon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ief</td>\n<td style=\"text-align:center\">image/ief</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">iii</td>\n<td style=\"text-align:center\">application/x-iphone</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ins</td>\n<td style=\"text-align:center\">application/x-internet-signup</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isp</td>\n<td style=\"text-align:center\">application/x-internet-signup</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jfif</td>\n<td style=\"text-align:center\">image/pipeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jpe</td>\n<td style=\"text-align:center\">image/jpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jpeg</td>\n<td style=\"text-align:center\">image/jpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jpg</td>\n<td style=\"text-align:center\">image/jpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">js</td>\n<td style=\"text-align:center\">application/x-javascript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">latex</td>\n<td style=\"text-align:center\">application/x-latex</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lha</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lsf</td>\n<td style=\"text-align:center\">video/x-la-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lsx</td>\n<td style=\"text-align:center\">video/x-la-asf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lzh</td>\n<td style=\"text-align:center\">application/octet-stream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m13</td>\n<td style=\"text-align:center\">application/x-msmediaview</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m14</td>\n<td style=\"text-align:center\">application/x-msmediaview</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m3u</td>\n<td style=\"text-align:center\">audio/x-mpegurl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">man</td>\n<td style=\"text-align:center\">application/x-troff-man</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mdb</td>\n<td style=\"text-align:center\">application/x-msaccess</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">me</td>\n<td style=\"text-align:center\">application/x-troff-me</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mht</td>\n<td style=\"text-align:center\">message/rfc822</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mhtml</td>\n<td style=\"text-align:center\">message/rfc822</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mid</td>\n<td style=\"text-align:center\">audio/mid</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mny</td>\n<td style=\"text-align:center\">application/x-msmoney</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mov</td>\n<td style=\"text-align:center\">video/quicktime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">movie</td>\n<td style=\"text-align:center\">video/x-sgi-movie</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mp2</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mp3</td>\n<td style=\"text-align:center\">audio/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpa</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpe</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpeg</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpg</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpp</td>\n<td style=\"text-align:center\">application/vnd.ms-project</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mpv2</td>\n<td style=\"text-align:center\">video/mpeg</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ms</td>\n<td style=\"text-align:center\">application/x-troff-ms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mvb</td>\n<td style=\"text-align:center\">application/x-msmediaview</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nws</td>\n<td style=\"text-align:center\">message/rfc822</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">oda</td>\n<td style=\"text-align:center\">application/oda</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p10</td>\n<td style=\"text-align:center\">application/pkcs10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p12</td>\n<td style=\"text-align:center\">application/x-pkcs12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7b</td>\n<td style=\"text-align:center\">application/x-pkcs7-certificates</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7c</td>\n<td style=\"text-align:center\">application/x-pkcs7-mime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7m</td>\n<td style=\"text-align:center\">application/x-pkcs7-mime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7r</td>\n<td style=\"text-align:center\">application/x-pkcs7-certreqresp</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p7s</td>\n<td style=\"text-align:center\">application/x-pkcs7-signature</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pbm</td>\n<td style=\"text-align:center\">image/x-portable-bitmap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pdf</td>\n<td style=\"text-align:center\">application/pdf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pfx</td>\n<td style=\"text-align:center\">application/x-pkcs12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pgm</td>\n<td style=\"text-align:center\">image/x-portable-graymap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pko</td>\n<td style=\"text-align:center\">application/ynd.ms-pkipko</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pma</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pmc</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pml</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pmr</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pmw</td>\n<td style=\"text-align:center\">application/x-perfmon</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pnm</td>\n<td style=\"text-align:center\">image/x-portable-anymap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pot</td>\n<td style=\"text-align:center\">application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ppm</td>\n<td style=\"text-align:center\">image/x-portable-pixmap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pps</td>\n<td style=\"text-align:center\">application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ppt</td>\n<td style=\"text-align:center\">application/vnd.ms-powerpoint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">prf</td>\n<td style=\"text-align:center\">application/pics-rules</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ps</td>\n<td style=\"text-align:center\">application/postscript</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pub</td>\n<td style=\"text-align:center\">application/x-mspublisher</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qt</td>\n<td style=\"text-align:center\">video/quicktime</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ra</td>\n<td style=\"text-align:center\">audio/x-pn-realaudio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ram</td>\n<td style=\"text-align:center\">audio/x-pn-realaudio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ras</td>\n<td style=\"text-align:center\">image/x-cmu-raster</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rgb</td>\n<td style=\"text-align:center\">image/x-rgb</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rmi</td>\n<td style=\"text-align:center\">audio/mid</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">roff</td>\n<td style=\"text-align:center\">application/x-troff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rtf</td>\n<td style=\"text-align:center\">application/rtf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rtx</td>\n<td style=\"text-align:center\">text/richtext</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scd</td>\n<td style=\"text-align:center\">application/x-msschedule</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sct</td>\n<td style=\"text-align:center\">text/scriptlet</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setpay</td>\n<td style=\"text-align:center\">application/set-payment-initiation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setreg</td>\n<td style=\"text-align:center\">application/set-registration-initiation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sh</td>\n<td style=\"text-align:center\">application/x-sh</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">shar</td>\n<td style=\"text-align:center\">application/x-shar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sit</td>\n<td style=\"text-align:center\">application/x-stuffit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">snd</td>\n<td style=\"text-align:center\">audio/basic</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">spc</td>\n<td style=\"text-align:center\">application/x-pkcs7-certificates</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">spl</td>\n<td style=\"text-align:center\">application/futuresplash</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">src</td>\n<td style=\"text-align:center\">application/x-wais-source</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sst</td>\n<td style=\"text-align:center\">application/vnd.ms-pkicertstore</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stl</td>\n<td style=\"text-align:center\">application/vnd.ms-pkistl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stm</td>\n<td style=\"text-align:center\">text/html</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">svg</td>\n<td style=\"text-align:center\">image/svg+xml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sv4cpio</td>\n<td style=\"text-align:center\">application/x-sv4cpio</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sv4crc</td>\n<td style=\"text-align:center\">application/x-sv4crc</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">swf</td>\n<td style=\"text-align:center\">application/x-shockwave-flash</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tapplication/x-troff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tar</td>\n<td style=\"text-align:center\">application/x-tar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tcl</td>\n<td style=\"text-align:center\">application/x-tcl</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tex</td>\n<td style=\"text-align:center\">application/x-tex</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">texi</td>\n<td style=\"text-align:center\">application/x-texinfo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">texinfo</td>\n<td style=\"text-align:center\">application/x-texinfo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tgz</td>\n<td style=\"text-align:center\">application/x-compressed</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tif</td>\n<td style=\"text-align:center\">image/tiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tiff</td>\n<td style=\"text-align:center\">image/tiff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tr</td>\n<td style=\"text-align:center\">application/x-troff</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trm</td>\n<td style=\"text-align:center\">application/x-msterminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tsv</td>\n<td style=\"text-align:center\">text/tab-separated-values</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">txt</td>\n<td style=\"text-align:center\">text/plain</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">uls</td>\n<td style=\"text-align:center\">text/iuls</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ustar</td>\n<td style=\"text-align:center\">application/x-ustar</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vcf</td>\n<td style=\"text-align:center\">text/x-vcard</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vrml</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wav</td>\n<td style=\"text-align:center\">audio/x-wav</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wcm</td>\n<td style=\"text-align:center\">application/vnd.ms-works</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wdb</td>\n<td style=\"text-align:center\">application/vnd.ms-works</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wks</td>\n<td style=\"text-align:center\">application/vnd.ms-works</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wmf</td>\n<td style=\"text-align:center\">application/x-msmetafile</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wps</td>\n<td style=\"text-align:center\">application/vnd.ms-works</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wri</td>\n<td style=\"text-align:center\">application/x-mswrite</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wrl</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wrz</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xaf</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xbm</td>\n<td style=\"text-align:center\">image/x-xbitmap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xla</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xlc</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xlm</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xls</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xlt</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xlw</td>\n<td style=\"text-align:center\">application/vnd.ms-excel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xof</td>\n<td style=\"text-align:center\">x-world/x-vrml</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xpm</td>\n<td style=\"text-align:center\">image/x-xpixmap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xwd</td>\n<td style=\"text-align:center\">image/x-xwindowdump</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">z</td>\n<td style=\"text-align:center\">application/x-compress</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">zip</td>\n<td style=\"text-align:center\">application/zip</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"AES-128-CBC Base64加密——OC,Java,Golang联调","date":"2018-11-20T18:17:28.000Z","_content":"# AES-128-CBC\n这里首先说说AES加密原理\nAES加密算法采用分组密码体制，每个分组数据的长度为128位16个字节，密钥长度可以是128位16个字节、192位或256位，一共有四种加密模式（ECB、CBC、CFB、OFB），我们通常采用需要初始向量IV的CBC模式，初始向量的长度规定是128位16个字节。另外就是Padding，这里面有大坑。。。。先说一下Padding的三种模式PKCS5、PKCS7和NOPADDING。PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。NoPadding是指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。而PKCS5如果正好是16个字节且最后是16的时候则会再填充16个16用来区分，PKC7则是为0时填充16个0。而在iOS的OC方法里压根没提供PKCS5，只有PKCS7更坑的是真正对接时发现iOS上的PKCS7和其他端PKCS5是一样的。。。。所以才有了现在的想法分享一下踩过的坑，具体啥原因恐怕只有苹果自家知道，系统方法是真的坑！Java可以直接用系统方法填好设置结束战斗。。。Go的话padding这块自己写实现其他的系统都能设置。最后说一下密钥长度这里只有iOS是要自己设置好位数再对应位数写密钥，其他平台直接对应位数写密钥即可，所以最好各平台自己在封装下判断密钥长度出事向量长度，不然各端对应起来还是要犯傻。\n<!-- more -->\n# Base64\n下面说一下Base64，这个也是个坑，iOS系统提供的base64可选类型压根就不是已知领域常用的，正常是padding和websafe，padding会填充=，而websafe则会替换\"+\"为\"-\"，\"\\\\\"为\"_\"\n而iOS提供的则是下边的，完全不常用的。。。\n```\nNSDataBase64Encoding64CharacterLineLength      其作用是将生成的Base64字符串按照64个字符长度进行等分换行。  \nNSDataBase64Encoding76CharacterLineLength      其作用是将生成的Base64字符串按照76个字符长度进行等分换行。  \nNSDataBase64EncodingEndLineWithCarriageReturn  其作用是将生成的Base64字符串以回车结束。  \nNSDataBase64EncodingEndLineWithLineFeed        其作用是将生成的Base64字符串以换行结束。  \n```\n基本上GTMBase64用定了，然后还要扩展一下padding设置，原版只是把websafe模式开放了padding设置，内部其实有对应逻辑只需要自己加个方法调用一下即可。下面就是添加的和微改的两个方法\n```\n+(NSString *)stringByEncodingData:(NSData *)data padded:(BOOL)padded{\nNSString *result = nil;\nNSData *converted = [self baseEncode:[data bytes]\nlength:[data length]\ncharset:kBase64EncodeChars\npadded:padded];\nif (converted) {\nresult = [[[NSString alloc] initWithData:converted\nencoding:NSUTF8StringEncoding] autorelease];\n}\nreturn result;\n}\n+(NSData *)decodeString:(NSString *)string {\nNSData *result = nil;\nNSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];\nif (data) {\nresult = [self baseDecode:[data bytes]\nlength:[data length]\ncharset:kBase64DecodeChars\nrequirePadding:NO];\n}\nreturn result;\n}\n```\n至于Java，android开发很爽直接用android.util.base64,里面直接可以设置nopadding和websafe等，而纯Java用java.util.base64就要自己写替换逻辑，具体代码见源码部分\n最后说一下Go直接系统方法提供完美解决\n```\nbase64.StdEncoding\nbase64.URLEncoding        websafe模式\nbase64.RawStdEncoding    nopadding\nbase64.RawURLEncoding    websafe模式nopadding\n```\n# AES-128-CBC +Base64-Nopadding源码\n下面就是3中语言分别实现 AES-128-CBC +Base64-Nopadding，从编码体验和对应上很明显Java最清晰，Go要自己写点东西，OC则是连对应对和正常理解范围内有偏差。\n## OC\n```Objective-C\n#import <Foundation/Foundation.h>\n#import <CommonCrypto/CommonCryptor.h>\n\n@interface NSData (Encryption)\n\n- (NSData *)AES128EncryptWithKey:(NSString *)key Iv:(NSString *)Iv;   //加密\n- (NSData *)AES128DecryptWithKey:(NSString *)key Iv:(NSString *)Iv;   //解密\n\n@end\n\n@implementation NSData (Encryption)\n\n//(key和iv向量这里是16位的) 这里是CBC加密模式，安全性更高\n\n- (NSData *)AES128EncryptWithKey:(NSString *)key Iv:(NSString *)Iv{//加密\n// 'key' should be 32 bytes for AES128, will be null-padded otherwise\nchar keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)\nbzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)\n\n// fetch key data\n[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];\n\n\nchar ivPtr[kCCKeySizeAES128+1];\nmemset(ivPtr, 0, sizeof(ivPtr));\n[Iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];\n\nNSUInteger dataLength = [self length];\n\n//See the doc: For block ciphers, the output size will always be less than or\n//equal to the input size plus the size of one block.\n//That's why we need to add the size of one block here\nsize_t bufferSize = dataLength + kCCBlockSizeAES128;\nvoid *buffer = malloc(bufferSize);\n\nsize_t numBytesEncrypted = 0;\nCCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,\nkeyPtr, kCCKeySizeAES128,\nivPtr /* initialization vector (optional) */,\n[self bytes], dataLength, /* input */\nbuffer, bufferSize, /* output */\n&numBytesEncrypted);\nif (cryptStatus == kCCSuccess) {\n//the returned NSData takes ownership of the buffer and will free it on deallocation\nreturn [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];\n}\n\nfree(buffer); //free the buffer;\nreturn nil;\n}\n\n\n- (NSData *)AES128DecryptWithKey:(NSString *)key Iv:(NSString *)Iv{//解密\nchar keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)\nbzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)\n\n// fetch key data\n[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];\n\nchar ivPtr[kCCKeySizeAES128+1];\nmemset(ivPtr, 0, sizeof(ivPtr));\n[Iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];\n\nNSUInteger dataLength = [self length];\n\n//See the doc: For block ciphers, the output size will always be less than or\n//equal to the input size plus the size of one block.\n//That's why we need to add the size of one block here\nsize_t bufferSize = dataLength + kCCBlockSizeAES128;\nvoid *buffer = malloc(bufferSize);\n\nsize_t numBytesDecrypted = 0;\nCCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,\nkeyPtr, kCCKeySizeAES128,\nivPtr /* initialization vector (optional) */,\n[self bytes], dataLength, /* input */\nbuffer, bufferSize, /* output */\n&numBytesDecrypted);\n\nif (cryptStatus == kCCSuccess) {\n//the returned NSData takes ownership of the buffer and will free it on deallocation\nreturn [NSData dataWithBytesNoCopy:buffer length:numBytesDecrypted];\n}\n\nfree(buffer); //free the buffer;\nreturn nil;\n}\n\n@end\n\n@interface SecurityCore\n+ (NSString*)encryptAESString:(NSString*)string;\n+ (NSString*)decryptAESString:(NSString*)string;\n@end\n\n@implementation SecurityCore\n\n#pragma mark - AES加密\nconst NSString * skey=@\"dde4b1f8a9e6b814\"\nconst NSString * ivParameter =@\"dde4b1f8a9e6b814\"\n\n//将string转成带密码的data\n+(NSString*)encryptAESString:(NSString*)string\n{\n//将nsstring转化为nsdata\nNSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];\n//使用密码对nsdata进行加密\nNSData *encryptedData = [data AES128EncryptWithKey:skey Iv:ivParameter];\nNSString *encryptedString=[GTMBase64 stringByEncodingData:encryptedData padded:NO];\n\nreturn encryptedString;\n}\n\n+ (NSString*)decryptAESString:(NSString*)string{\n\n\n//将nsstring转化为nsdata\nNSData *data = [GTMBase64 decodeString:string];\n\nNSData *decryptData = [data AES128DecryptWithKey:skey Iv:ivParameter];\n\nNSString *str = [[NSString alloc] initWithData:decryptData encoding:NSUTF8StringEncoding];\nreturn [str autorelease];\n}\n\n@end\n\n```\n## Java\n```Java\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport java.util.Base64;\n\n\npublic class SecurityCore {\n/*\n* 加密用的Key 可以用26个字母和数字组成 此处使用AES-128-CBC加密模式，key需要为16位。\n*/\nprivate String sKey        = \"dde4b1f8a9e6b814\";\nprivate String ivParameter = \"dde4b1f8a9e6b814\";\nprivate static SecurityCore instance = null;\n\nprivate SecurityCore() {\n\n}\n\npublic static SecurityCore getInstance() {\nif (instance == null)\ninstance = new SecurityCore();\nreturn instance;\n}\n\npublic static String webSafeBase64StringEncoding(byte[] sSrc,boolean padded) throws Exception {\nString encodeString=Base64.getEncoder().encodeToString(sSrc);// 此处使用BASE64做转码。\n\n//websafe base64\nencodeString=encodeString.replace(\"+\",\"-\");\nencodeString=encodeString.replace(\"/\",\"_\");\n\n//nopadding base64\nif (!padded) {\nif (encodeString.endsWith(\"=\")) {\nencodeString = encodeString.substring(0, encodeString.length() - 1);\nif (encodeString.endsWith(\"=\")) {\nencodeString = encodeString.substring(0, encodeString.length() - 1);\n}\n}\n}\nreturn encodeString;\n}\n\npublic static byte[] webSafeBase64StringDecoding(String sSrc) throws Exception {\n//websafe base64\nsSrc=sSrc.replace(\"-\",\"+\");\nsSrc=sSrc.replace(\"_\",\"/\");\n\nreturn Base64.getDecoder().decode(sSrc);\n}\n\npublic static String base64StringEncoding(byte[] sSrc,boolean padded) throws Exception {\nString encodeString=Base64.getEncoder().encodeToString(sSrc);// 此处使用BASE64做转码。\n\n//nopadding base64\nif (!padded) {\nif (encodeString.endsWith(\"=\")) {\nencodeString = encodeString.substring(0, encodeString.length() - 1);\nif (encodeString.endsWith(\"=\")) {\nencodeString = encodeString.substring(0, encodeString.length() - 1);\n}\n}\n}\nreturn encodeString;\n}\n\npublic static byte[] base64StringDecoding(String sSrc) throws Exception {\nreturn Base64.getDecoder().decode(sSrc);\n}\n\npublic static byte[] AES128CBCStringEncoding(String encData ,String secretKey,String vector) throws Exception {\n\nif(secretKey == null) {\nreturn null;\n}\nif(secretKey.length() != 16) {\nreturn null;\n}\nif (vector != null && vector.length() != 16) {\nreturn null;\n}\nCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nbyte[] raw = secretKey.getBytes();\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nIvParameterSpec iv = new IvParameterSpec(vector.getBytes());// 使用CBC模式，需要一个向量iv，可增加加密算法的强度\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);\nbyte[] encrypted = cipher.doFinal(encData.getBytes(\"utf-8\"));\n\nreturn encrypted;\n}\n\npublic static String AES128CBCStringDecoding(byte[] sSrc,String key,String ivs) throws Exception {\ntry {\nif(key == null) {\nreturn null;\n}\nif(key.length() != 16) {\nreturn null;\n}\nif (ivs != null && ivs.length() != 16) {\nreturn null;\n}\nbyte[] raw = key.getBytes(\"ASCII\");\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nIvParameterSpec iv = new IvParameterSpec(ivs.getBytes());\ncipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);\nbyte[] original = cipher.doFinal(sSrc);\nString originalString = new String(original, \"utf-8\");\nreturn originalString;\n} catch (Exception ex) {\nreturn null;\n}\n}\n\n\n// 加密\npublic String encrypt(String sSrc) throws Exception {\ntry {\nString encodeString=base64StringEncoding(AES128CBCStringEncoding(sSrc,sKey,ivParameter),false);\n\nreturn encodeString;\n} catch (Exception ex) {\nreturn null;\n}\n}\n\n// 解密\npublic String decrypt(String sSrc) throws Exception {\ntry {\nString decodeString=AES128CBCStringDecoding(base64StringDecoding(sSrc),sKey,ivParameter);\nreturn decodeString;\n} catch (Exception ex) {\nreturn null;\n}\n}\n\n//test\npublic static void main(String[] args) throws Exception {\n// 需要加密的字串\nString cSrc = \"123\";\n\n// 加密\nlong lStart = System.currentTimeMillis();\nString enString = SecurityCore.getInstance().encrypt(cSrc);\nSystem.out.println(\"加密后的字串是：\" + enString);\n\nlong lUseTime = System.currentTimeMillis() - lStart;\nSystem.out.println(\"加密耗时：\" + lUseTime + \"毫秒\");\n// 解密\nlStart = System.currentTimeMillis();\nString DeString = SecurityCore.getInstance().decrypt(enString);\nSystem.out.println(\"解密后的字串是：\" + DeString);\nlUseTime = System.currentTimeMillis() - lStart;\nSystem.out.println(\"解密耗时：\" + lUseTime + \"毫秒\");\n}\n}\n```\n# Golang\n``` Golang\npackage main\nimport(\n\"fmt\"\n\"crypto/aes\"\n\"crypto/cipher\"\n\"encoding/base64\"\n\"bytes\"\n)\n\nconst (\nsKey         = \"dde4b1f8a9e6b814\"\nivParameter     = \"dde4b1f8a9e6b814\"\n)\n\n/加密\nfunc PswEncrypt(src string)(string){\nkey := []byte(sKey)\niv := []byte(ivParameter)\n\nresult, err := Aes128Encrypt([]byte(src), key, iv)\nif err != nil {\npanic(err)\n}\nreturn  base64.RawStdEncoding.EncodeToString(result)\n}\n//解密\nfunc PswDecrypt(src string)(string) {\n\nkey := []byte(sKey)\niv := []byte(ivParameter)\n\nvar result []byte\nvar err error\n\nresult,err=base64.RawStdEncoding.DecodeString(src)\nif err != nil {\npanic(err)\n}\norigData, err := Aes128Decrypt(result, key, iv)\nif err != nil {\npanic(err)\n}\nreturn string(origData)\n\n}\nfunc Aes128Encrypt(origData, key []byte,IV []byte) ([]byte, error) {\nif key == nil || len(key) != 16 {\nreturn nil, nil\n}\nif IV != nil && len(IV) != 16 {\nreturn nil, nil\n}\n\nblock, err := aes.NewCipher(key)\nif err != nil {\nreturn nil, err\n}\nblockSize := block.BlockSize()\norigData = PKCS5Padding(origData, blockSize)\nblockMode := cipher.NewCBCEncrypter(block, IV[:blockSize])\ncrypted := make([]byte, len(origData))\n// 根据CryptBlocks方法的说明，如下方式初始化crypted也可以\nblockMode.CryptBlocks(crypted, origData)\nreturn crypted, nil\n}\n\nfunc Aes128Decrypt(crypted, key []byte,IV []byte) ([]byte, error) {\nif key == nil || len(key) != 16 {\nreturn nil, nil\n}\nif IV != nil && len(IV) != 16 {\nreturn nil, nil\n}\n\nblock, err := aes.NewCipher(key)\nif err != nil {\nreturn nil, err\n}\nblockSize := block.BlockSize()\nblockMode := cipher.NewCBCDecrypter(block,IV[:blockSize])\norigData := make([]byte, len(crypted))\nblockMode.CryptBlocks(origData, crypted)\norigData = PKCS5UnPadding(origData)\nreturn origData, nil\n}\n\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte {\npadding := blockSize - len(ciphertext)%blockSize\npadtext := bytes.Repeat([]byte{byte(padding)}, padding)\nreturn append(ciphertext, padtext...)\n}\n\nfunc PKCS5UnPadding(origData []byte) []byte {\nlength := len(origData)\n// 去掉最后一个字节 unpadding 次\nunpadding := int(origData[length-1])\nreturn origData[:(length - unpadding)]\n}\n\nfunc main(){\nencodingString := PswEncrypt(\"123\")\ndecodingString := PswDecrypt(encodingString);\nfmt.Printf(\"AES-128-CBC\\n加密：%s\\n解密：%s\\n\",encodingString,decodingString)\n}\n```\n","source":"_posts/AES-128-CBC Base64加密——OC,Java,Golang联调.md","raw":"---\ntitle: AES-128-CBC Base64加密——OC,Java,Golang联调\ndate: 2018-11-21 02:17:28\ntags:\n    - AES-128-CBC\n    - Objective-C\n    - Java\n    - Golang\n---\n# AES-128-CBC\n这里首先说说AES加密原理\nAES加密算法采用分组密码体制，每个分组数据的长度为128位16个字节，密钥长度可以是128位16个字节、192位或256位，一共有四种加密模式（ECB、CBC、CFB、OFB），我们通常采用需要初始向量IV的CBC模式，初始向量的长度规定是128位16个字节。另外就是Padding，这里面有大坑。。。。先说一下Padding的三种模式PKCS5、PKCS7和NOPADDING。PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。NoPadding是指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。而PKCS5如果正好是16个字节且最后是16的时候则会再填充16个16用来区分，PKC7则是为0时填充16个0。而在iOS的OC方法里压根没提供PKCS5，只有PKCS7更坑的是真正对接时发现iOS上的PKCS7和其他端PKCS5是一样的。。。。所以才有了现在的想法分享一下踩过的坑，具体啥原因恐怕只有苹果自家知道，系统方法是真的坑！Java可以直接用系统方法填好设置结束战斗。。。Go的话padding这块自己写实现其他的系统都能设置。最后说一下密钥长度这里只有iOS是要自己设置好位数再对应位数写密钥，其他平台直接对应位数写密钥即可，所以最好各平台自己在封装下判断密钥长度出事向量长度，不然各端对应起来还是要犯傻。\n<!-- more -->\n# Base64\n下面说一下Base64，这个也是个坑，iOS系统提供的base64可选类型压根就不是已知领域常用的，正常是padding和websafe，padding会填充=，而websafe则会替换\"+\"为\"-\"，\"\\\\\"为\"_\"\n而iOS提供的则是下边的，完全不常用的。。。\n```\nNSDataBase64Encoding64CharacterLineLength      其作用是将生成的Base64字符串按照64个字符长度进行等分换行。  \nNSDataBase64Encoding76CharacterLineLength      其作用是将生成的Base64字符串按照76个字符长度进行等分换行。  \nNSDataBase64EncodingEndLineWithCarriageReturn  其作用是将生成的Base64字符串以回车结束。  \nNSDataBase64EncodingEndLineWithLineFeed        其作用是将生成的Base64字符串以换行结束。  \n```\n基本上GTMBase64用定了，然后还要扩展一下padding设置，原版只是把websafe模式开放了padding设置，内部其实有对应逻辑只需要自己加个方法调用一下即可。下面就是添加的和微改的两个方法\n```\n+(NSString *)stringByEncodingData:(NSData *)data padded:(BOOL)padded{\nNSString *result = nil;\nNSData *converted = [self baseEncode:[data bytes]\nlength:[data length]\ncharset:kBase64EncodeChars\npadded:padded];\nif (converted) {\nresult = [[[NSString alloc] initWithData:converted\nencoding:NSUTF8StringEncoding] autorelease];\n}\nreturn result;\n}\n+(NSData *)decodeString:(NSString *)string {\nNSData *result = nil;\nNSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];\nif (data) {\nresult = [self baseDecode:[data bytes]\nlength:[data length]\ncharset:kBase64DecodeChars\nrequirePadding:NO];\n}\nreturn result;\n}\n```\n至于Java，android开发很爽直接用android.util.base64,里面直接可以设置nopadding和websafe等，而纯Java用java.util.base64就要自己写替换逻辑，具体代码见源码部分\n最后说一下Go直接系统方法提供完美解决\n```\nbase64.StdEncoding\nbase64.URLEncoding        websafe模式\nbase64.RawStdEncoding    nopadding\nbase64.RawURLEncoding    websafe模式nopadding\n```\n# AES-128-CBC +Base64-Nopadding源码\n下面就是3中语言分别实现 AES-128-CBC +Base64-Nopadding，从编码体验和对应上很明显Java最清晰，Go要自己写点东西，OC则是连对应对和正常理解范围内有偏差。\n## OC\n```Objective-C\n#import <Foundation/Foundation.h>\n#import <CommonCrypto/CommonCryptor.h>\n\n@interface NSData (Encryption)\n\n- (NSData *)AES128EncryptWithKey:(NSString *)key Iv:(NSString *)Iv;   //加密\n- (NSData *)AES128DecryptWithKey:(NSString *)key Iv:(NSString *)Iv;   //解密\n\n@end\n\n@implementation NSData (Encryption)\n\n//(key和iv向量这里是16位的) 这里是CBC加密模式，安全性更高\n\n- (NSData *)AES128EncryptWithKey:(NSString *)key Iv:(NSString *)Iv{//加密\n// 'key' should be 32 bytes for AES128, will be null-padded otherwise\nchar keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)\nbzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)\n\n// fetch key data\n[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];\n\n\nchar ivPtr[kCCKeySizeAES128+1];\nmemset(ivPtr, 0, sizeof(ivPtr));\n[Iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];\n\nNSUInteger dataLength = [self length];\n\n//See the doc: For block ciphers, the output size will always be less than or\n//equal to the input size plus the size of one block.\n//That's why we need to add the size of one block here\nsize_t bufferSize = dataLength + kCCBlockSizeAES128;\nvoid *buffer = malloc(bufferSize);\n\nsize_t numBytesEncrypted = 0;\nCCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,\nkeyPtr, kCCKeySizeAES128,\nivPtr /* initialization vector (optional) */,\n[self bytes], dataLength, /* input */\nbuffer, bufferSize, /* output */\n&numBytesEncrypted);\nif (cryptStatus == kCCSuccess) {\n//the returned NSData takes ownership of the buffer and will free it on deallocation\nreturn [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];\n}\n\nfree(buffer); //free the buffer;\nreturn nil;\n}\n\n\n- (NSData *)AES128DecryptWithKey:(NSString *)key Iv:(NSString *)Iv{//解密\nchar keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)\nbzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)\n\n// fetch key data\n[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];\n\nchar ivPtr[kCCKeySizeAES128+1];\nmemset(ivPtr, 0, sizeof(ivPtr));\n[Iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];\n\nNSUInteger dataLength = [self length];\n\n//See the doc: For block ciphers, the output size will always be less than or\n//equal to the input size plus the size of one block.\n//That's why we need to add the size of one block here\nsize_t bufferSize = dataLength + kCCBlockSizeAES128;\nvoid *buffer = malloc(bufferSize);\n\nsize_t numBytesDecrypted = 0;\nCCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,\nkeyPtr, kCCKeySizeAES128,\nivPtr /* initialization vector (optional) */,\n[self bytes], dataLength, /* input */\nbuffer, bufferSize, /* output */\n&numBytesDecrypted);\n\nif (cryptStatus == kCCSuccess) {\n//the returned NSData takes ownership of the buffer and will free it on deallocation\nreturn [NSData dataWithBytesNoCopy:buffer length:numBytesDecrypted];\n}\n\nfree(buffer); //free the buffer;\nreturn nil;\n}\n\n@end\n\n@interface SecurityCore\n+ (NSString*)encryptAESString:(NSString*)string;\n+ (NSString*)decryptAESString:(NSString*)string;\n@end\n\n@implementation SecurityCore\n\n#pragma mark - AES加密\nconst NSString * skey=@\"dde4b1f8a9e6b814\"\nconst NSString * ivParameter =@\"dde4b1f8a9e6b814\"\n\n//将string转成带密码的data\n+(NSString*)encryptAESString:(NSString*)string\n{\n//将nsstring转化为nsdata\nNSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];\n//使用密码对nsdata进行加密\nNSData *encryptedData = [data AES128EncryptWithKey:skey Iv:ivParameter];\nNSString *encryptedString=[GTMBase64 stringByEncodingData:encryptedData padded:NO];\n\nreturn encryptedString;\n}\n\n+ (NSString*)decryptAESString:(NSString*)string{\n\n\n//将nsstring转化为nsdata\nNSData *data = [GTMBase64 decodeString:string];\n\nNSData *decryptData = [data AES128DecryptWithKey:skey Iv:ivParameter];\n\nNSString *str = [[NSString alloc] initWithData:decryptData encoding:NSUTF8StringEncoding];\nreturn [str autorelease];\n}\n\n@end\n\n```\n## Java\n```Java\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport java.util.Base64;\n\n\npublic class SecurityCore {\n/*\n* 加密用的Key 可以用26个字母和数字组成 此处使用AES-128-CBC加密模式，key需要为16位。\n*/\nprivate String sKey        = \"dde4b1f8a9e6b814\";\nprivate String ivParameter = \"dde4b1f8a9e6b814\";\nprivate static SecurityCore instance = null;\n\nprivate SecurityCore() {\n\n}\n\npublic static SecurityCore getInstance() {\nif (instance == null)\ninstance = new SecurityCore();\nreturn instance;\n}\n\npublic static String webSafeBase64StringEncoding(byte[] sSrc,boolean padded) throws Exception {\nString encodeString=Base64.getEncoder().encodeToString(sSrc);// 此处使用BASE64做转码。\n\n//websafe base64\nencodeString=encodeString.replace(\"+\",\"-\");\nencodeString=encodeString.replace(\"/\",\"_\");\n\n//nopadding base64\nif (!padded) {\nif (encodeString.endsWith(\"=\")) {\nencodeString = encodeString.substring(0, encodeString.length() - 1);\nif (encodeString.endsWith(\"=\")) {\nencodeString = encodeString.substring(0, encodeString.length() - 1);\n}\n}\n}\nreturn encodeString;\n}\n\npublic static byte[] webSafeBase64StringDecoding(String sSrc) throws Exception {\n//websafe base64\nsSrc=sSrc.replace(\"-\",\"+\");\nsSrc=sSrc.replace(\"_\",\"/\");\n\nreturn Base64.getDecoder().decode(sSrc);\n}\n\npublic static String base64StringEncoding(byte[] sSrc,boolean padded) throws Exception {\nString encodeString=Base64.getEncoder().encodeToString(sSrc);// 此处使用BASE64做转码。\n\n//nopadding base64\nif (!padded) {\nif (encodeString.endsWith(\"=\")) {\nencodeString = encodeString.substring(0, encodeString.length() - 1);\nif (encodeString.endsWith(\"=\")) {\nencodeString = encodeString.substring(0, encodeString.length() - 1);\n}\n}\n}\nreturn encodeString;\n}\n\npublic static byte[] base64StringDecoding(String sSrc) throws Exception {\nreturn Base64.getDecoder().decode(sSrc);\n}\n\npublic static byte[] AES128CBCStringEncoding(String encData ,String secretKey,String vector) throws Exception {\n\nif(secretKey == null) {\nreturn null;\n}\nif(secretKey.length() != 16) {\nreturn null;\n}\nif (vector != null && vector.length() != 16) {\nreturn null;\n}\nCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nbyte[] raw = secretKey.getBytes();\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nIvParameterSpec iv = new IvParameterSpec(vector.getBytes());// 使用CBC模式，需要一个向量iv，可增加加密算法的强度\ncipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);\nbyte[] encrypted = cipher.doFinal(encData.getBytes(\"utf-8\"));\n\nreturn encrypted;\n}\n\npublic static String AES128CBCStringDecoding(byte[] sSrc,String key,String ivs) throws Exception {\ntry {\nif(key == null) {\nreturn null;\n}\nif(key.length() != 16) {\nreturn null;\n}\nif (ivs != null && ivs.length() != 16) {\nreturn null;\n}\nbyte[] raw = key.getBytes(\"ASCII\");\nSecretKeySpec skeySpec = new SecretKeySpec(raw, \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nIvParameterSpec iv = new IvParameterSpec(ivs.getBytes());\ncipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);\nbyte[] original = cipher.doFinal(sSrc);\nString originalString = new String(original, \"utf-8\");\nreturn originalString;\n} catch (Exception ex) {\nreturn null;\n}\n}\n\n\n// 加密\npublic String encrypt(String sSrc) throws Exception {\ntry {\nString encodeString=base64StringEncoding(AES128CBCStringEncoding(sSrc,sKey,ivParameter),false);\n\nreturn encodeString;\n} catch (Exception ex) {\nreturn null;\n}\n}\n\n// 解密\npublic String decrypt(String sSrc) throws Exception {\ntry {\nString decodeString=AES128CBCStringDecoding(base64StringDecoding(sSrc),sKey,ivParameter);\nreturn decodeString;\n} catch (Exception ex) {\nreturn null;\n}\n}\n\n//test\npublic static void main(String[] args) throws Exception {\n// 需要加密的字串\nString cSrc = \"123\";\n\n// 加密\nlong lStart = System.currentTimeMillis();\nString enString = SecurityCore.getInstance().encrypt(cSrc);\nSystem.out.println(\"加密后的字串是：\" + enString);\n\nlong lUseTime = System.currentTimeMillis() - lStart;\nSystem.out.println(\"加密耗时：\" + lUseTime + \"毫秒\");\n// 解密\nlStart = System.currentTimeMillis();\nString DeString = SecurityCore.getInstance().decrypt(enString);\nSystem.out.println(\"解密后的字串是：\" + DeString);\nlUseTime = System.currentTimeMillis() - lStart;\nSystem.out.println(\"解密耗时：\" + lUseTime + \"毫秒\");\n}\n}\n```\n# Golang\n``` Golang\npackage main\nimport(\n\"fmt\"\n\"crypto/aes\"\n\"crypto/cipher\"\n\"encoding/base64\"\n\"bytes\"\n)\n\nconst (\nsKey         = \"dde4b1f8a9e6b814\"\nivParameter     = \"dde4b1f8a9e6b814\"\n)\n\n/加密\nfunc PswEncrypt(src string)(string){\nkey := []byte(sKey)\niv := []byte(ivParameter)\n\nresult, err := Aes128Encrypt([]byte(src), key, iv)\nif err != nil {\npanic(err)\n}\nreturn  base64.RawStdEncoding.EncodeToString(result)\n}\n//解密\nfunc PswDecrypt(src string)(string) {\n\nkey := []byte(sKey)\niv := []byte(ivParameter)\n\nvar result []byte\nvar err error\n\nresult,err=base64.RawStdEncoding.DecodeString(src)\nif err != nil {\npanic(err)\n}\norigData, err := Aes128Decrypt(result, key, iv)\nif err != nil {\npanic(err)\n}\nreturn string(origData)\n\n}\nfunc Aes128Encrypt(origData, key []byte,IV []byte) ([]byte, error) {\nif key == nil || len(key) != 16 {\nreturn nil, nil\n}\nif IV != nil && len(IV) != 16 {\nreturn nil, nil\n}\n\nblock, err := aes.NewCipher(key)\nif err != nil {\nreturn nil, err\n}\nblockSize := block.BlockSize()\norigData = PKCS5Padding(origData, blockSize)\nblockMode := cipher.NewCBCEncrypter(block, IV[:blockSize])\ncrypted := make([]byte, len(origData))\n// 根据CryptBlocks方法的说明，如下方式初始化crypted也可以\nblockMode.CryptBlocks(crypted, origData)\nreturn crypted, nil\n}\n\nfunc Aes128Decrypt(crypted, key []byte,IV []byte) ([]byte, error) {\nif key == nil || len(key) != 16 {\nreturn nil, nil\n}\nif IV != nil && len(IV) != 16 {\nreturn nil, nil\n}\n\nblock, err := aes.NewCipher(key)\nif err != nil {\nreturn nil, err\n}\nblockSize := block.BlockSize()\nblockMode := cipher.NewCBCDecrypter(block,IV[:blockSize])\norigData := make([]byte, len(crypted))\nblockMode.CryptBlocks(origData, crypted)\norigData = PKCS5UnPadding(origData)\nreturn origData, nil\n}\n\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte {\npadding := blockSize - len(ciphertext)%blockSize\npadtext := bytes.Repeat([]byte{byte(padding)}, padding)\nreturn append(ciphertext, padtext...)\n}\n\nfunc PKCS5UnPadding(origData []byte) []byte {\nlength := len(origData)\n// 去掉最后一个字节 unpadding 次\nunpadding := int(origData[length-1])\nreturn origData[:(length - unpadding)]\n}\n\nfunc main(){\nencodingString := PswEncrypt(\"123\")\ndecodingString := PswDecrypt(encodingString);\nfmt.Printf(\"AES-128-CBC\\n加密：%s\\n解密：%s\\n\",encodingString,decodingString)\n}\n```\n","slug":"AES-128-CBC Base64加密——OC,Java,Golang联调","published":1,"updated":"2021-07-08T09:20:31.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfql0005nhs6ahxqp054","content":"<h1 id=\"AES-128-CBC\"><a href=\"#AES-128-CBC\" class=\"headerlink\" title=\"AES-128-CBC\"></a>AES-128-CBC</h1><p>这里首先说说AES加密原理<br>AES加密算法采用分组密码体制，每个分组数据的长度为128位16个字节，密钥长度可以是128位16个字节、192位或256位，一共有四种加密模式（ECB、CBC、CFB、OFB），我们通常采用需要初始向量IV的CBC模式，初始向量的长度规定是128位16个字节。另外就是Padding，这里面有大坑。。。。先说一下Padding的三种模式PKCS5、PKCS7和NOPADDING。PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。NoPadding是指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。而PKCS5如果正好是16个字节且最后是16的时候则会再填充16个16用来区分，PKC7则是为0时填充16个0。而在iOS的OC方法里压根没提供PKCS5，只有PKCS7更坑的是真正对接时发现iOS上的PKCS7和其他端PKCS5是一样的。。。。所以才有了现在的想法分享一下踩过的坑，具体啥原因恐怕只有苹果自家知道，系统方法是真的坑！Java可以直接用系统方法填好设置结束战斗。。。Go的话padding这块自己写实现其他的系统都能设置。最后说一下密钥长度这里只有iOS是要自己设置好位数再对应位数写密钥，其他平台直接对应位数写密钥即可，所以最好各平台自己在封装下判断密钥长度出事向量长度，不然各端对应起来还是要犯傻。<br><a id=\"more\"></a></p>\n<h1 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h1><p>下面说一下Base64，这个也是个坑，iOS系统提供的base64可选类型压根就不是已知领域常用的，正常是padding和websafe，padding会填充=，而websafe则会替换”+”为”-“，”\\“为”_”<br>而iOS提供的则是下边的，完全不常用的。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDataBase64Encoding64CharacterLineLength      其作用是将生成的Base64字符串按照64个字符长度进行等分换行。  </span><br><span class=\"line\">NSDataBase64Encoding76CharacterLineLength      其作用是将生成的Base64字符串按照76个字符长度进行等分换行。  </span><br><span class=\"line\">NSDataBase64EncodingEndLineWithCarriageReturn  其作用是将生成的Base64字符串以回车结束。  </span><br><span class=\"line\">NSDataBase64EncodingEndLineWithLineFeed        其作用是将生成的Base64字符串以换行结束。</span><br></pre></td></tr></table></figure></p>\n<p>基本上GTMBase64用定了，然后还要扩展一下padding设置，原版只是把websafe模式开放了padding设置，内部其实有对应逻辑只需要自己加个方法调用一下即可。下面就是添加的和微改的两个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(NSString *)stringByEncodingData:(NSData *)data padded:(BOOL)padded&#123;</span><br><span class=\"line\">NSString *result = nil;</span><br><span class=\"line\">NSData *converted = [self baseEncode:[data bytes]</span><br><span class=\"line\">length:[data length]</span><br><span class=\"line\">charset:kBase64EncodeChars</span><br><span class=\"line\">padded:padded];</span><br><span class=\"line\">if (converted) &#123;</span><br><span class=\"line\">result = [[[NSString alloc] initWithData:converted</span><br><span class=\"line\">encoding:NSUTF8StringEncoding] autorelease];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+(NSData *)decodeString:(NSString *)string &#123;</span><br><span class=\"line\">NSData *result = nil;</span><br><span class=\"line\">NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">if (data) &#123;</span><br><span class=\"line\">result = [self baseDecode:[data bytes]</span><br><span class=\"line\">length:[data length]</span><br><span class=\"line\">charset:kBase64DecodeChars</span><br><span class=\"line\">requirePadding:NO];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至于Java，android开发很爽直接用android.util.base64,里面直接可以设置nopadding和websafe等，而纯Java用java.util.base64就要自己写替换逻辑，具体代码见源码部分<br>最后说一下Go直接系统方法提供完美解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base64.StdEncoding</span><br><span class=\"line\">base64.URLEncoding        websafe模式</span><br><span class=\"line\">base64.RawStdEncoding    nopadding</span><br><span class=\"line\">base64.RawURLEncoding    websafe模式nopadding</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"AES-128-CBC-Base64-Nopadding源码\"><a href=\"#AES-128-CBC-Base64-Nopadding源码\" class=\"headerlink\" title=\"AES-128-CBC +Base64-Nopadding源码\"></a>AES-128-CBC +Base64-Nopadding源码</h1><p>下面就是3中语言分别实现 AES-128-CBC +Base64-Nopadding，从编码体验和对应上很明显Java最清晰，Go要自己写点东西，OC则是连对应对和正常理解范围内有偏差。</p>\n<h2 id=\"OC\"><a href=\"#OC\" class=\"headerlink\" title=\"OC\"></a>OC</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;CommonCrypto/CommonCryptor.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSData (Encryption)</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSData *)AES128EncryptWithKey:(NSString *)key Iv:(NSString *)Iv;   //加密</span><br><span class=\"line\">- (NSData *)AES128DecryptWithKey:(NSString *)key Iv:(NSString *)Iv;   //解密</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation NSData (Encryption)</span><br><span class=\"line\"></span><br><span class=\"line\">//(key和iv向量这里是16位的) 这里是CBC加密模式，安全性更高</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSData *)AES128EncryptWithKey:(NSString *)key Iv:(NSString *)Iv&#123;//加密</span><br><span class=\"line\">// &apos;key&apos; should be 32 bytes for AES128, will be null-padded otherwise</span><br><span class=\"line\">char keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)</span><br><span class=\"line\">bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)</span><br><span class=\"line\"></span><br><span class=\"line\">// fetch key data</span><br><span class=\"line\">[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char ivPtr[kCCKeySizeAES128+1];</span><br><span class=\"line\">memset(ivPtr, 0, sizeof(ivPtr));</span><br><span class=\"line\">[Iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];</span><br><span class=\"line\"></span><br><span class=\"line\">NSUInteger dataLength = [self length];</span><br><span class=\"line\"></span><br><span class=\"line\">//See the doc: For block ciphers, the output size will always be less than or</span><br><span class=\"line\">//equal to the input size plus the size of one block.</span><br><span class=\"line\">//That&apos;s why we need to add the size of one block here</span><br><span class=\"line\">size_t bufferSize = dataLength + kCCBlockSizeAES128;</span><br><span class=\"line\">void *buffer = malloc(bufferSize);</span><br><span class=\"line\"></span><br><span class=\"line\">size_t numBytesEncrypted = 0;</span><br><span class=\"line\">CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,</span><br><span class=\"line\">keyPtr, kCCKeySizeAES128,</span><br><span class=\"line\">ivPtr /* initialization vector (optional) */,</span><br><span class=\"line\">[self bytes], dataLength, /* input */</span><br><span class=\"line\">buffer, bufferSize, /* output */</span><br><span class=\"line\">&amp;numBytesEncrypted);</span><br><span class=\"line\">if (cryptStatus == kCCSuccess) &#123;</span><br><span class=\"line\">//the returned NSData takes ownership of the buffer and will free it on deallocation</span><br><span class=\"line\">return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">free(buffer); //free the buffer;</span><br><span class=\"line\">return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (NSData *)AES128DecryptWithKey:(NSString *)key Iv:(NSString *)Iv&#123;//解密</span><br><span class=\"line\">char keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)</span><br><span class=\"line\">bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)</span><br><span class=\"line\"></span><br><span class=\"line\">// fetch key data</span><br><span class=\"line\">[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];</span><br><span class=\"line\"></span><br><span class=\"line\">char ivPtr[kCCKeySizeAES128+1];</span><br><span class=\"line\">memset(ivPtr, 0, sizeof(ivPtr));</span><br><span class=\"line\">[Iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];</span><br><span class=\"line\"></span><br><span class=\"line\">NSUInteger dataLength = [self length];</span><br><span class=\"line\"></span><br><span class=\"line\">//See the doc: For block ciphers, the output size will always be less than or</span><br><span class=\"line\">//equal to the input size plus the size of one block.</span><br><span class=\"line\">//That&apos;s why we need to add the size of one block here</span><br><span class=\"line\">size_t bufferSize = dataLength + kCCBlockSizeAES128;</span><br><span class=\"line\">void *buffer = malloc(bufferSize);</span><br><span class=\"line\"></span><br><span class=\"line\">size_t numBytesDecrypted = 0;</span><br><span class=\"line\">CCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,</span><br><span class=\"line\">keyPtr, kCCKeySizeAES128,</span><br><span class=\"line\">ivPtr /* initialization vector (optional) */,</span><br><span class=\"line\">[self bytes], dataLength, /* input */</span><br><span class=\"line\">buffer, bufferSize, /* output */</span><br><span class=\"line\">&amp;numBytesDecrypted);</span><br><span class=\"line\"></span><br><span class=\"line\">if (cryptStatus == kCCSuccess) &#123;</span><br><span class=\"line\">//the returned NSData takes ownership of the buffer and will free it on deallocation</span><br><span class=\"line\">return [NSData dataWithBytesNoCopy:buffer length:numBytesDecrypted];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">free(buffer); //free the buffer;</span><br><span class=\"line\">return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface SecurityCore</span><br><span class=\"line\">+ (NSString*)encryptAESString:(NSString*)string;</span><br><span class=\"line\">+ (NSString*)decryptAESString:(NSString*)string;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation SecurityCore</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - AES加密</span><br><span class=\"line\">const NSString * skey=@&quot;dde4b1f8a9e6b814&quot;</span><br><span class=\"line\">const NSString * ivParameter =@&quot;dde4b1f8a9e6b814&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//将string转成带密码的data</span><br><span class=\"line\">+(NSString*)encryptAESString:(NSString*)string</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//将nsstring转化为nsdata</span><br><span class=\"line\">NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">//使用密码对nsdata进行加密</span><br><span class=\"line\">NSData *encryptedData = [data AES128EncryptWithKey:skey Iv:ivParameter];</span><br><span class=\"line\">NSString *encryptedString=[GTMBase64 stringByEncodingData:encryptedData padded:NO];</span><br><span class=\"line\"></span><br><span class=\"line\">return encryptedString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSString*)decryptAESString:(NSString*)string&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//将nsstring转化为nsdata</span><br><span class=\"line\">NSData *data = [GTMBase64 decodeString:string];</span><br><span class=\"line\"></span><br><span class=\"line\">NSData *decryptData = [data AES128DecryptWithKey:skey Iv:ivParameter];</span><br><span class=\"line\"></span><br><span class=\"line\">NSString *str = [[NSString alloc] initWithData:decryptData encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">return [str autorelease];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Cipher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityCore</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 加密用的Key 可以用26个字母和数字组成 此处使用AES-128-CBC加密模式，key需要为16位。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String sKey        = <span class=\"string\">\"dde4b1f8a9e6b814\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String ivParameter = <span class=\"string\">\"dde4b1f8a9e6b814\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SecurityCore instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SecurityCore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SecurityCore <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">instance = <span class=\"keyword\">new</span> SecurityCore();</span><br><span class=\"line\"><span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">webSafeBase64StringEncoding</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] sSrc,<span class=\"keyword\">boolean</span> padded)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">String encodeString=Base64.getEncoder().encodeToString(sSrc);<span class=\"comment\">// 此处使用BASE64做转码。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//websafe base64</span></span><br><span class=\"line\">encodeString=encodeString.replace(<span class=\"string\">\"+\"</span>,<span class=\"string\">\"-\"</span>);</span><br><span class=\"line\">encodeString=encodeString.replace(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"_\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//nopadding base64</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!padded) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (encodeString.endsWith(<span class=\"string\">\"=\"</span>)) &#123;</span><br><span class=\"line\">encodeString = encodeString.substring(<span class=\"number\">0</span>, encodeString.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (encodeString.endsWith(<span class=\"string\">\"=\"</span>)) &#123;</span><br><span class=\"line\">encodeString = encodeString.substring(<span class=\"number\">0</span>, encodeString.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> encodeString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] webSafeBase64StringDecoding(String sSrc) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"comment\">//websafe base64</span></span><br><span class=\"line\">sSrc=sSrc.replace(<span class=\"string\">\"-\"</span>,<span class=\"string\">\"+\"</span>);</span><br><span class=\"line\">sSrc=sSrc.replace(<span class=\"string\">\"_\"</span>,<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> Base64.getDecoder().decode(sSrc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">base64StringEncoding</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] sSrc,<span class=\"keyword\">boolean</span> padded)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">String encodeString=Base64.getEncoder().encodeToString(sSrc);<span class=\"comment\">// 此处使用BASE64做转码。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//nopadding base64</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!padded) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (encodeString.endsWith(<span class=\"string\">\"=\"</span>)) &#123;</span><br><span class=\"line\">encodeString = encodeString.substring(<span class=\"number\">0</span>, encodeString.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (encodeString.endsWith(<span class=\"string\">\"=\"</span>)) &#123;</span><br><span class=\"line\">encodeString = encodeString.substring(<span class=\"number\">0</span>, encodeString.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> encodeString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] base64StringDecoding(String sSrc) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> Base64.getDecoder().decode(sSrc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] AES128CBCStringEncoding(String encData ,String secretKey,String vector) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(secretKey == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(secretKey.length() != <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (vector != <span class=\"keyword\">null</span> &amp;&amp; vector.length() != <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES/CBC/PKCS5Padding\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] raw = secretKey.getBytes();</span><br><span class=\"line\">SecretKeySpec skeySpec = <span class=\"keyword\">new</span> SecretKeySpec(raw, <span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\">IvParameterSpec iv = <span class=\"keyword\">new</span> IvParameterSpec(vector.getBytes());<span class=\"comment\">// 使用CBC模式，需要一个向量iv，可增加加密算法的强度</span></span><br><span class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] encrypted = cipher.doFinal(encData.getBytes(<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> encrypted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">AES128CBCStringDecoding</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] sSrc,String key,String ivs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(key.length() != <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ivs != <span class=\"keyword\">null</span> &amp;&amp; ivs.length() != <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] raw = key.getBytes(<span class=\"string\">\"ASCII\"</span>);</span><br><span class=\"line\">SecretKeySpec skeySpec = <span class=\"keyword\">new</span> SecretKeySpec(raw, <span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES/CBC/PKCS5Padding\"</span>);</span><br><span class=\"line\">IvParameterSpec iv = <span class=\"keyword\">new</span> IvParameterSpec(ivs.getBytes());</span><br><span class=\"line\">cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] original = cipher.doFinal(sSrc);</span><br><span class=\"line\">String originalString = <span class=\"keyword\">new</span> String(original, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> originalString;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">encrypt</span><span class=\"params\">(String sSrc)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">String encodeString=base64StringEncoding(AES128CBCStringEncoding(sSrc,sKey,ivParameter),<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> encodeString;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">decrypt</span><span class=\"params\">(String sSrc)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">String decodeString=AES128CBCStringDecoding(base64StringDecoding(sSrc),sKey,ivParameter);</span><br><span class=\"line\"><span class=\"keyword\">return</span> decodeString;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 需要加密的字串</span></span><br><span class=\"line\">String cSrc = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> lStart = System.currentTimeMillis();</span><br><span class=\"line\">String enString = SecurityCore.getInstance().encrypt(cSrc);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"加密后的字串是：\"</span> + enString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> lUseTime = System.currentTimeMillis() - lStart;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"加密耗时：\"</span> + lUseTime + <span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 解密</span></span><br><span class=\"line\">lStart = System.currentTimeMillis();</span><br><span class=\"line\">String DeString = SecurityCore.getInstance().decrypt(enString);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"解密后的字串是：\"</span> + DeString);</span><br><span class=\"line\">lUseTime = System.currentTimeMillis() - lStart;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"解密耗时：\"</span> + lUseTime + <span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h1><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\"><span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"string\">\"crypto/aes\"</span></span><br><span class=\"line\"><span class=\"string\">\"crypto/cipher\"</span></span><br><span class=\"line\"><span class=\"string\">\"encoding/base64\"</span></span><br><span class=\"line\"><span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">sKey         = <span class=\"string\">\"dde4b1f8a9e6b814\"</span></span><br><span class=\"line\">ivParameter     = <span class=\"string\">\"dde4b1f8a9e6b814\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">/加密</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PswEncrypt</span><span class=\"params\">(src <span class=\"keyword\">string</span>)</span><span class=\"params\">(<span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">key := []<span class=\"keyword\">byte</span>(sKey)</span><br><span class=\"line\">iv := []<span class=\"keyword\">byte</span>(ivParameter)</span><br><span class=\"line\"></span><br><span class=\"line\">result, err := Aes128Encrypt([]<span class=\"keyword\">byte</span>(src), key, iv)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span>  base64.RawStdEncoding.EncodeToString(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PswDecrypt</span><span class=\"params\">(src <span class=\"keyword\">string</span>)</span><span class=\"params\">(<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">key := []<span class=\"keyword\">byte</span>(sKey)</span><br><span class=\"line\">iv := []<span class=\"keyword\">byte</span>(ivParameter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result []<span class=\"keyword\">byte</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> err error</span><br><span class=\"line\"></span><br><span class=\"line\">result,err=base64.RawStdEncoding.DecodeString(src)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">origData, err := Aes128Decrypt(result, key, iv)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(origData)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Aes128Encrypt</span><span class=\"params\">(origData, key []<span class=\"keyword\">byte</span>,IV []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> key == <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(key) != <span class=\"number\">16</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> IV != <span class=\"literal\">nil</span> &amp;&amp; <span class=\"built_in\">len</span>(IV) != <span class=\"number\">16</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">block, err := aes.NewCipher(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">blockSize := block.BlockSize()</span><br><span class=\"line\">origData = PKCS5Padding(origData, blockSize)</span><br><span class=\"line\">blockMode := cipher.NewCBCEncrypter(block, IV[:blockSize])</span><br><span class=\"line\">crypted := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(origData))</span><br><span class=\"line\"><span class=\"comment\">// 根据CryptBlocks方法的说明，如下方式初始化crypted也可以</span></span><br><span class=\"line\">blockMode.CryptBlocks(crypted, origData)</span><br><span class=\"line\"><span class=\"keyword\">return</span> crypted, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Aes128Decrypt</span><span class=\"params\">(crypted, key []<span class=\"keyword\">byte</span>,IV []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> key == <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(key) != <span class=\"number\">16</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> IV != <span class=\"literal\">nil</span> &amp;&amp; <span class=\"built_in\">len</span>(IV) != <span class=\"number\">16</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">block, err := aes.NewCipher(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">blockSize := block.BlockSize()</span><br><span class=\"line\">blockMode := cipher.NewCBCDecrypter(block,IV[:blockSize])</span><br><span class=\"line\">origData := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(crypted))</span><br><span class=\"line\">blockMode.CryptBlocks(origData, crypted)</span><br><span class=\"line\">origData = PKCS5UnPadding(origData)</span><br><span class=\"line\"><span class=\"keyword\">return</span> origData, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PKCS5Padding</span><span class=\"params\">(ciphertext []<span class=\"keyword\">byte</span>, blockSize <span class=\"keyword\">int</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">padding := blockSize - <span class=\"built_in\">len</span>(ciphertext)%blockSize</span><br><span class=\"line\">padtext := bytes.Repeat([]<span class=\"keyword\">byte</span>&#123;<span class=\"keyword\">byte</span>(padding)&#125;, padding)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">append</span>(ciphertext, padtext...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PKCS5UnPadding</span><span class=\"params\">(origData []<span class=\"keyword\">byte</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">length := <span class=\"built_in\">len</span>(origData)</span><br><span class=\"line\"><span class=\"comment\">// 去掉最后一个字节 unpadding 次</span></span><br><span class=\"line\">unpadding := <span class=\"keyword\">int</span>(origData[length<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"keyword\">return</span> origData[:(length - unpadding)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">encodingString := PswEncrypt(<span class=\"string\">\"123\"</span>)</span><br><span class=\"line\">decodingString := PswDecrypt(encodingString);</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"AES-128-CBC\\n加密：%s\\n解密：%s\\n\"</span>,encodingString,decodingString)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"AES-128-CBC\"><a href=\"#AES-128-CBC\" class=\"headerlink\" title=\"AES-128-CBC\"></a>AES-128-CBC</h1><p>这里首先说说AES加密原理<br>AES加密算法采用分组密码体制，每个分组数据的长度为128位16个字节，密钥长度可以是128位16个字节、192位或256位，一共有四种加密模式（ECB、CBC、CFB、OFB），我们通常采用需要初始向量IV的CBC模式，初始向量的长度规定是128位16个字节。另外就是Padding，这里面有大坑。。。。先说一下Padding的三种模式PKCS5、PKCS7和NOPADDING。PKCS5是指分组数据缺少几个字节，就在数据的末尾填充几个字节的几，比如缺少5个字节，就在末尾填充5个字节的5。PKCS7是指分组数据缺少几个字节，就在数据的末尾填充几个字节的0，比如缺少7个字节，就在末尾填充7个字节的0。NoPadding是指不需要填充，也就是说数据的发送方肯定会保证最后一段数据也正好是16个字节。而PKCS5如果正好是16个字节且最后是16的时候则会再填充16个16用来区分，PKC7则是为0时填充16个0。而在iOS的OC方法里压根没提供PKCS5，只有PKCS7更坑的是真正对接时发现iOS上的PKCS7和其他端PKCS5是一样的。。。。所以才有了现在的想法分享一下踩过的坑，具体啥原因恐怕只有苹果自家知道，系统方法是真的坑！Java可以直接用系统方法填好设置结束战斗。。。Go的话padding这块自己写实现其他的系统都能设置。最后说一下密钥长度这里只有iOS是要自己设置好位数再对应位数写密钥，其他平台直接对应位数写密钥即可，所以最好各平台自己在封装下判断密钥长度出事向量长度，不然各端对应起来还是要犯傻。<br>","more":"</p>\n<h1 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h1><p>下面说一下Base64，这个也是个坑，iOS系统提供的base64可选类型压根就不是已知领域常用的，正常是padding和websafe，padding会填充=，而websafe则会替换”+”为”-“，”\\“为”_”<br>而iOS提供的则是下边的，完全不常用的。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDataBase64Encoding64CharacterLineLength      其作用是将生成的Base64字符串按照64个字符长度进行等分换行。  </span><br><span class=\"line\">NSDataBase64Encoding76CharacterLineLength      其作用是将生成的Base64字符串按照76个字符长度进行等分换行。  </span><br><span class=\"line\">NSDataBase64EncodingEndLineWithCarriageReturn  其作用是将生成的Base64字符串以回车结束。  </span><br><span class=\"line\">NSDataBase64EncodingEndLineWithLineFeed        其作用是将生成的Base64字符串以换行结束。</span><br></pre></td></tr></table></figure></p>\n<p>基本上GTMBase64用定了，然后还要扩展一下padding设置，原版只是把websafe模式开放了padding设置，内部其实有对应逻辑只需要自己加个方法调用一下即可。下面就是添加的和微改的两个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(NSString *)stringByEncodingData:(NSData *)data padded:(BOOL)padded&#123;</span><br><span class=\"line\">NSString *result = nil;</span><br><span class=\"line\">NSData *converted = [self baseEncode:[data bytes]</span><br><span class=\"line\">length:[data length]</span><br><span class=\"line\">charset:kBase64EncodeChars</span><br><span class=\"line\">padded:padded];</span><br><span class=\"line\">if (converted) &#123;</span><br><span class=\"line\">result = [[[NSString alloc] initWithData:converted</span><br><span class=\"line\">encoding:NSUTF8StringEncoding] autorelease];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+(NSData *)decodeString:(NSString *)string &#123;</span><br><span class=\"line\">NSData *result = nil;</span><br><span class=\"line\">NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">if (data) &#123;</span><br><span class=\"line\">result = [self baseDecode:[data bytes]</span><br><span class=\"line\">length:[data length]</span><br><span class=\"line\">charset:kBase64DecodeChars</span><br><span class=\"line\">requirePadding:NO];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至于Java，android开发很爽直接用android.util.base64,里面直接可以设置nopadding和websafe等，而纯Java用java.util.base64就要自己写替换逻辑，具体代码见源码部分<br>最后说一下Go直接系统方法提供完美解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base64.StdEncoding</span><br><span class=\"line\">base64.URLEncoding        websafe模式</span><br><span class=\"line\">base64.RawStdEncoding    nopadding</span><br><span class=\"line\">base64.RawURLEncoding    websafe模式nopadding</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"AES-128-CBC-Base64-Nopadding源码\"><a href=\"#AES-128-CBC-Base64-Nopadding源码\" class=\"headerlink\" title=\"AES-128-CBC +Base64-Nopadding源码\"></a>AES-128-CBC +Base64-Nopadding源码</h1><p>下面就是3中语言分别实现 AES-128-CBC +Base64-Nopadding，从编码体验和对应上很明显Java最清晰，Go要自己写点东西，OC则是连对应对和正常理解范围内有偏差。</p>\n<h2 id=\"OC\"><a href=\"#OC\" class=\"headerlink\" title=\"OC\"></a>OC</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;CommonCrypto/CommonCryptor.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSData (Encryption)</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSData *)AES128EncryptWithKey:(NSString *)key Iv:(NSString *)Iv;   //加密</span><br><span class=\"line\">- (NSData *)AES128DecryptWithKey:(NSString *)key Iv:(NSString *)Iv;   //解密</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation NSData (Encryption)</span><br><span class=\"line\"></span><br><span class=\"line\">//(key和iv向量这里是16位的) 这里是CBC加密模式，安全性更高</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSData *)AES128EncryptWithKey:(NSString *)key Iv:(NSString *)Iv&#123;//加密</span><br><span class=\"line\">// &apos;key&apos; should be 32 bytes for AES128, will be null-padded otherwise</span><br><span class=\"line\">char keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)</span><br><span class=\"line\">bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)</span><br><span class=\"line\"></span><br><span class=\"line\">// fetch key data</span><br><span class=\"line\">[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char ivPtr[kCCKeySizeAES128+1];</span><br><span class=\"line\">memset(ivPtr, 0, sizeof(ivPtr));</span><br><span class=\"line\">[Iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];</span><br><span class=\"line\"></span><br><span class=\"line\">NSUInteger dataLength = [self length];</span><br><span class=\"line\"></span><br><span class=\"line\">//See the doc: For block ciphers, the output size will always be less than or</span><br><span class=\"line\">//equal to the input size plus the size of one block.</span><br><span class=\"line\">//That&apos;s why we need to add the size of one block here</span><br><span class=\"line\">size_t bufferSize = dataLength + kCCBlockSizeAES128;</span><br><span class=\"line\">void *buffer = malloc(bufferSize);</span><br><span class=\"line\"></span><br><span class=\"line\">size_t numBytesEncrypted = 0;</span><br><span class=\"line\">CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,</span><br><span class=\"line\">keyPtr, kCCKeySizeAES128,</span><br><span class=\"line\">ivPtr /* initialization vector (optional) */,</span><br><span class=\"line\">[self bytes], dataLength, /* input */</span><br><span class=\"line\">buffer, bufferSize, /* output */</span><br><span class=\"line\">&amp;numBytesEncrypted);</span><br><span class=\"line\">if (cryptStatus == kCCSuccess) &#123;</span><br><span class=\"line\">//the returned NSData takes ownership of the buffer and will free it on deallocation</span><br><span class=\"line\">return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">free(buffer); //free the buffer;</span><br><span class=\"line\">return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (NSData *)AES128DecryptWithKey:(NSString *)key Iv:(NSString *)Iv&#123;//解密</span><br><span class=\"line\">char keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)</span><br><span class=\"line\">bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)</span><br><span class=\"line\"></span><br><span class=\"line\">// fetch key data</span><br><span class=\"line\">[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];</span><br><span class=\"line\"></span><br><span class=\"line\">char ivPtr[kCCKeySizeAES128+1];</span><br><span class=\"line\">memset(ivPtr, 0, sizeof(ivPtr));</span><br><span class=\"line\">[Iv getCString:ivPtr maxLength:sizeof(ivPtr) encoding:NSUTF8StringEncoding];</span><br><span class=\"line\"></span><br><span class=\"line\">NSUInteger dataLength = [self length];</span><br><span class=\"line\"></span><br><span class=\"line\">//See the doc: For block ciphers, the output size will always be less than or</span><br><span class=\"line\">//equal to the input size plus the size of one block.</span><br><span class=\"line\">//That&apos;s why we need to add the size of one block here</span><br><span class=\"line\">size_t bufferSize = dataLength + kCCBlockSizeAES128;</span><br><span class=\"line\">void *buffer = malloc(bufferSize);</span><br><span class=\"line\"></span><br><span class=\"line\">size_t numBytesDecrypted = 0;</span><br><span class=\"line\">CCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,</span><br><span class=\"line\">keyPtr, kCCKeySizeAES128,</span><br><span class=\"line\">ivPtr /* initialization vector (optional) */,</span><br><span class=\"line\">[self bytes], dataLength, /* input */</span><br><span class=\"line\">buffer, bufferSize, /* output */</span><br><span class=\"line\">&amp;numBytesDecrypted);</span><br><span class=\"line\"></span><br><span class=\"line\">if (cryptStatus == kCCSuccess) &#123;</span><br><span class=\"line\">//the returned NSData takes ownership of the buffer and will free it on deallocation</span><br><span class=\"line\">return [NSData dataWithBytesNoCopy:buffer length:numBytesDecrypted];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">free(buffer); //free the buffer;</span><br><span class=\"line\">return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface SecurityCore</span><br><span class=\"line\">+ (NSString*)encryptAESString:(NSString*)string;</span><br><span class=\"line\">+ (NSString*)decryptAESString:(NSString*)string;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation SecurityCore</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - AES加密</span><br><span class=\"line\">const NSString * skey=@&quot;dde4b1f8a9e6b814&quot;</span><br><span class=\"line\">const NSString * ivParameter =@&quot;dde4b1f8a9e6b814&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//将string转成带密码的data</span><br><span class=\"line\">+(NSString*)encryptAESString:(NSString*)string</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//将nsstring转化为nsdata</span><br><span class=\"line\">NSData *data = [string dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class=\"line\">//使用密码对nsdata进行加密</span><br><span class=\"line\">NSData *encryptedData = [data AES128EncryptWithKey:skey Iv:ivParameter];</span><br><span class=\"line\">NSString *encryptedString=[GTMBase64 stringByEncodingData:encryptedData padded:NO];</span><br><span class=\"line\"></span><br><span class=\"line\">return encryptedString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSString*)decryptAESString:(NSString*)string&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//将nsstring转化为nsdata</span><br><span class=\"line\">NSData *data = [GTMBase64 decodeString:string];</span><br><span class=\"line\"></span><br><span class=\"line\">NSData *decryptData = [data AES128DecryptWithKey:skey Iv:ivParameter];</span><br><span class=\"line\"></span><br><span class=\"line\">NSString *str = [[NSString alloc] initWithData:decryptData encoding:NSUTF8StringEncoding];</span><br><span class=\"line\">return [str autorelease];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Cipher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityCore</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 加密用的Key 可以用26个字母和数字组成 此处使用AES-128-CBC加密模式，key需要为16位。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String sKey        = <span class=\"string\">\"dde4b1f8a9e6b814\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String ivParameter = <span class=\"string\">\"dde4b1f8a9e6b814\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SecurityCore instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SecurityCore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SecurityCore <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">instance = <span class=\"keyword\">new</span> SecurityCore();</span><br><span class=\"line\"><span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">webSafeBase64StringEncoding</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] sSrc,<span class=\"keyword\">boolean</span> padded)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">String encodeString=Base64.getEncoder().encodeToString(sSrc);<span class=\"comment\">// 此处使用BASE64做转码。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//websafe base64</span></span><br><span class=\"line\">encodeString=encodeString.replace(<span class=\"string\">\"+\"</span>,<span class=\"string\">\"-\"</span>);</span><br><span class=\"line\">encodeString=encodeString.replace(<span class=\"string\">\"/\"</span>,<span class=\"string\">\"_\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//nopadding base64</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!padded) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (encodeString.endsWith(<span class=\"string\">\"=\"</span>)) &#123;</span><br><span class=\"line\">encodeString = encodeString.substring(<span class=\"number\">0</span>, encodeString.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (encodeString.endsWith(<span class=\"string\">\"=\"</span>)) &#123;</span><br><span class=\"line\">encodeString = encodeString.substring(<span class=\"number\">0</span>, encodeString.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> encodeString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] webSafeBase64StringDecoding(String sSrc) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"comment\">//websafe base64</span></span><br><span class=\"line\">sSrc=sSrc.replace(<span class=\"string\">\"-\"</span>,<span class=\"string\">\"+\"</span>);</span><br><span class=\"line\">sSrc=sSrc.replace(<span class=\"string\">\"_\"</span>,<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> Base64.getDecoder().decode(sSrc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">base64StringEncoding</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] sSrc,<span class=\"keyword\">boolean</span> padded)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">String encodeString=Base64.getEncoder().encodeToString(sSrc);<span class=\"comment\">// 此处使用BASE64做转码。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//nopadding base64</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!padded) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (encodeString.endsWith(<span class=\"string\">\"=\"</span>)) &#123;</span><br><span class=\"line\">encodeString = encodeString.substring(<span class=\"number\">0</span>, encodeString.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (encodeString.endsWith(<span class=\"string\">\"=\"</span>)) &#123;</span><br><span class=\"line\">encodeString = encodeString.substring(<span class=\"number\">0</span>, encodeString.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> encodeString;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] base64StringDecoding(String sSrc) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> Base64.getDecoder().decode(sSrc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] AES128CBCStringEncoding(String encData ,String secretKey,String vector) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(secretKey == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(secretKey.length() != <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (vector != <span class=\"keyword\">null</span> &amp;&amp; vector.length() != <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES/CBC/PKCS5Padding\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] raw = secretKey.getBytes();</span><br><span class=\"line\">SecretKeySpec skeySpec = <span class=\"keyword\">new</span> SecretKeySpec(raw, <span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\">IvParameterSpec iv = <span class=\"keyword\">new</span> IvParameterSpec(vector.getBytes());<span class=\"comment\">// 使用CBC模式，需要一个向量iv，可增加加密算法的强度</span></span><br><span class=\"line\">cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] encrypted = cipher.doFinal(encData.getBytes(<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> encrypted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">AES128CBCStringDecoding</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] sSrc,String key,String ivs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(key.length() != <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ivs != <span class=\"keyword\">null</span> &amp;&amp; ivs.length() != <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] raw = key.getBytes(<span class=\"string\">\"ASCII\"</span>);</span><br><span class=\"line\">SecretKeySpec skeySpec = <span class=\"keyword\">new</span> SecretKeySpec(raw, <span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\">Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES/CBC/PKCS5Padding\"</span>);</span><br><span class=\"line\">IvParameterSpec iv = <span class=\"keyword\">new</span> IvParameterSpec(ivs.getBytes());</span><br><span class=\"line\">cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);</span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] original = cipher.doFinal(sSrc);</span><br><span class=\"line\">String originalString = <span class=\"keyword\">new</span> String(original, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> originalString;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">encrypt</span><span class=\"params\">(String sSrc)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">String encodeString=base64StringEncoding(AES128CBCStringEncoding(sSrc,sKey,ivParameter),<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> encodeString;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">decrypt</span><span class=\"params\">(String sSrc)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">String decodeString=AES128CBCStringDecoding(base64StringDecoding(sSrc),sKey,ivParameter);</span><br><span class=\"line\"><span class=\"keyword\">return</span> decodeString;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 需要加密的字串</span></span><br><span class=\"line\">String cSrc = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> lStart = System.currentTimeMillis();</span><br><span class=\"line\">String enString = SecurityCore.getInstance().encrypt(cSrc);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"加密后的字串是：\"</span> + enString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> lUseTime = System.currentTimeMillis() - lStart;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"加密耗时：\"</span> + lUseTime + <span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 解密</span></span><br><span class=\"line\">lStart = System.currentTimeMillis();</span><br><span class=\"line\">String DeString = SecurityCore.getInstance().decrypt(enString);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"解密后的字串是：\"</span> + DeString);</span><br><span class=\"line\">lUseTime = System.currentTimeMillis() - lStart;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"解密耗时：\"</span> + lUseTime + <span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h1><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\"><span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"string\">\"crypto/aes\"</span></span><br><span class=\"line\"><span class=\"string\">\"crypto/cipher\"</span></span><br><span class=\"line\"><span class=\"string\">\"encoding/base64\"</span></span><br><span class=\"line\"><span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">sKey         = <span class=\"string\">\"dde4b1f8a9e6b814\"</span></span><br><span class=\"line\">ivParameter     = <span class=\"string\">\"dde4b1f8a9e6b814\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">/加密</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PswEncrypt</span><span class=\"params\">(src <span class=\"keyword\">string</span>)</span><span class=\"params\">(<span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">key := []<span class=\"keyword\">byte</span>(sKey)</span><br><span class=\"line\">iv := []<span class=\"keyword\">byte</span>(ivParameter)</span><br><span class=\"line\"></span><br><span class=\"line\">result, err := Aes128Encrypt([]<span class=\"keyword\">byte</span>(src), key, iv)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span>  base64.RawStdEncoding.EncodeToString(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PswDecrypt</span><span class=\"params\">(src <span class=\"keyword\">string</span>)</span><span class=\"params\">(<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">key := []<span class=\"keyword\">byte</span>(sKey)</span><br><span class=\"line\">iv := []<span class=\"keyword\">byte</span>(ivParameter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result []<span class=\"keyword\">byte</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> err error</span><br><span class=\"line\"></span><br><span class=\"line\">result,err=base64.RawStdEncoding.DecodeString(src)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">origData, err := Aes128Decrypt(result, key, iv)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(origData)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Aes128Encrypt</span><span class=\"params\">(origData, key []<span class=\"keyword\">byte</span>,IV []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> key == <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(key) != <span class=\"number\">16</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> IV != <span class=\"literal\">nil</span> &amp;&amp; <span class=\"built_in\">len</span>(IV) != <span class=\"number\">16</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">block, err := aes.NewCipher(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">blockSize := block.BlockSize()</span><br><span class=\"line\">origData = PKCS5Padding(origData, blockSize)</span><br><span class=\"line\">blockMode := cipher.NewCBCEncrypter(block, IV[:blockSize])</span><br><span class=\"line\">crypted := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(origData))</span><br><span class=\"line\"><span class=\"comment\">// 根据CryptBlocks方法的说明，如下方式初始化crypted也可以</span></span><br><span class=\"line\">blockMode.CryptBlocks(crypted, origData)</span><br><span class=\"line\"><span class=\"keyword\">return</span> crypted, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Aes128Decrypt</span><span class=\"params\">(crypted, key []<span class=\"keyword\">byte</span>,IV []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> key == <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(key) != <span class=\"number\">16</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> IV != <span class=\"literal\">nil</span> &amp;&amp; <span class=\"built_in\">len</span>(IV) != <span class=\"number\">16</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">block, err := aes.NewCipher(key)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">blockSize := block.BlockSize()</span><br><span class=\"line\">blockMode := cipher.NewCBCDecrypter(block,IV[:blockSize])</span><br><span class=\"line\">origData := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(crypted))</span><br><span class=\"line\">blockMode.CryptBlocks(origData, crypted)</span><br><span class=\"line\">origData = PKCS5UnPadding(origData)</span><br><span class=\"line\"><span class=\"keyword\">return</span> origData, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PKCS5Padding</span><span class=\"params\">(ciphertext []<span class=\"keyword\">byte</span>, blockSize <span class=\"keyword\">int</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">padding := blockSize - <span class=\"built_in\">len</span>(ciphertext)%blockSize</span><br><span class=\"line\">padtext := bytes.Repeat([]<span class=\"keyword\">byte</span>&#123;<span class=\"keyword\">byte</span>(padding)&#125;, padding)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">append</span>(ciphertext, padtext...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PKCS5UnPadding</span><span class=\"params\">(origData []<span class=\"keyword\">byte</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">length := <span class=\"built_in\">len</span>(origData)</span><br><span class=\"line\"><span class=\"comment\">// 去掉最后一个字节 unpadding 次</span></span><br><span class=\"line\">unpadding := <span class=\"keyword\">int</span>(origData[length<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"keyword\">return</span> origData[:(length - unpadding)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">encodingString := PswEncrypt(<span class=\"string\">\"123\"</span>)</span><br><span class=\"line\">decodingString := PswDecrypt(encodingString);</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"AES-128-CBC\\n加密：%s\\n解密：%s\\n\"</span>,encodingString,decodingString)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"IOS 百行代码切面日志","date":"2017-03-21T18:09:05.000Z","_content":"\n# AOPLogger\n### 切面日志作用\n说到日志，切面的实现最大的好处也就是分离出来，单独开发，包括埋点，记录输出log都可以在不影响项目内逻辑的情况下完成，形成完全的一个独立模块。\n#### 这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。\n\n\n在实现上用了Aspects这个库，主要就是hook方法，用它主要是对一些例外情况处理不错，自己写简单实现其实就只写写方法交换剩下的就不管了。。。\n\n下面说一下.h\n```Objective-C\n#import <Foundation/Foundation.h>\n\nextern NSString * const AOPLoggerMethod;//要统计的日志方法Key\nextern NSString * const AOPLoggerLogInfo;//要统计的日志信息Key\nextern NSString * const AOPLoggerPositionAfter;//方法执行后统计日志\nextern NSString * const AOPLoggerPositionBefore;//方法执行前统计日志\nextern NSString * const AOPLoggerPositionType;//执行日志统计的类型Key\n\n@protocol AOPLoggerGetConfigInfoProtocol <NSObject>\n\n@required\n\n/**\n创建类扩展如果使用此协议必须实现此方法\n此方法返回统计的配置信息，可以从网络取也可以从本地取\n@return 统计配置字典\n*/\n-(NSDictionary*)al_getConfigInfo;\n\n@end\n@protocol AOPLoggerBLLProtocol <NSObject>\n\n@required\n\n/**\n创建类扩展如果使用此协议必须实现此方法\n此方法主要来处理切面方法后的log信息处理可以存本地也可以使用其他任意第三方输出\n@param log 配置文件里定义的AOPLoggerLogInfo信息\n@param originAOP AspectInfo的方法信息，第三方库Aspect返回的切面方法的所有信息\n*/\n-(void)al_logger:(id)log originAOP:(id)originAOP;\n\n@end\n\n@interface AOPLogger : NSObject\n\n\n/**\n开始读取日志Plist配置文件\n*/\n+(void)startAOPLoggerWithPlist;\n\n/**\n统计日志的调用方法\n（如果不想增加开机时间可以采取每个模块创建一个日志统计类适时调用，在该类里提供一个初始化方法，内部调用此即可）\n@param classString 类名\n@param methodString 方法名\n@param log 相当于AOPLoggerLogInfo信息\n*/\n+(void)AOPLoggerWithClassString:(NSString*)classString methodString:(NSString*)methodString log:(id)log;\n\n/**\n统计日志的调用方法\n（如果不想增加开机时间可以采取每个模块创建一个日志统计类适时调用，在该类里提供一个初始化方法，内部调用此即可）\n@param classString 类名\n@param methodString 方法名\n@param log 相当于AOPLoggerLogInfo信息\n@param logPosition 日志统计时位置，可放在方法运行前或运行后（默认运行后执行日志统计）\n*/\n+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log logPosition:(NSString*)logPosition;\n\n@end\n```\n<!-- more -->\n这里提供了两种方式一种直接读取自定义的Plist，一种就是调用类方法，而即使调用类方法，也是单独建一个类，某个模块的日志类负责记录，传入类名方法名统计信息即可，而plist得形式在初期还好，后期统计曾多可就真的太扯了毕竟要在初始化的时候加载遍历执行\n![QQ20170306-012628.png](/assets/blogImage/3994053-46f6bef1c87511f6.png)\n# 定制扩展\n由于每个项目想要做的事情或逻辑都会有不同，这里就可以根据我的协议实现对应的方法，来完成自己的业务需求\n如下：\n```Objective-C\nimport \"AOPLogger+Custom.h\"\n#import \"Aspects.h\"\n#import <objc/runtime.h>\n\n@implementation AOPLogger (Custom)\n\n-(void)al_logger:(id)log originAOP:(id)originAOP{\nif ([log isKindOfClass:[NSString class]]) {\nNSLog(@\"event:%@\",log);\n}\nif ([log isKindOfClass:[NSDictionary class]]) {\nNSLog(@\"eventName:%@\\neventLabel:%@\\neventTime:%@\",log[@\"EventName\"],log[@\"EventLabel\"],[log[@\"EventTime\"] boolValue]?[NSDate date]:@\"不用获取\");\n}\nif (originAOP&&[originAOP conformsToProtocol:objc_getProtocol(\"AspectInfo\")]) {\nid<AspectInfo> aspectInfo=originAOP;\nNSLog(@\"originClass:%@\\noriginSel:%@\",NSStringFromClass([aspectInfo.originalInvocation.target class]),NSStringFromSelector(aspectInfo.originalInvocation.selector));\n\nfor (NSInteger i=0; i<aspectInfo.arguments.count; i++) {\nNSLog(@\"argument:%@\",aspectInfo.arguments[i]);\n}\n}\n}\n\n@end\n```\n这里只是做了简单的NSLog操作，而当某个业务模块下需要不同处理的时候，不妨就直接hook这个方法添加逻辑，用法完全靠个人想像吧，其实用起来经常能处理很多神奇的逻辑，里面的originAOP如果用过Aspects这个库的话可能会很快明白为什么要选这个库不是自己写了，因为它的这块封装可以让我拿到对应方法执行完后返回的值，当然你得指定这个log是在原方法执行完成后执行，同理如果放在执行前执行log我们通过这个对象还可以拿到方法传递的参数。\n\n再看.m的源码\n```Objective-C\n#import \"AOPLogger.h\"\n#import \"Aspects.h\"\n#import <objc/runtime.h>\n\nNSString * const AOPLoggerMethod=@\"AOPLoggerMethod\";\nNSString * const AOPLoggerLogInfo=@\"AOPLoggerLogInfo\";\nNSString * const AOPLoggerPositionAfter=@\"AOPLoggerPositionAfter\";\nNSString * const AOPLoggerPositionBefore=@\"AOPLoggerPositionBefore\";\nNSString * const AOPLoggerPositionType=@\"AOPLoggerPositionType\";\n\n@implementation AOPLogger\n\n+ (AOPLogger *)sharedAOPLogger {\nstatic AOPLogger *sharedAOPLogger = nil;\nstatic dispatch_once_t onceToken;\ndispatch_once(&onceToken, ^{\nsharedAOPLogger = [[self alloc] init];\n});\nreturn sharedAOPLogger;\n}\n\n+(void)startAOPLoggerWithPlist{\nNSDictionary *loggerConfigInfo=nil;\nif ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(\"AOPLoggerGetConfigInfoProtocol\")]) {\nloggerConfigInfo=[(AOPLogger<AOPLoggerGetConfigInfoProtocol>*)[AOPLogger sharedAOPLogger] al_getConfigInfo];\n}\nelse{\nloggerConfigInfo=[NSDictionary dictionaryWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@\"AOPLoggerConfig\" ofType:@\"plist\"]];\n}\n\nfor (NSString *className in loggerConfigInfo) {\nfor (NSDictionary *eventInfo in loggerConfigInfo[className]) {\nClass clazz = NSClassFromString(className);\nSEL selector = NSSelectorFromString(eventInfo[AOPLoggerMethod]);\nAspectOptions positionOptions=AspectPositionAfter;\nif ([loggerConfigInfo[AOPLoggerPositionType] isEqualToString:AOPLoggerPositionAfter]) {\npositionOptions=AspectPositionAfter;\n}\nif ([loggerConfigInfo[AOPLoggerPositionType] isEqualToString:AOPLoggerPositionBefore]) {\npositionOptions=AspectPositionBefore;\n}\n\n[clazz aspect_hookSelector:selector\nwithOptions:AspectPositionAfter\nusingBlock:^(id<AspectInfo> aspectInfo) {\nid log=eventInfo[AOPLoggerLogInfo];\n\nif ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(\"AOPLoggerBLLProtocol\")]) {\n[(AOPLogger<AOPLoggerBLLProtocol>*)[AOPLogger sharedAOPLogger] al_logger:log originAOP:aspectInfo];\n}\nelse{\nif ([log isKindOfClass:[NSString class]]) {\nNSLog(@\"AOPLogger:%@\",log);\n}\n}\n} error:NULL];\n\n}\n}\n\n}\n\n+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log{\n[self AOPLoggerWithClassString:classString methodString:methodString log:log logPosition:nil];\n}\n\n+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log logPosition:(NSString*)logPosition{\nClass clazz = NSClassFromString(classString);\nSEL selector = NSSelectorFromString(methodString);\nAspectOptions positionOptions=AspectPositionAfter;\nif ([logPosition isEqualToString:AOPLoggerPositionAfter]) {\npositionOptions=AspectPositionAfter;\n}\nif ([logPosition isEqualToString:AOPLoggerPositionBefore]) {\npositionOptions=AspectPositionBefore;\n}\n\n[clazz aspect_hookSelector:selector\nwithOptions:positionOptions\nusingBlock:^(id<AspectInfo> aspectInfo) {\nif ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(\"AOPLoggerBLLProtocol\")]) {\n[(AOPLogger<AOPLoggerBLLProtocol>*)[AOPLogger sharedAOPLogger] al_logger:log originAOP:aspectInfo];\n}\nelse{\nif ([log isKindOfClass:[NSString class]]) {\nNSLog(@\"AOPLogger:%@\",log);\n}\n}\n} error:NULL];\n\n}\n```\n核心处理.m直接不到百行，主要逻辑就是 单例初始化， 读取plist并格式化出执行的类 ·方法·log信息，最后就是利用AOP,切面hook对应方法插入我们统计逻辑。\n\n有了这个库完全可以日志动态话统计，前提你要做好热更新或使用plist形式。\n\n源码地址：https://github.com/heroims/AOPLogger\n","source":"_posts/IOS 百行代码切面日志.md","raw":"---\ntitle: IOS 百行代码切面日志\ndate: 2017-03-22 02:09:05\ntags:\n    - IOS\n    - 百行代码系列\n    - 切面\n    - AOP\n    - 日志\n---\n\n# AOPLogger\n### 切面日志作用\n说到日志，切面的实现最大的好处也就是分离出来，单独开发，包括埋点，记录输出log都可以在不影响项目内逻辑的情况下完成，形成完全的一个独立模块。\n#### 这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。\n\n\n在实现上用了Aspects这个库，主要就是hook方法，用它主要是对一些例外情况处理不错，自己写简单实现其实就只写写方法交换剩下的就不管了。。。\n\n下面说一下.h\n```Objective-C\n#import <Foundation/Foundation.h>\n\nextern NSString * const AOPLoggerMethod;//要统计的日志方法Key\nextern NSString * const AOPLoggerLogInfo;//要统计的日志信息Key\nextern NSString * const AOPLoggerPositionAfter;//方法执行后统计日志\nextern NSString * const AOPLoggerPositionBefore;//方法执行前统计日志\nextern NSString * const AOPLoggerPositionType;//执行日志统计的类型Key\n\n@protocol AOPLoggerGetConfigInfoProtocol <NSObject>\n\n@required\n\n/**\n创建类扩展如果使用此协议必须实现此方法\n此方法返回统计的配置信息，可以从网络取也可以从本地取\n@return 统计配置字典\n*/\n-(NSDictionary*)al_getConfigInfo;\n\n@end\n@protocol AOPLoggerBLLProtocol <NSObject>\n\n@required\n\n/**\n创建类扩展如果使用此协议必须实现此方法\n此方法主要来处理切面方法后的log信息处理可以存本地也可以使用其他任意第三方输出\n@param log 配置文件里定义的AOPLoggerLogInfo信息\n@param originAOP AspectInfo的方法信息，第三方库Aspect返回的切面方法的所有信息\n*/\n-(void)al_logger:(id)log originAOP:(id)originAOP;\n\n@end\n\n@interface AOPLogger : NSObject\n\n\n/**\n开始读取日志Plist配置文件\n*/\n+(void)startAOPLoggerWithPlist;\n\n/**\n统计日志的调用方法\n（如果不想增加开机时间可以采取每个模块创建一个日志统计类适时调用，在该类里提供一个初始化方法，内部调用此即可）\n@param classString 类名\n@param methodString 方法名\n@param log 相当于AOPLoggerLogInfo信息\n*/\n+(void)AOPLoggerWithClassString:(NSString*)classString methodString:(NSString*)methodString log:(id)log;\n\n/**\n统计日志的调用方法\n（如果不想增加开机时间可以采取每个模块创建一个日志统计类适时调用，在该类里提供一个初始化方法，内部调用此即可）\n@param classString 类名\n@param methodString 方法名\n@param log 相当于AOPLoggerLogInfo信息\n@param logPosition 日志统计时位置，可放在方法运行前或运行后（默认运行后执行日志统计）\n*/\n+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log logPosition:(NSString*)logPosition;\n\n@end\n```\n<!-- more -->\n这里提供了两种方式一种直接读取自定义的Plist，一种就是调用类方法，而即使调用类方法，也是单独建一个类，某个模块的日志类负责记录，传入类名方法名统计信息即可，而plist得形式在初期还好，后期统计曾多可就真的太扯了毕竟要在初始化的时候加载遍历执行\n![QQ20170306-012628.png](/assets/blogImage/3994053-46f6bef1c87511f6.png)\n# 定制扩展\n由于每个项目想要做的事情或逻辑都会有不同，这里就可以根据我的协议实现对应的方法，来完成自己的业务需求\n如下：\n```Objective-C\nimport \"AOPLogger+Custom.h\"\n#import \"Aspects.h\"\n#import <objc/runtime.h>\n\n@implementation AOPLogger (Custom)\n\n-(void)al_logger:(id)log originAOP:(id)originAOP{\nif ([log isKindOfClass:[NSString class]]) {\nNSLog(@\"event:%@\",log);\n}\nif ([log isKindOfClass:[NSDictionary class]]) {\nNSLog(@\"eventName:%@\\neventLabel:%@\\neventTime:%@\",log[@\"EventName\"],log[@\"EventLabel\"],[log[@\"EventTime\"] boolValue]?[NSDate date]:@\"不用获取\");\n}\nif (originAOP&&[originAOP conformsToProtocol:objc_getProtocol(\"AspectInfo\")]) {\nid<AspectInfo> aspectInfo=originAOP;\nNSLog(@\"originClass:%@\\noriginSel:%@\",NSStringFromClass([aspectInfo.originalInvocation.target class]),NSStringFromSelector(aspectInfo.originalInvocation.selector));\n\nfor (NSInteger i=0; i<aspectInfo.arguments.count; i++) {\nNSLog(@\"argument:%@\",aspectInfo.arguments[i]);\n}\n}\n}\n\n@end\n```\n这里只是做了简单的NSLog操作，而当某个业务模块下需要不同处理的时候，不妨就直接hook这个方法添加逻辑，用法完全靠个人想像吧，其实用起来经常能处理很多神奇的逻辑，里面的originAOP如果用过Aspects这个库的话可能会很快明白为什么要选这个库不是自己写了，因为它的这块封装可以让我拿到对应方法执行完后返回的值，当然你得指定这个log是在原方法执行完成后执行，同理如果放在执行前执行log我们通过这个对象还可以拿到方法传递的参数。\n\n再看.m的源码\n```Objective-C\n#import \"AOPLogger.h\"\n#import \"Aspects.h\"\n#import <objc/runtime.h>\n\nNSString * const AOPLoggerMethod=@\"AOPLoggerMethod\";\nNSString * const AOPLoggerLogInfo=@\"AOPLoggerLogInfo\";\nNSString * const AOPLoggerPositionAfter=@\"AOPLoggerPositionAfter\";\nNSString * const AOPLoggerPositionBefore=@\"AOPLoggerPositionBefore\";\nNSString * const AOPLoggerPositionType=@\"AOPLoggerPositionType\";\n\n@implementation AOPLogger\n\n+ (AOPLogger *)sharedAOPLogger {\nstatic AOPLogger *sharedAOPLogger = nil;\nstatic dispatch_once_t onceToken;\ndispatch_once(&onceToken, ^{\nsharedAOPLogger = [[self alloc] init];\n});\nreturn sharedAOPLogger;\n}\n\n+(void)startAOPLoggerWithPlist{\nNSDictionary *loggerConfigInfo=nil;\nif ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(\"AOPLoggerGetConfigInfoProtocol\")]) {\nloggerConfigInfo=[(AOPLogger<AOPLoggerGetConfigInfoProtocol>*)[AOPLogger sharedAOPLogger] al_getConfigInfo];\n}\nelse{\nloggerConfigInfo=[NSDictionary dictionaryWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@\"AOPLoggerConfig\" ofType:@\"plist\"]];\n}\n\nfor (NSString *className in loggerConfigInfo) {\nfor (NSDictionary *eventInfo in loggerConfigInfo[className]) {\nClass clazz = NSClassFromString(className);\nSEL selector = NSSelectorFromString(eventInfo[AOPLoggerMethod]);\nAspectOptions positionOptions=AspectPositionAfter;\nif ([loggerConfigInfo[AOPLoggerPositionType] isEqualToString:AOPLoggerPositionAfter]) {\npositionOptions=AspectPositionAfter;\n}\nif ([loggerConfigInfo[AOPLoggerPositionType] isEqualToString:AOPLoggerPositionBefore]) {\npositionOptions=AspectPositionBefore;\n}\n\n[clazz aspect_hookSelector:selector\nwithOptions:AspectPositionAfter\nusingBlock:^(id<AspectInfo> aspectInfo) {\nid log=eventInfo[AOPLoggerLogInfo];\n\nif ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(\"AOPLoggerBLLProtocol\")]) {\n[(AOPLogger<AOPLoggerBLLProtocol>*)[AOPLogger sharedAOPLogger] al_logger:log originAOP:aspectInfo];\n}\nelse{\nif ([log isKindOfClass:[NSString class]]) {\nNSLog(@\"AOPLogger:%@\",log);\n}\n}\n} error:NULL];\n\n}\n}\n\n}\n\n+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log{\n[self AOPLoggerWithClassString:classString methodString:methodString log:log logPosition:nil];\n}\n\n+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log logPosition:(NSString*)logPosition{\nClass clazz = NSClassFromString(classString);\nSEL selector = NSSelectorFromString(methodString);\nAspectOptions positionOptions=AspectPositionAfter;\nif ([logPosition isEqualToString:AOPLoggerPositionAfter]) {\npositionOptions=AspectPositionAfter;\n}\nif ([logPosition isEqualToString:AOPLoggerPositionBefore]) {\npositionOptions=AspectPositionBefore;\n}\n\n[clazz aspect_hookSelector:selector\nwithOptions:positionOptions\nusingBlock:^(id<AspectInfo> aspectInfo) {\nif ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(\"AOPLoggerBLLProtocol\")]) {\n[(AOPLogger<AOPLoggerBLLProtocol>*)[AOPLogger sharedAOPLogger] al_logger:log originAOP:aspectInfo];\n}\nelse{\nif ([log isKindOfClass:[NSString class]]) {\nNSLog(@\"AOPLogger:%@\",log);\n}\n}\n} error:NULL];\n\n}\n```\n核心处理.m直接不到百行，主要逻辑就是 单例初始化， 读取plist并格式化出执行的类 ·方法·log信息，最后就是利用AOP,切面hook对应方法插入我们统计逻辑。\n\n有了这个库完全可以日志动态话统计，前提你要做好热更新或使用plist形式。\n\n源码地址：https://github.com/heroims/AOPLogger\n","slug":"IOS 百行代码切面日志","published":1,"updated":"2021-07-08T09:20:31.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqn0007nhs6x42av5rh","content":"<h1 id=\"AOPLogger\"><a href=\"#AOPLogger\" class=\"headerlink\" title=\"AOPLogger\"></a>AOPLogger</h1><h3 id=\"切面日志作用\"><a href=\"#切面日志作用\" class=\"headerlink\" title=\"切面日志作用\"></a>切面日志作用</h3><p>说到日志，切面的实现最大的好处也就是分离出来，单独开发，包括埋点，记录输出log都可以在不影响项目内逻辑的情况下完成，形成完全的一个独立模块。</p>\n<h4 id=\"这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。\"><a href=\"#这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。\" class=\"headerlink\" title=\"这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。\"></a>这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。</h4><p>在实现上用了Aspects这个库，主要就是hook方法，用它主要是对一些例外情况处理不错，自己写简单实现其实就只写写方法交换剩下的就不管了。。。</p>\n<p>下面说一下.h<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">extern NSString * const AOPLoggerMethod;//要统计的日志方法Key</span><br><span class=\"line\">extern NSString * const AOPLoggerLogInfo;//要统计的日志信息Key</span><br><span class=\"line\">extern NSString * const AOPLoggerPositionAfter;//方法执行后统计日志</span><br><span class=\"line\">extern NSString * const AOPLoggerPositionBefore;//方法执行前统计日志</span><br><span class=\"line\">extern NSString * const AOPLoggerPositionType;//执行日志统计的类型Key</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol AOPLoggerGetConfigInfoProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">创建类扩展如果使用此协议必须实现此方法</span><br><span class=\"line\">此方法返回统计的配置信息，可以从网络取也可以从本地取</span><br><span class=\"line\">@return 统计配置字典</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(NSDictionary*)al_getConfigInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@protocol AOPLoggerBLLProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">创建类扩展如果使用此协议必须实现此方法</span><br><span class=\"line\">此方法主要来处理切面方法后的log信息处理可以存本地也可以使用其他任意第三方输出</span><br><span class=\"line\">@param log 配置文件里定义的AOPLoggerLogInfo信息</span><br><span class=\"line\">@param originAOP AspectInfo的方法信息，第三方库Aspect返回的切面方法的所有信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)al_logger:(id)log originAOP:(id)originAOP;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface AOPLogger : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">开始读取日志Plist配置文件</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)startAOPLoggerWithPlist;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">统计日志的调用方法</span><br><span class=\"line\">（如果不想增加开机时间可以采取每个模块创建一个日志统计类适时调用，在该类里提供一个初始化方法，内部调用此即可）</span><br><span class=\"line\">@param classString 类名</span><br><span class=\"line\">@param methodString 方法名</span><br><span class=\"line\">@param log 相当于AOPLoggerLogInfo信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)AOPLoggerWithClassString:(NSString*)classString methodString:(NSString*)methodString log:(id)log;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">统计日志的调用方法</span><br><span class=\"line\">（如果不想增加开机时间可以采取每个模块创建一个日志统计类适时调用，在该类里提供一个初始化方法，内部调用此即可）</span><br><span class=\"line\">@param classString 类名</span><br><span class=\"line\">@param methodString 方法名</span><br><span class=\"line\">@param log 相当于AOPLoggerLogInfo信息</span><br><span class=\"line\">@param logPosition 日志统计时位置，可放在方法运行前或运行后（默认运行后执行日志统计）</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log logPosition:(NSString*)logPosition;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>这里提供了两种方式一种直接读取自定义的Plist，一种就是调用类方法，而即使调用类方法，也是单独建一个类，某个模块的日志类负责记录，传入类名方法名统计信息即可，而plist得形式在初期还好，后期统计曾多可就真的太扯了毕竟要在初始化的时候加载遍历执行<br><img src=\"/assets/blogImage/3994053-46f6bef1c87511f6.png\" alt=\"QQ20170306-012628.png\"></p>\n<h1 id=\"定制扩展\"><a href=\"#定制扩展\" class=\"headerlink\" title=\"定制扩展\"></a>定制扩展</h1><p>由于每个项目想要做的事情或逻辑都会有不同，这里就可以根据我的协议实现对应的方法，来完成自己的业务需求<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;AOPLogger+Custom.h&quot;</span><br><span class=\"line\">#import &quot;Aspects.h&quot;</span><br><span class=\"line\">#import &lt;objc/runtime.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AOPLogger (Custom)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)al_logger:(id)log originAOP:(id)originAOP&#123;</span><br><span class=\"line\">if ([log isKindOfClass:[NSString class]]) &#123;</span><br><span class=\"line\">NSLog(@&quot;event:%@&quot;,log);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ([log isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class=\"line\">NSLog(@&quot;eventName:%@\\neventLabel:%@\\neventTime:%@&quot;,log[@&quot;EventName&quot;],log[@&quot;EventLabel&quot;],[log[@&quot;EventTime&quot;] boolValue]?[NSDate date]:@&quot;不用获取&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (originAOP&amp;&amp;[originAOP conformsToProtocol:objc_getProtocol(&quot;AspectInfo&quot;)]) &#123;</span><br><span class=\"line\">id&lt;AspectInfo&gt; aspectInfo=originAOP;</span><br><span class=\"line\">NSLog(@&quot;originClass:%@\\noriginSel:%@&quot;,NSStringFromClass([aspectInfo.originalInvocation.target class]),NSStringFromSelector(aspectInfo.originalInvocation.selector));</span><br><span class=\"line\"></span><br><span class=\"line\">for (NSInteger i=0; i&lt;aspectInfo.arguments.count; i++) &#123;</span><br><span class=\"line\">NSLog(@&quot;argument:%@&quot;,aspectInfo.arguments[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>这里只是做了简单的NSLog操作，而当某个业务模块下需要不同处理的时候，不妨就直接hook这个方法添加逻辑，用法完全靠个人想像吧，其实用起来经常能处理很多神奇的逻辑，里面的originAOP如果用过Aspects这个库的话可能会很快明白为什么要选这个库不是自己写了，因为它的这块封装可以让我拿到对应方法执行完后返回的值，当然你得指定这个log是在原方法执行完成后执行，同理如果放在执行前执行log我们通过这个对象还可以拿到方法传递的参数。</p>\n<p>再看.m的源码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;AOPLogger.h&quot;</span><br><span class=\"line\">#import &quot;Aspects.h&quot;</span><br><span class=\"line\">#import &lt;objc/runtime.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NSString * const AOPLoggerMethod=@&quot;AOPLoggerMethod&quot;;</span><br><span class=\"line\">NSString * const AOPLoggerLogInfo=@&quot;AOPLoggerLogInfo&quot;;</span><br><span class=\"line\">NSString * const AOPLoggerPositionAfter=@&quot;AOPLoggerPositionAfter&quot;;</span><br><span class=\"line\">NSString * const AOPLoggerPositionBefore=@&quot;AOPLoggerPositionBefore&quot;;</span><br><span class=\"line\">NSString * const AOPLoggerPositionType=@&quot;AOPLoggerPositionType&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AOPLogger</span><br><span class=\"line\"></span><br><span class=\"line\">+ (AOPLogger *)sharedAOPLogger &#123;</span><br><span class=\"line\">static AOPLogger *sharedAOPLogger = nil;</span><br><span class=\"line\">static dispatch_once_t onceToken;</span><br><span class=\"line\">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class=\"line\">sharedAOPLogger = [[self alloc] init];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">return sharedAOPLogger;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)startAOPLoggerWithPlist&#123;</span><br><span class=\"line\">NSDictionary *loggerConfigInfo=nil;</span><br><span class=\"line\">if ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(&quot;AOPLoggerGetConfigInfoProtocol&quot;)]) &#123;</span><br><span class=\"line\">loggerConfigInfo=[(AOPLogger&lt;AOPLoggerGetConfigInfoProtocol&gt;*)[AOPLogger sharedAOPLogger] al_getConfigInfo];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">loggerConfigInfo=[NSDictionary dictionaryWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&quot;AOPLoggerConfig&quot; ofType:@&quot;plist&quot;]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (NSString *className in loggerConfigInfo) &#123;</span><br><span class=\"line\">for (NSDictionary *eventInfo in loggerConfigInfo[className]) &#123;</span><br><span class=\"line\">Class clazz = NSClassFromString(className);</span><br><span class=\"line\">SEL selector = NSSelectorFromString(eventInfo[AOPLoggerMethod]);</span><br><span class=\"line\">AspectOptions positionOptions=AspectPositionAfter;</span><br><span class=\"line\">if ([loggerConfigInfo[AOPLoggerPositionType] isEqualToString:AOPLoggerPositionAfter]) &#123;</span><br><span class=\"line\">positionOptions=AspectPositionAfter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ([loggerConfigInfo[AOPLoggerPositionType] isEqualToString:AOPLoggerPositionBefore]) &#123;</span><br><span class=\"line\">positionOptions=AspectPositionBefore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[clazz aspect_hookSelector:selector</span><br><span class=\"line\">withOptions:AspectPositionAfter</span><br><span class=\"line\">usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class=\"line\">id log=eventInfo[AOPLoggerLogInfo];</span><br><span class=\"line\"></span><br><span class=\"line\">if ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(&quot;AOPLoggerBLLProtocol&quot;)]) &#123;</span><br><span class=\"line\">[(AOPLogger&lt;AOPLoggerBLLProtocol&gt;*)[AOPLogger sharedAOPLogger] al_logger:log originAOP:aspectInfo];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">if ([log isKindOfClass:[NSString class]]) &#123;</span><br><span class=\"line\">NSLog(@&quot;AOPLogger:%@&quot;,log);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; error:NULL];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log&#123;</span><br><span class=\"line\">[self AOPLoggerWithClassString:classString methodString:methodString log:log logPosition:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log logPosition:(NSString*)logPosition&#123;</span><br><span class=\"line\">Class clazz = NSClassFromString(classString);</span><br><span class=\"line\">SEL selector = NSSelectorFromString(methodString);</span><br><span class=\"line\">AspectOptions positionOptions=AspectPositionAfter;</span><br><span class=\"line\">if ([logPosition isEqualToString:AOPLoggerPositionAfter]) &#123;</span><br><span class=\"line\">positionOptions=AspectPositionAfter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ([logPosition isEqualToString:AOPLoggerPositionBefore]) &#123;</span><br><span class=\"line\">positionOptions=AspectPositionBefore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[clazz aspect_hookSelector:selector</span><br><span class=\"line\">withOptions:positionOptions</span><br><span class=\"line\">usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class=\"line\">if ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(&quot;AOPLoggerBLLProtocol&quot;)]) &#123;</span><br><span class=\"line\">[(AOPLogger&lt;AOPLoggerBLLProtocol&gt;*)[AOPLogger sharedAOPLogger] al_logger:log originAOP:aspectInfo];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">if ([log isKindOfClass:[NSString class]]) &#123;</span><br><span class=\"line\">NSLog(@&quot;AOPLogger:%@&quot;,log);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; error:NULL];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>核心处理.m直接不到百行，主要逻辑就是 单例初始化， 读取plist并格式化出执行的类 ·方法·log信息，最后就是利用AOP,切面hook对应方法插入我们统计逻辑。</p>\n<p>有了这个库完全可以日志动态话统计，前提你要做好热更新或使用plist形式。</p>\n<p>源码地址：<a href=\"https://github.com/heroims/AOPLogger\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/AOPLogger</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"AOPLogger\"><a href=\"#AOPLogger\" class=\"headerlink\" title=\"AOPLogger\"></a>AOPLogger</h1><h3 id=\"切面日志作用\"><a href=\"#切面日志作用\" class=\"headerlink\" title=\"切面日志作用\"></a>切面日志作用</h3><p>说到日志，切面的实现最大的好处也就是分离出来，单独开发，包括埋点，记录输出log都可以在不影响项目内逻辑的情况下完成，形成完全的一个独立模块。</p>\n<h4 id=\"这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。\"><a href=\"#这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。\" class=\"headerlink\" title=\"这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。\"></a>这里的切面日志，只是作为分离业务而用，所以它的作用只是记录，至于上传删除，这些逻辑同样可以分离出来单独写，存的过程解决了渗透入工程内，上传删除包括分级这些逻辑其实本身就很独立。</h4><p>在实现上用了Aspects这个库，主要就是hook方法，用它主要是对一些例外情况处理不错，自己写简单实现其实就只写写方法交换剩下的就不管了。。。</p>\n<p>下面说一下.h<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">extern NSString * const AOPLoggerMethod;//要统计的日志方法Key</span><br><span class=\"line\">extern NSString * const AOPLoggerLogInfo;//要统计的日志信息Key</span><br><span class=\"line\">extern NSString * const AOPLoggerPositionAfter;//方法执行后统计日志</span><br><span class=\"line\">extern NSString * const AOPLoggerPositionBefore;//方法执行前统计日志</span><br><span class=\"line\">extern NSString * const AOPLoggerPositionType;//执行日志统计的类型Key</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol AOPLoggerGetConfigInfoProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">创建类扩展如果使用此协议必须实现此方法</span><br><span class=\"line\">此方法返回统计的配置信息，可以从网络取也可以从本地取</span><br><span class=\"line\">@return 统计配置字典</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(NSDictionary*)al_getConfigInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@protocol AOPLoggerBLLProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">创建类扩展如果使用此协议必须实现此方法</span><br><span class=\"line\">此方法主要来处理切面方法后的log信息处理可以存本地也可以使用其他任意第三方输出</span><br><span class=\"line\">@param log 配置文件里定义的AOPLoggerLogInfo信息</span><br><span class=\"line\">@param originAOP AspectInfo的方法信息，第三方库Aspect返回的切面方法的所有信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)al_logger:(id)log originAOP:(id)originAOP;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface AOPLogger : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">开始读取日志Plist配置文件</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)startAOPLoggerWithPlist;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">统计日志的调用方法</span><br><span class=\"line\">（如果不想增加开机时间可以采取每个模块创建一个日志统计类适时调用，在该类里提供一个初始化方法，内部调用此即可）</span><br><span class=\"line\">@param classString 类名</span><br><span class=\"line\">@param methodString 方法名</span><br><span class=\"line\">@param log 相当于AOPLoggerLogInfo信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)AOPLoggerWithClassString:(NSString*)classString methodString:(NSString*)methodString log:(id)log;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">统计日志的调用方法</span><br><span class=\"line\">（如果不想增加开机时间可以采取每个模块创建一个日志统计类适时调用，在该类里提供一个初始化方法，内部调用此即可）</span><br><span class=\"line\">@param classString 类名</span><br><span class=\"line\">@param methodString 方法名</span><br><span class=\"line\">@param log 相当于AOPLoggerLogInfo信息</span><br><span class=\"line\">@param logPosition 日志统计时位置，可放在方法运行前或运行后（默认运行后执行日志统计）</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log logPosition:(NSString*)logPosition;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>","more":"<p>这里提供了两种方式一种直接读取自定义的Plist，一种就是调用类方法，而即使调用类方法，也是单独建一个类，某个模块的日志类负责记录，传入类名方法名统计信息即可，而plist得形式在初期还好，后期统计曾多可就真的太扯了毕竟要在初始化的时候加载遍历执行<br><img src=\"/assets/blogImage/3994053-46f6bef1c87511f6.png\" alt=\"QQ20170306-012628.png\"></p>\n<h1 id=\"定制扩展\"><a href=\"#定制扩展\" class=\"headerlink\" title=\"定制扩展\"></a>定制扩展</h1><p>由于每个项目想要做的事情或逻辑都会有不同，这里就可以根据我的协议实现对应的方法，来完成自己的业务需求<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;AOPLogger+Custom.h&quot;</span><br><span class=\"line\">#import &quot;Aspects.h&quot;</span><br><span class=\"line\">#import &lt;objc/runtime.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AOPLogger (Custom)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)al_logger:(id)log originAOP:(id)originAOP&#123;</span><br><span class=\"line\">if ([log isKindOfClass:[NSString class]]) &#123;</span><br><span class=\"line\">NSLog(@&quot;event:%@&quot;,log);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ([log isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class=\"line\">NSLog(@&quot;eventName:%@\\neventLabel:%@\\neventTime:%@&quot;,log[@&quot;EventName&quot;],log[@&quot;EventLabel&quot;],[log[@&quot;EventTime&quot;] boolValue]?[NSDate date]:@&quot;不用获取&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (originAOP&amp;&amp;[originAOP conformsToProtocol:objc_getProtocol(&quot;AspectInfo&quot;)]) &#123;</span><br><span class=\"line\">id&lt;AspectInfo&gt; aspectInfo=originAOP;</span><br><span class=\"line\">NSLog(@&quot;originClass:%@\\noriginSel:%@&quot;,NSStringFromClass([aspectInfo.originalInvocation.target class]),NSStringFromSelector(aspectInfo.originalInvocation.selector));</span><br><span class=\"line\"></span><br><span class=\"line\">for (NSInteger i=0; i&lt;aspectInfo.arguments.count; i++) &#123;</span><br><span class=\"line\">NSLog(@&quot;argument:%@&quot;,aspectInfo.arguments[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>这里只是做了简单的NSLog操作，而当某个业务模块下需要不同处理的时候，不妨就直接hook这个方法添加逻辑，用法完全靠个人想像吧，其实用起来经常能处理很多神奇的逻辑，里面的originAOP如果用过Aspects这个库的话可能会很快明白为什么要选这个库不是自己写了，因为它的这块封装可以让我拿到对应方法执行完后返回的值，当然你得指定这个log是在原方法执行完成后执行，同理如果放在执行前执行log我们通过这个对象还可以拿到方法传递的参数。</p>\n<p>再看.m的源码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;AOPLogger.h&quot;</span><br><span class=\"line\">#import &quot;Aspects.h&quot;</span><br><span class=\"line\">#import &lt;objc/runtime.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NSString * const AOPLoggerMethod=@&quot;AOPLoggerMethod&quot;;</span><br><span class=\"line\">NSString * const AOPLoggerLogInfo=@&quot;AOPLoggerLogInfo&quot;;</span><br><span class=\"line\">NSString * const AOPLoggerPositionAfter=@&quot;AOPLoggerPositionAfter&quot;;</span><br><span class=\"line\">NSString * const AOPLoggerPositionBefore=@&quot;AOPLoggerPositionBefore&quot;;</span><br><span class=\"line\">NSString * const AOPLoggerPositionType=@&quot;AOPLoggerPositionType&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AOPLogger</span><br><span class=\"line\"></span><br><span class=\"line\">+ (AOPLogger *)sharedAOPLogger &#123;</span><br><span class=\"line\">static AOPLogger *sharedAOPLogger = nil;</span><br><span class=\"line\">static dispatch_once_t onceToken;</span><br><span class=\"line\">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class=\"line\">sharedAOPLogger = [[self alloc] init];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">return sharedAOPLogger;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)startAOPLoggerWithPlist&#123;</span><br><span class=\"line\">NSDictionary *loggerConfigInfo=nil;</span><br><span class=\"line\">if ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(&quot;AOPLoggerGetConfigInfoProtocol&quot;)]) &#123;</span><br><span class=\"line\">loggerConfigInfo=[(AOPLogger&lt;AOPLoggerGetConfigInfoProtocol&gt;*)[AOPLogger sharedAOPLogger] al_getConfigInfo];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">loggerConfigInfo=[NSDictionary dictionaryWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&quot;AOPLoggerConfig&quot; ofType:@&quot;plist&quot;]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (NSString *className in loggerConfigInfo) &#123;</span><br><span class=\"line\">for (NSDictionary *eventInfo in loggerConfigInfo[className]) &#123;</span><br><span class=\"line\">Class clazz = NSClassFromString(className);</span><br><span class=\"line\">SEL selector = NSSelectorFromString(eventInfo[AOPLoggerMethod]);</span><br><span class=\"line\">AspectOptions positionOptions=AspectPositionAfter;</span><br><span class=\"line\">if ([loggerConfigInfo[AOPLoggerPositionType] isEqualToString:AOPLoggerPositionAfter]) &#123;</span><br><span class=\"line\">positionOptions=AspectPositionAfter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ([loggerConfigInfo[AOPLoggerPositionType] isEqualToString:AOPLoggerPositionBefore]) &#123;</span><br><span class=\"line\">positionOptions=AspectPositionBefore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[clazz aspect_hookSelector:selector</span><br><span class=\"line\">withOptions:AspectPositionAfter</span><br><span class=\"line\">usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class=\"line\">id log=eventInfo[AOPLoggerLogInfo];</span><br><span class=\"line\"></span><br><span class=\"line\">if ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(&quot;AOPLoggerBLLProtocol&quot;)]) &#123;</span><br><span class=\"line\">[(AOPLogger&lt;AOPLoggerBLLProtocol&gt;*)[AOPLogger sharedAOPLogger] al_logger:log originAOP:aspectInfo];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">if ([log isKindOfClass:[NSString class]]) &#123;</span><br><span class=\"line\">NSLog(@&quot;AOPLogger:%@&quot;,log);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; error:NULL];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log&#123;</span><br><span class=\"line\">[self AOPLoggerWithClassString:classString methodString:methodString log:log logPosition:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)AOPLoggerWithClassString:(NSString *)classString methodString:(NSString *)methodString log:(id)log logPosition:(NSString*)logPosition&#123;</span><br><span class=\"line\">Class clazz = NSClassFromString(classString);</span><br><span class=\"line\">SEL selector = NSSelectorFromString(methodString);</span><br><span class=\"line\">AspectOptions positionOptions=AspectPositionAfter;</span><br><span class=\"line\">if ([logPosition isEqualToString:AOPLoggerPositionAfter]) &#123;</span><br><span class=\"line\">positionOptions=AspectPositionAfter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ([logPosition isEqualToString:AOPLoggerPositionBefore]) &#123;</span><br><span class=\"line\">positionOptions=AspectPositionBefore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[clazz aspect_hookSelector:selector</span><br><span class=\"line\">withOptions:positionOptions</span><br><span class=\"line\">usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class=\"line\">if ([[AOPLogger sharedAOPLogger] conformsToProtocol:objc_getProtocol(&quot;AOPLoggerBLLProtocol&quot;)]) &#123;</span><br><span class=\"line\">[(AOPLogger&lt;AOPLoggerBLLProtocol&gt;*)[AOPLogger sharedAOPLogger] al_logger:log originAOP:aspectInfo];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">if ([log isKindOfClass:[NSString class]]) &#123;</span><br><span class=\"line\">NSLog(@&quot;AOPLogger:%@&quot;,log);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; error:NULL];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>核心处理.m直接不到百行，主要逻辑就是 单例初始化， 读取plist并格式化出执行的类 ·方法·log信息，最后就是利用AOP,切面hook对应方法插入我们统计逻辑。</p>\n<p>有了这个库完全可以日志动态话统计，前提你要做好热更新或使用plist形式。</p>\n<p>源码地址：<a href=\"https://github.com/heroims/AOPLogger\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/AOPLogger</a></p>"},{"title":"IOS 切面统计事件解耦","date":"2017-08-01T18:09:05.000Z","_content":"\n统计这个事情可以说是个巨无语的系统，当然不把他独立出来也就不是什么问题了，只是一堆牛皮癣似得代码穿插在项目各个地方，毕竟真正应用到一个app里的统计都跟业务有着很强的绑定关系，脱离业务的统计数据基本没什么大用，先吐槽一波再开始正文。。。。\n![DingTalk20170802140347.png](/assets/blogImage/3994053-18807a49c709e49a.png)\n# 基础封装\n先从用第三方的来说，基本上就只是需要包个壳就ok了，建个manager，初始化sdk一封装，加几个常用统计方法基本ok。常见的方法就是传个event名再加个properties传扩展字典，用户登录状态绑定注销，通用字段增删改，基本上这就满足了大部分需求。。。\n\n如果是纯自己手写，上面说的壳放着，剩下的仿照sdk来，基本功能要实现异步队列记录往本地写数据，定期上传，处理好读写关系是关键，这里不多说不是这篇重点。\n\nps:有个壳才敢放开手折腾优化\n\n#### 切面封装\n切面统计其实可以看我之前的[IOS 百行代码切面日志](http://www.jianshu.com/p/a9219e618ca2)，整个完成的就是切面的封装，看过的基本应该了解这套逻辑切面的时候不关心切面方法的参数的话会非常好用。\n如果业务关联强的情况，虽然也能处理但要针对那些业务作出对应的逻辑，导致切面封装里夹杂很多特殊逻辑,下面的方法内部要对originAOP拆分取所有参，甚至要复制部分业务层逻辑过来最后完成一个统计。\n```\n@interface NSObject (AOPLogger)\n\n/**\n替换或添加类方法，即使替换过也会替换，注意想单次替换使用dispatch_once保证，如果方法从未声明过则会添加失败\n\n@param originalSelector 原方法\n@param swizzledSelector 替换方法\n@param error 错误信息\n*/\n+(void)al_hookOrAddWithOriginClassSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;\n\n\n/**\n替换或添加实例方法，即使替换过也会替换，注意想单次替换使用dispatch_once保证，如果方法从未声明过则会添加失败\n\n@param originalSelector 原方法\n@param swizzledSelector 替换方法\n@param error 错误信息\n*/\n+(void)al_hookOrAddWithOriginSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;\n\n@end\n```\n<!-- more -->\n\n所以我个人建议这里就封装些简单的少参甚至无参的统计，然后基本上简单的通用统计和业务统计建个类或者plist，列一下要切面的类和方法就完成了。\n\n凡事都有特例，如果本身方法内多个参数完成一次统计就不多，那我之前的百行系列就已经足够你解耦了。\n\nps:郑重声明AOP用Aspects不支持切面静态方法，回头有空肯定是要改的，Aspects用class_replaceMethod实现的，没有取isa的过程，用method_exchangeImplementations对IMP置换其实是可以实现的，回头我重写一个关于swizzing的库就换掉Aspects。\n\n# 通用统计\n通用统计就是可以脱离业务完全抽离的部分，这部分其实可以设计部分业务承接，比如通用点击事件可以把点击的UI对象扩展出一个字典的属性值，如此对于通用统计来说只是看看有没有某个属性有的话就扔到统计里，和业务层没有关联，但后面带来的好处很大！这个最后说。\n#### App生命周期统计\n应用生命周期的统计随便建个类，监听下面的通知就ok了，当然这个类就不能销毁了，比较懒得做法直接AOPLogger 类扩展一下init里监听，因为我本身的类里连init方法都没重写。\n\nUIApplicationDidFinishLaunchingNotification （通知名称） --->   application:didFinishLaunchingWithOptions:(委托方法）：在应用程序启动后直接进行应用程序级编码的主要方式。\n\nUIApplicationWillResignActiveNotification(通知名称）--->applicationWillResignActive:（委托方法）：用户按下主屏幕按钮调用 ，不要在此方法中假设将进入后台状态，只是一种临时变化，最终将恢复到活动状态\n\nUIApplicationDidBecomActiveNotification（通知名称） ---->applicationDidBecomeActive:(委托方法）：应用程序按下主屏幕按钮后想要将应用程序切换到前台时调用，应用程序启动时也会调用，可以在其中添加一些应用程序初始化代码\n\nUIApplicationDidEnterBackgroundNotification(通知名称）----->applicationDidEnterBackground:（委托方法）：应用程序在此方法中释放所有可在以后重新创建的资源，保存所有用户数据，关闭网络连接等。如果需要，也可以在这里请求在后台运行更长时间。如果在这里花费了太长时间（超过5秒），系统将断定应用程序的行为异常并终止他。\n\nUIApplicationWillEnterForegroundNotification(通知名称） ---->applicationWillEnterForeground:(委托方法):当应用程序在applicationDidEnterBackground:花费了太长时间，终止后，应该实现此方法来重新创建在applicationDidEnterBackground中销毁的内容，比如重新加载用户数据、重新建立网络连接等。\n\nUIApplicationWllTerminateNotification（通知名称） ----> applicationWillTerminate:(委托方法):现在很少使用，只有在应用程序已进入后台，并且系统出于某种原因决定跳过暂停状态并终止应用程序时，才会真正调用它。\n\n#### 点击事件（不包括手势）\n这里点击事件切面分为3类\n1.UIControl的addTarget触发，UIButton都会走UIApplication里的这方法，但需要忽略一部分，不然会和第二个部分重叠，而且手势addTarget不走，不过手势不走正好可以区分手势\n```\n-(void)sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;\n```\n2.设置delegate委托式系统点击触发，这里直接切了UICollectionView，UITableView，UITabBarController，UITabBar，UIAlertView，UIActionSheet这几个setDelegate方法，然后加标识判断切委托方法，用Aspects库的方法swizzing因为他不允许重复swizzing算双保险。\n\n3.UIAlertAction切block属性的set方法，每次setBlock的时候替换成我自己的block，在我的block内执行设置的block。\n\n下面就是协议，用pod的话AOPLogger/AOPClick就有了，用的时候类扩展一下AOPLogger遵守协议实现对应方法\n```\n@protocol AOPLoggerClickProtocol <NSObject>\n\n@optional\n- (void)alcp_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;\n- (void)alcp_customIgnore_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;\n- (void)alcp_collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath from:(id)sender;\n- (void)alcp_tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath from:(id)sender;\n- (void)alcp_tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController from:(id)sender;\n- (void)alcp_tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item from:(id)sender;\n- (void)alcp_alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex from:(id)sender;\n- (void)alcp_actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex from:(id)sender;\n- (void)alcp_alertControllerAction:(UIAlertAction *)action from:(id)sender;\n\n@end\n```\nps:覆盖可能不全，漏了什么欢迎git提pull request\n\n#### 手势统计\n这个是切了UIView的addGestureRecognizer方法，每次添加手势的时候我多加个自己AOPLogger的taget-action到gestureRecognizer对象上，这样手势统计就搞定了。\n如果要用这个统计点击和长按，判断一下状态是结束的时候统计gestureRecognizer类型是UITapGestureRecognizer,UILongPressGestureRecognizer就行，其实手势的统计或许都在结束的时候统计区分下类型就够了吧！\n```\n@protocol AOPLoggerGestureRecognizerProtocol <NSObject>\n\n@optional\n-(void)algrp_handleGesture:(UIGestureRecognizer*)gestureRecognizer;\n\n@end\n```\n#### 页面统计\n这个太寻常了，感觉没什么好说，使用方法如上，之所以还提供个pod的AOPLogger/AOPPageView,主要是如果要统计浏览时长逻辑，自己方便实现（如显示的时候runtime随便塞个date进去，消失的时候算一下上报），还有我默认预先忽略了部分页面,省了自己写。\n```\n@protocol AOPLoggerPageViewProtocol <NSObject>\n\n@optional\n-(BOOL)alpvp_viewIgnore:(id)sender;\n-(void)alpvp_viewDidAppear:(BOOL)animated sender:(id)sender;\n-(void)alpvp_viewDidDisappear:(BOOL)animated sender:(id)sender;\n\n@end\n```\n# 业务统计\n业务统计首先放的位置要保证在对应业务线的目录里，毕竟跟业务关联密切，大的业务逻辑调整的时候看一下放业务统计目录下对应的地方需不需要修改。\n#### 无参数方法统计\n这一类就是需要写在业务层里但统计的时候只记录一个Event名，比如有个方法-(void)abc:(id)a b:(id)b c:(id)c;我只是记录他被调用，这种直接AOPLogger调用下[AOPLogger AOPLoggerWithClassString:classString methodString:@\"abc:b:c\" log:@\"abc\"]或扔plist里默认直接解决。\n#### 方法内逻辑处理统计\n这个就有点厉害了，比如下订单的时候我买了一堆东西里面带着各种商品属性，要你把某种属性的商品做统计，只是举例...这时候直接写这个类的类扩展load方法里切面然后写逻辑处理统计，这里不建议用Aspects库，底层保证切一个类的一个方法一次是好用的，可业务层各种奇葩逻辑都会有，想解耦经常用奇招所以最好允许多次切面，dispatch_once保证自己的逻辑需要的切一次就可以了，可以用我简单封装的方法。\n```\n@interface NSObject (AOPLogger)\n\n+(void)al_hookOrAddWithOriginSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;\n\n@end\n```\n#### 前后逻辑关联统计\n这个可以结合点击来讲，比上面还要让人头疼，类似统计我查看一个东西，要记录我在哪点击的查看以及当前页面的数据属性，还有从哪来到当前页面的，要查看东西的id。这个时候就需要结合通用统计来搞了，我们在最底层可以做的是把本身点击的UI对象的默认字典属性和最上层页面的默认字典属性以及点击对象target上层UI对象的默认字典属性做统计，最上层的激活页面这个是可以在任何地方搞出来的，回头我可以把类扩展放上来，在任何页面都可以拿到当前页面，前一个页面以及页面属于第几层。底层在响应默认点击事件之前处理我们的统计逻辑，接下来就是怎么把属性赋值，这个时候就需要我们去切面当前页面里做model赋值的方法然后同时把想要统计的属性赋值到当前页面的默认字典属性里，如果这是cell上的button那么赋值cell的时候就可以切面。\n\n总的来说就是寻找UI对象赋值点，然后切面为UI对象添加统计属性，我们runtime加到所有UI对象上隐藏的默认字典属性字段专门承接关联信息，底层只做读取整合，业务层切面赋值。\n\n这个时候就会发现数据对象与UI对象绑定协议的制定会直接决定实现的复杂度。\n#### 后序\n业务层的统计我个人认为原则上尽量后端做这个事，毕竟要保证统计数据的正确性，其实减少前端统计很重要，毕竟现在web（pc网页），wap（手机网页），小程序，安卓，ios一牵扯业务逻辑统计非常需要统一校准，不然数据绝对超乎你的想象。\n# 归纳统计解耦思路\n统计放到其他端其实解耦思路也是大致相同。。。下面总结：\n1.找底层触发的事件点\n2.业务层找赋值点\n3.使用AOP的思路对上面的地方进行插入我们的统计逻辑\n","source":"_posts/IOS 切面统计事件解耦.md","raw":"---\ntitle: IOS 切面统计事件解耦\ndate: 2017-08-02 02:09:05\ntags:\n    - IOS\n    - 切面\n    - AOP\n    - 日志\n    - AOP解耦\n    - 架构\n    - 统计\n---\n\n统计这个事情可以说是个巨无语的系统，当然不把他独立出来也就不是什么问题了，只是一堆牛皮癣似得代码穿插在项目各个地方，毕竟真正应用到一个app里的统计都跟业务有着很强的绑定关系，脱离业务的统计数据基本没什么大用，先吐槽一波再开始正文。。。。\n![DingTalk20170802140347.png](/assets/blogImage/3994053-18807a49c709e49a.png)\n# 基础封装\n先从用第三方的来说，基本上就只是需要包个壳就ok了，建个manager，初始化sdk一封装，加几个常用统计方法基本ok。常见的方法就是传个event名再加个properties传扩展字典，用户登录状态绑定注销，通用字段增删改，基本上这就满足了大部分需求。。。\n\n如果是纯自己手写，上面说的壳放着，剩下的仿照sdk来，基本功能要实现异步队列记录往本地写数据，定期上传，处理好读写关系是关键，这里不多说不是这篇重点。\n\nps:有个壳才敢放开手折腾优化\n\n#### 切面封装\n切面统计其实可以看我之前的[IOS 百行代码切面日志](http://www.jianshu.com/p/a9219e618ca2)，整个完成的就是切面的封装，看过的基本应该了解这套逻辑切面的时候不关心切面方法的参数的话会非常好用。\n如果业务关联强的情况，虽然也能处理但要针对那些业务作出对应的逻辑，导致切面封装里夹杂很多特殊逻辑,下面的方法内部要对originAOP拆分取所有参，甚至要复制部分业务层逻辑过来最后完成一个统计。\n```\n@interface NSObject (AOPLogger)\n\n/**\n替换或添加类方法，即使替换过也会替换，注意想单次替换使用dispatch_once保证，如果方法从未声明过则会添加失败\n\n@param originalSelector 原方法\n@param swizzledSelector 替换方法\n@param error 错误信息\n*/\n+(void)al_hookOrAddWithOriginClassSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;\n\n\n/**\n替换或添加实例方法，即使替换过也会替换，注意想单次替换使用dispatch_once保证，如果方法从未声明过则会添加失败\n\n@param originalSelector 原方法\n@param swizzledSelector 替换方法\n@param error 错误信息\n*/\n+(void)al_hookOrAddWithOriginSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;\n\n@end\n```\n<!-- more -->\n\n所以我个人建议这里就封装些简单的少参甚至无参的统计，然后基本上简单的通用统计和业务统计建个类或者plist，列一下要切面的类和方法就完成了。\n\n凡事都有特例，如果本身方法内多个参数完成一次统计就不多，那我之前的百行系列就已经足够你解耦了。\n\nps:郑重声明AOP用Aspects不支持切面静态方法，回头有空肯定是要改的，Aspects用class_replaceMethod实现的，没有取isa的过程，用method_exchangeImplementations对IMP置换其实是可以实现的，回头我重写一个关于swizzing的库就换掉Aspects。\n\n# 通用统计\n通用统计就是可以脱离业务完全抽离的部分，这部分其实可以设计部分业务承接，比如通用点击事件可以把点击的UI对象扩展出一个字典的属性值，如此对于通用统计来说只是看看有没有某个属性有的话就扔到统计里，和业务层没有关联，但后面带来的好处很大！这个最后说。\n#### App生命周期统计\n应用生命周期的统计随便建个类，监听下面的通知就ok了，当然这个类就不能销毁了，比较懒得做法直接AOPLogger 类扩展一下init里监听，因为我本身的类里连init方法都没重写。\n\nUIApplicationDidFinishLaunchingNotification （通知名称） --->   application:didFinishLaunchingWithOptions:(委托方法）：在应用程序启动后直接进行应用程序级编码的主要方式。\n\nUIApplicationWillResignActiveNotification(通知名称）--->applicationWillResignActive:（委托方法）：用户按下主屏幕按钮调用 ，不要在此方法中假设将进入后台状态，只是一种临时变化，最终将恢复到活动状态\n\nUIApplicationDidBecomActiveNotification（通知名称） ---->applicationDidBecomeActive:(委托方法）：应用程序按下主屏幕按钮后想要将应用程序切换到前台时调用，应用程序启动时也会调用，可以在其中添加一些应用程序初始化代码\n\nUIApplicationDidEnterBackgroundNotification(通知名称）----->applicationDidEnterBackground:（委托方法）：应用程序在此方法中释放所有可在以后重新创建的资源，保存所有用户数据，关闭网络连接等。如果需要，也可以在这里请求在后台运行更长时间。如果在这里花费了太长时间（超过5秒），系统将断定应用程序的行为异常并终止他。\n\nUIApplicationWillEnterForegroundNotification(通知名称） ---->applicationWillEnterForeground:(委托方法):当应用程序在applicationDidEnterBackground:花费了太长时间，终止后，应该实现此方法来重新创建在applicationDidEnterBackground中销毁的内容，比如重新加载用户数据、重新建立网络连接等。\n\nUIApplicationWllTerminateNotification（通知名称） ----> applicationWillTerminate:(委托方法):现在很少使用，只有在应用程序已进入后台，并且系统出于某种原因决定跳过暂停状态并终止应用程序时，才会真正调用它。\n\n#### 点击事件（不包括手势）\n这里点击事件切面分为3类\n1.UIControl的addTarget触发，UIButton都会走UIApplication里的这方法，但需要忽略一部分，不然会和第二个部分重叠，而且手势addTarget不走，不过手势不走正好可以区分手势\n```\n-(void)sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;\n```\n2.设置delegate委托式系统点击触发，这里直接切了UICollectionView，UITableView，UITabBarController，UITabBar，UIAlertView，UIActionSheet这几个setDelegate方法，然后加标识判断切委托方法，用Aspects库的方法swizzing因为他不允许重复swizzing算双保险。\n\n3.UIAlertAction切block属性的set方法，每次setBlock的时候替换成我自己的block，在我的block内执行设置的block。\n\n下面就是协议，用pod的话AOPLogger/AOPClick就有了，用的时候类扩展一下AOPLogger遵守协议实现对应方法\n```\n@protocol AOPLoggerClickProtocol <NSObject>\n\n@optional\n- (void)alcp_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;\n- (void)alcp_customIgnore_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;\n- (void)alcp_collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath from:(id)sender;\n- (void)alcp_tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath from:(id)sender;\n- (void)alcp_tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController from:(id)sender;\n- (void)alcp_tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item from:(id)sender;\n- (void)alcp_alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex from:(id)sender;\n- (void)alcp_actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex from:(id)sender;\n- (void)alcp_alertControllerAction:(UIAlertAction *)action from:(id)sender;\n\n@end\n```\nps:覆盖可能不全，漏了什么欢迎git提pull request\n\n#### 手势统计\n这个是切了UIView的addGestureRecognizer方法，每次添加手势的时候我多加个自己AOPLogger的taget-action到gestureRecognizer对象上，这样手势统计就搞定了。\n如果要用这个统计点击和长按，判断一下状态是结束的时候统计gestureRecognizer类型是UITapGestureRecognizer,UILongPressGestureRecognizer就行，其实手势的统计或许都在结束的时候统计区分下类型就够了吧！\n```\n@protocol AOPLoggerGestureRecognizerProtocol <NSObject>\n\n@optional\n-(void)algrp_handleGesture:(UIGestureRecognizer*)gestureRecognizer;\n\n@end\n```\n#### 页面统计\n这个太寻常了，感觉没什么好说，使用方法如上，之所以还提供个pod的AOPLogger/AOPPageView,主要是如果要统计浏览时长逻辑，自己方便实现（如显示的时候runtime随便塞个date进去，消失的时候算一下上报），还有我默认预先忽略了部分页面,省了自己写。\n```\n@protocol AOPLoggerPageViewProtocol <NSObject>\n\n@optional\n-(BOOL)alpvp_viewIgnore:(id)sender;\n-(void)alpvp_viewDidAppear:(BOOL)animated sender:(id)sender;\n-(void)alpvp_viewDidDisappear:(BOOL)animated sender:(id)sender;\n\n@end\n```\n# 业务统计\n业务统计首先放的位置要保证在对应业务线的目录里，毕竟跟业务关联密切，大的业务逻辑调整的时候看一下放业务统计目录下对应的地方需不需要修改。\n#### 无参数方法统计\n这一类就是需要写在业务层里但统计的时候只记录一个Event名，比如有个方法-(void)abc:(id)a b:(id)b c:(id)c;我只是记录他被调用，这种直接AOPLogger调用下[AOPLogger AOPLoggerWithClassString:classString methodString:@\"abc:b:c\" log:@\"abc\"]或扔plist里默认直接解决。\n#### 方法内逻辑处理统计\n这个就有点厉害了，比如下订单的时候我买了一堆东西里面带着各种商品属性，要你把某种属性的商品做统计，只是举例...这时候直接写这个类的类扩展load方法里切面然后写逻辑处理统计，这里不建议用Aspects库，底层保证切一个类的一个方法一次是好用的，可业务层各种奇葩逻辑都会有，想解耦经常用奇招所以最好允许多次切面，dispatch_once保证自己的逻辑需要的切一次就可以了，可以用我简单封装的方法。\n```\n@interface NSObject (AOPLogger)\n\n+(void)al_hookOrAddWithOriginSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;\n\n@end\n```\n#### 前后逻辑关联统计\n这个可以结合点击来讲，比上面还要让人头疼，类似统计我查看一个东西，要记录我在哪点击的查看以及当前页面的数据属性，还有从哪来到当前页面的，要查看东西的id。这个时候就需要结合通用统计来搞了，我们在最底层可以做的是把本身点击的UI对象的默认字典属性和最上层页面的默认字典属性以及点击对象target上层UI对象的默认字典属性做统计，最上层的激活页面这个是可以在任何地方搞出来的，回头我可以把类扩展放上来，在任何页面都可以拿到当前页面，前一个页面以及页面属于第几层。底层在响应默认点击事件之前处理我们的统计逻辑，接下来就是怎么把属性赋值，这个时候就需要我们去切面当前页面里做model赋值的方法然后同时把想要统计的属性赋值到当前页面的默认字典属性里，如果这是cell上的button那么赋值cell的时候就可以切面。\n\n总的来说就是寻找UI对象赋值点，然后切面为UI对象添加统计属性，我们runtime加到所有UI对象上隐藏的默认字典属性字段专门承接关联信息，底层只做读取整合，业务层切面赋值。\n\n这个时候就会发现数据对象与UI对象绑定协议的制定会直接决定实现的复杂度。\n#### 后序\n业务层的统计我个人认为原则上尽量后端做这个事，毕竟要保证统计数据的正确性，其实减少前端统计很重要，毕竟现在web（pc网页），wap（手机网页），小程序，安卓，ios一牵扯业务逻辑统计非常需要统一校准，不然数据绝对超乎你的想象。\n# 归纳统计解耦思路\n统计放到其他端其实解耦思路也是大致相同。。。下面总结：\n1.找底层触发的事件点\n2.业务层找赋值点\n3.使用AOP的思路对上面的地方进行插入我们的统计逻辑\n","slug":"IOS 切面统计事件解耦","published":1,"updated":"2021-07-08T09:20:31.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqo0008nhs6ftf74lw3","content":"<p>统计这个事情可以说是个巨无语的系统，当然不把他独立出来也就不是什么问题了，只是一堆牛皮癣似得代码穿插在项目各个地方，毕竟真正应用到一个app里的统计都跟业务有着很强的绑定关系，脱离业务的统计数据基本没什么大用，先吐槽一波再开始正文。。。。<br><img src=\"/assets/blogImage/3994053-18807a49c709e49a.png\" alt=\"DingTalk20170802140347.png\"></p>\n<h1 id=\"基础封装\"><a href=\"#基础封装\" class=\"headerlink\" title=\"基础封装\"></a>基础封装</h1><p>先从用第三方的来说，基本上就只是需要包个壳就ok了，建个manager，初始化sdk一封装，加几个常用统计方法基本ok。常见的方法就是传个event名再加个properties传扩展字典，用户登录状态绑定注销，通用字段增删改，基本上这就满足了大部分需求。。。</p>\n<p>如果是纯自己手写，上面说的壳放着，剩下的仿照sdk来，基本功能要实现异步队列记录往本地写数据，定期上传，处理好读写关系是关键，这里不多说不是这篇重点。</p>\n<p>ps:有个壳才敢放开手折腾优化</p>\n<h4 id=\"切面封装\"><a href=\"#切面封装\" class=\"headerlink\" title=\"切面封装\"></a>切面封装</h4><p>切面统计其实可以看我之前的<a href=\"http://www.jianshu.com/p/a9219e618ca2\" target=\"_blank\" rel=\"noopener\">IOS 百行代码切面日志</a>，整个完成的就是切面的封装，看过的基本应该了解这套逻辑切面的时候不关心切面方法的参数的话会非常好用。<br>如果业务关联强的情况，虽然也能处理但要针对那些业务作出对应的逻辑，导致切面封装里夹杂很多特殊逻辑,下面的方法内部要对originAOP拆分取所有参，甚至要复制部分业务层逻辑过来最后完成一个统计。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject (AOPLogger)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">替换或添加类方法，即使替换过也会替换，注意想单次替换使用dispatch_once保证，如果方法从未声明过则会添加失败</span><br><span class=\"line\"></span><br><span class=\"line\">@param originalSelector 原方法</span><br><span class=\"line\">@param swizzledSelector 替换方法</span><br><span class=\"line\">@param error 错误信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)al_hookOrAddWithOriginClassSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">替换或添加实例方法，即使替换过也会替换，注意想单次替换使用dispatch_once保证，如果方法从未声明过则会添加失败</span><br><span class=\"line\"></span><br><span class=\"line\">@param originalSelector 原方法</span><br><span class=\"line\">@param swizzledSelector 替换方法</span><br><span class=\"line\">@param error 错误信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)al_hookOrAddWithOriginSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>所以我个人建议这里就封装些简单的少参甚至无参的统计，然后基本上简单的通用统计和业务统计建个类或者plist，列一下要切面的类和方法就完成了。</p>\n<p>凡事都有特例，如果本身方法内多个参数完成一次统计就不多，那我之前的百行系列就已经足够你解耦了。</p>\n<p>ps:郑重声明AOP用Aspects不支持切面静态方法，回头有空肯定是要改的，Aspects用class_replaceMethod实现的，没有取isa的过程，用method_exchangeImplementations对IMP置换其实是可以实现的，回头我重写一个关于swizzing的库就换掉Aspects。</p>\n<h1 id=\"通用统计\"><a href=\"#通用统计\" class=\"headerlink\" title=\"通用统计\"></a>通用统计</h1><p>通用统计就是可以脱离业务完全抽离的部分，这部分其实可以设计部分业务承接，比如通用点击事件可以把点击的UI对象扩展出一个字典的属性值，如此对于通用统计来说只是看看有没有某个属性有的话就扔到统计里，和业务层没有关联，但后面带来的好处很大！这个最后说。</p>\n<h4 id=\"App生命周期统计\"><a href=\"#App生命周期统计\" class=\"headerlink\" title=\"App生命周期统计\"></a>App生命周期统计</h4><p>应用生命周期的统计随便建个类，监听下面的通知就ok了，当然这个类就不能销毁了，比较懒得做法直接AOPLogger 类扩展一下init里监听，因为我本身的类里连init方法都没重写。</p>\n<p>UIApplicationDidFinishLaunchingNotification （通知名称） —&gt;   application:didFinishLaunchingWithOptions:(委托方法）：在应用程序启动后直接进行应用程序级编码的主要方式。</p>\n<p>UIApplicationWillResignActiveNotification(通知名称）—&gt;applicationWillResignActive:（委托方法）：用户按下主屏幕按钮调用 ，不要在此方法中假设将进入后台状态，只是一种临时变化，最终将恢复到活动状态</p>\n<p>UIApplicationDidBecomActiveNotification（通知名称） —-&gt;applicationDidBecomeActive:(委托方法）：应用程序按下主屏幕按钮后想要将应用程序切换到前台时调用，应用程序启动时也会调用，可以在其中添加一些应用程序初始化代码</p>\n<p>UIApplicationDidEnterBackgroundNotification(通知名称）—–&gt;applicationDidEnterBackground:（委托方法）：应用程序在此方法中释放所有可在以后重新创建的资源，保存所有用户数据，关闭网络连接等。如果需要，也可以在这里请求在后台运行更长时间。如果在这里花费了太长时间（超过5秒），系统将断定应用程序的行为异常并终止他。</p>\n<p>UIApplicationWillEnterForegroundNotification(通知名称） —-&gt;applicationWillEnterForeground:(委托方法):当应用程序在applicationDidEnterBackground:花费了太长时间，终止后，应该实现此方法来重新创建在applicationDidEnterBackground中销毁的内容，比如重新加载用户数据、重新建立网络连接等。</p>\n<p>UIApplicationWllTerminateNotification（通知名称） —-&gt; applicationWillTerminate:(委托方法):现在很少使用，只有在应用程序已进入后台，并且系统出于某种原因决定跳过暂停状态并终止应用程序时，才会真正调用它。</p>\n<h4 id=\"点击事件（不包括手势）\"><a href=\"#点击事件（不包括手势）\" class=\"headerlink\" title=\"点击事件（不包括手势）\"></a>点击事件（不包括手势）</h4><p>这里点击事件切面分为3类<br>1.UIControl的addTarget触发，UIButton都会走UIApplication里的这方法，但需要忽略一部分，不然会和第二个部分重叠，而且手势addTarget不走，不过手势不走正好可以区分手势<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;</span><br></pre></td></tr></table></figure></p>\n<p>2.设置delegate委托式系统点击触发，这里直接切了UICollectionView，UITableView，UITabBarController，UITabBar，UIAlertView，UIActionSheet这几个setDelegate方法，然后加标识判断切委托方法，用Aspects库的方法swizzing因为他不允许重复swizzing算双保险。</p>\n<p>3.UIAlertAction切block属性的set方法，每次setBlock的时候替换成我自己的block，在我的block内执行设置的block。</p>\n<p>下面就是协议，用pod的话AOPLogger/AOPClick就有了，用的时候类扩展一下AOPLogger遵守协议实现对应方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol AOPLoggerClickProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">- (void)alcp_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;</span><br><span class=\"line\">- (void)alcp_customIgnore_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;</span><br><span class=\"line\">- (void)alcp_collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath from:(id)sender;</span><br><span class=\"line\">- (void)alcp_tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath from:(id)sender;</span><br><span class=\"line\">- (void)alcp_tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController from:(id)sender;</span><br><span class=\"line\">- (void)alcp_tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item from:(id)sender;</span><br><span class=\"line\">- (void)alcp_alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex from:(id)sender;</span><br><span class=\"line\">- (void)alcp_actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex from:(id)sender;</span><br><span class=\"line\">- (void)alcp_alertControllerAction:(UIAlertAction *)action from:(id)sender;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>ps:覆盖可能不全，漏了什么欢迎git提pull request</p>\n<h4 id=\"手势统计\"><a href=\"#手势统计\" class=\"headerlink\" title=\"手势统计\"></a>手势统计</h4><p>这个是切了UIView的addGestureRecognizer方法，每次添加手势的时候我多加个自己AOPLogger的taget-action到gestureRecognizer对象上，这样手势统计就搞定了。<br>如果要用这个统计点击和长按，判断一下状态是结束的时候统计gestureRecognizer类型是UITapGestureRecognizer,UILongPressGestureRecognizer就行，其实手势的统计或许都在结束的时候统计区分下类型就够了吧！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol AOPLoggerGestureRecognizerProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">-(void)algrp_handleGesture:(UIGestureRecognizer*)gestureRecognizer;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"页面统计\"><a href=\"#页面统计\" class=\"headerlink\" title=\"页面统计\"></a>页面统计</h4><p>这个太寻常了，感觉没什么好说，使用方法如上，之所以还提供个pod的AOPLogger/AOPPageView,主要是如果要统计浏览时长逻辑，自己方便实现（如显示的时候runtime随便塞个date进去，消失的时候算一下上报），还有我默认预先忽略了部分页面,省了自己写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol AOPLoggerPageViewProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">-(BOOL)alpvp_viewIgnore:(id)sender;</span><br><span class=\"line\">-(void)alpvp_viewDidAppear:(BOOL)animated sender:(id)sender;</span><br><span class=\"line\">-(void)alpvp_viewDidDisappear:(BOOL)animated sender:(id)sender;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"业务统计\"><a href=\"#业务统计\" class=\"headerlink\" title=\"业务统计\"></a>业务统计</h1><p>业务统计首先放的位置要保证在对应业务线的目录里，毕竟跟业务关联密切，大的业务逻辑调整的时候看一下放业务统计目录下对应的地方需不需要修改。</p>\n<h4 id=\"无参数方法统计\"><a href=\"#无参数方法统计\" class=\"headerlink\" title=\"无参数方法统计\"></a>无参数方法统计</h4><p>这一类就是需要写在业务层里但统计的时候只记录一个Event名，比如有个方法-(void)abc:(id)a b:(id)b c:(id)c;我只是记录他被调用，这种直接AOPLogger调用下[AOPLogger AOPLoggerWithClassString:classString methodString:@”abc:b:c” log:@”abc”]或扔plist里默认直接解决。</p>\n<h4 id=\"方法内逻辑处理统计\"><a href=\"#方法内逻辑处理统计\" class=\"headerlink\" title=\"方法内逻辑处理统计\"></a>方法内逻辑处理统计</h4><p>这个就有点厉害了，比如下订单的时候我买了一堆东西里面带着各种商品属性，要你把某种属性的商品做统计，只是举例…这时候直接写这个类的类扩展load方法里切面然后写逻辑处理统计，这里不建议用Aspects库，底层保证切一个类的一个方法一次是好用的，可业务层各种奇葩逻辑都会有，想解耦经常用奇招所以最好允许多次切面，dispatch_once保证自己的逻辑需要的切一次就可以了，可以用我简单封装的方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject (AOPLogger)</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)al_hookOrAddWithOriginSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"前后逻辑关联统计\"><a href=\"#前后逻辑关联统计\" class=\"headerlink\" title=\"前后逻辑关联统计\"></a>前后逻辑关联统计</h4><p>这个可以结合点击来讲，比上面还要让人头疼，类似统计我查看一个东西，要记录我在哪点击的查看以及当前页面的数据属性，还有从哪来到当前页面的，要查看东西的id。这个时候就需要结合通用统计来搞了，我们在最底层可以做的是把本身点击的UI对象的默认字典属性和最上层页面的默认字典属性以及点击对象target上层UI对象的默认字典属性做统计，最上层的激活页面这个是可以在任何地方搞出来的，回头我可以把类扩展放上来，在任何页面都可以拿到当前页面，前一个页面以及页面属于第几层。底层在响应默认点击事件之前处理我们的统计逻辑，接下来就是怎么把属性赋值，这个时候就需要我们去切面当前页面里做model赋值的方法然后同时把想要统计的属性赋值到当前页面的默认字典属性里，如果这是cell上的button那么赋值cell的时候就可以切面。</p>\n<p>总的来说就是寻找UI对象赋值点，然后切面为UI对象添加统计属性，我们runtime加到所有UI对象上隐藏的默认字典属性字段专门承接关联信息，底层只做读取整合，业务层切面赋值。</p>\n<p>这个时候就会发现数据对象与UI对象绑定协议的制定会直接决定实现的复杂度。</p>\n<h4 id=\"后序\"><a href=\"#后序\" class=\"headerlink\" title=\"后序\"></a>后序</h4><p>业务层的统计我个人认为原则上尽量后端做这个事，毕竟要保证统计数据的正确性，其实减少前端统计很重要，毕竟现在web（pc网页），wap（手机网页），小程序，安卓，ios一牵扯业务逻辑统计非常需要统一校准，不然数据绝对超乎你的想象。</p>\n<h1 id=\"归纳统计解耦思路\"><a href=\"#归纳统计解耦思路\" class=\"headerlink\" title=\"归纳统计解耦思路\"></a>归纳统计解耦思路</h1><p>统计放到其他端其实解耦思路也是大致相同。。。下面总结：<br>1.找底层触发的事件点<br>2.业务层找赋值点<br>3.使用AOP的思路对上面的地方进行插入我们的统计逻辑</p>\n","site":{"data":{}},"excerpt":"<p>统计这个事情可以说是个巨无语的系统，当然不把他独立出来也就不是什么问题了，只是一堆牛皮癣似得代码穿插在项目各个地方，毕竟真正应用到一个app里的统计都跟业务有着很强的绑定关系，脱离业务的统计数据基本没什么大用，先吐槽一波再开始正文。。。。<br><img src=\"/assets/blogImage/3994053-18807a49c709e49a.png\" alt=\"DingTalk20170802140347.png\"></p>\n<h1 id=\"基础封装\"><a href=\"#基础封装\" class=\"headerlink\" title=\"基础封装\"></a>基础封装</h1><p>先从用第三方的来说，基本上就只是需要包个壳就ok了，建个manager，初始化sdk一封装，加几个常用统计方法基本ok。常见的方法就是传个event名再加个properties传扩展字典，用户登录状态绑定注销，通用字段增删改，基本上这就满足了大部分需求。。。</p>\n<p>如果是纯自己手写，上面说的壳放着，剩下的仿照sdk来，基本功能要实现异步队列记录往本地写数据，定期上传，处理好读写关系是关键，这里不多说不是这篇重点。</p>\n<p>ps:有个壳才敢放开手折腾优化</p>\n<h4 id=\"切面封装\"><a href=\"#切面封装\" class=\"headerlink\" title=\"切面封装\"></a>切面封装</h4><p>切面统计其实可以看我之前的<a href=\"http://www.jianshu.com/p/a9219e618ca2\" target=\"_blank\" rel=\"noopener\">IOS 百行代码切面日志</a>，整个完成的就是切面的封装，看过的基本应该了解这套逻辑切面的时候不关心切面方法的参数的话会非常好用。<br>如果业务关联强的情况，虽然也能处理但要针对那些业务作出对应的逻辑，导致切面封装里夹杂很多特殊逻辑,下面的方法内部要对originAOP拆分取所有参，甚至要复制部分业务层逻辑过来最后完成一个统计。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject (AOPLogger)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">替换或添加类方法，即使替换过也会替换，注意想单次替换使用dispatch_once保证，如果方法从未声明过则会添加失败</span><br><span class=\"line\"></span><br><span class=\"line\">@param originalSelector 原方法</span><br><span class=\"line\">@param swizzledSelector 替换方法</span><br><span class=\"line\">@param error 错误信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)al_hookOrAddWithOriginClassSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">替换或添加实例方法，即使替换过也会替换，注意想单次替换使用dispatch_once保证，如果方法从未声明过则会添加失败</span><br><span class=\"line\"></span><br><span class=\"line\">@param originalSelector 原方法</span><br><span class=\"line\">@param swizzledSelector 替换方法</span><br><span class=\"line\">@param error 错误信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">+(void)al_hookOrAddWithOriginSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>","more":"<p>所以我个人建议这里就封装些简单的少参甚至无参的统计，然后基本上简单的通用统计和业务统计建个类或者plist，列一下要切面的类和方法就完成了。</p>\n<p>凡事都有特例，如果本身方法内多个参数完成一次统计就不多，那我之前的百行系列就已经足够你解耦了。</p>\n<p>ps:郑重声明AOP用Aspects不支持切面静态方法，回头有空肯定是要改的，Aspects用class_replaceMethod实现的，没有取isa的过程，用method_exchangeImplementations对IMP置换其实是可以实现的，回头我重写一个关于swizzing的库就换掉Aspects。</p>\n<h1 id=\"通用统计\"><a href=\"#通用统计\" class=\"headerlink\" title=\"通用统计\"></a>通用统计</h1><p>通用统计就是可以脱离业务完全抽离的部分，这部分其实可以设计部分业务承接，比如通用点击事件可以把点击的UI对象扩展出一个字典的属性值，如此对于通用统计来说只是看看有没有某个属性有的话就扔到统计里，和业务层没有关联，但后面带来的好处很大！这个最后说。</p>\n<h4 id=\"App生命周期统计\"><a href=\"#App生命周期统计\" class=\"headerlink\" title=\"App生命周期统计\"></a>App生命周期统计</h4><p>应用生命周期的统计随便建个类，监听下面的通知就ok了，当然这个类就不能销毁了，比较懒得做法直接AOPLogger 类扩展一下init里监听，因为我本身的类里连init方法都没重写。</p>\n<p>UIApplicationDidFinishLaunchingNotification （通知名称） —&gt;   application:didFinishLaunchingWithOptions:(委托方法）：在应用程序启动后直接进行应用程序级编码的主要方式。</p>\n<p>UIApplicationWillResignActiveNotification(通知名称）—&gt;applicationWillResignActive:（委托方法）：用户按下主屏幕按钮调用 ，不要在此方法中假设将进入后台状态，只是一种临时变化，最终将恢复到活动状态</p>\n<p>UIApplicationDidBecomActiveNotification（通知名称） —-&gt;applicationDidBecomeActive:(委托方法）：应用程序按下主屏幕按钮后想要将应用程序切换到前台时调用，应用程序启动时也会调用，可以在其中添加一些应用程序初始化代码</p>\n<p>UIApplicationDidEnterBackgroundNotification(通知名称）—–&gt;applicationDidEnterBackground:（委托方法）：应用程序在此方法中释放所有可在以后重新创建的资源，保存所有用户数据，关闭网络连接等。如果需要，也可以在这里请求在后台运行更长时间。如果在这里花费了太长时间（超过5秒），系统将断定应用程序的行为异常并终止他。</p>\n<p>UIApplicationWillEnterForegroundNotification(通知名称） —-&gt;applicationWillEnterForeground:(委托方法):当应用程序在applicationDidEnterBackground:花费了太长时间，终止后，应该实现此方法来重新创建在applicationDidEnterBackground中销毁的内容，比如重新加载用户数据、重新建立网络连接等。</p>\n<p>UIApplicationWllTerminateNotification（通知名称） —-&gt; applicationWillTerminate:(委托方法):现在很少使用，只有在应用程序已进入后台，并且系统出于某种原因决定跳过暂停状态并终止应用程序时，才会真正调用它。</p>\n<h4 id=\"点击事件（不包括手势）\"><a href=\"#点击事件（不包括手势）\" class=\"headerlink\" title=\"点击事件（不包括手势）\"></a>点击事件（不包括手势）</h4><p>这里点击事件切面分为3类<br>1.UIControl的addTarget触发，UIButton都会走UIApplication里的这方法，但需要忽略一部分，不然会和第二个部分重叠，而且手势addTarget不走，不过手势不走正好可以区分手势<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;</span><br></pre></td></tr></table></figure></p>\n<p>2.设置delegate委托式系统点击触发，这里直接切了UICollectionView，UITableView，UITabBarController，UITabBar，UIAlertView，UIActionSheet这几个setDelegate方法，然后加标识判断切委托方法，用Aspects库的方法swizzing因为他不允许重复swizzing算双保险。</p>\n<p>3.UIAlertAction切block属性的set方法，每次setBlock的时候替换成我自己的block，在我的block内执行设置的block。</p>\n<p>下面就是协议，用pod的话AOPLogger/AOPClick就有了，用的时候类扩展一下AOPLogger遵守协议实现对应方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol AOPLoggerClickProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">- (void)alcp_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;</span><br><span class=\"line\">- (void)alcp_customIgnore_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;</span><br><span class=\"line\">- (void)alcp_collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath from:(id)sender;</span><br><span class=\"line\">- (void)alcp_tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath from:(id)sender;</span><br><span class=\"line\">- (void)alcp_tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController from:(id)sender;</span><br><span class=\"line\">- (void)alcp_tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item from:(id)sender;</span><br><span class=\"line\">- (void)alcp_alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex from:(id)sender;</span><br><span class=\"line\">- (void)alcp_actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex from:(id)sender;</span><br><span class=\"line\">- (void)alcp_alertControllerAction:(UIAlertAction *)action from:(id)sender;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>ps:覆盖可能不全，漏了什么欢迎git提pull request</p>\n<h4 id=\"手势统计\"><a href=\"#手势统计\" class=\"headerlink\" title=\"手势统计\"></a>手势统计</h4><p>这个是切了UIView的addGestureRecognizer方法，每次添加手势的时候我多加个自己AOPLogger的taget-action到gestureRecognizer对象上，这样手势统计就搞定了。<br>如果要用这个统计点击和长按，判断一下状态是结束的时候统计gestureRecognizer类型是UITapGestureRecognizer,UILongPressGestureRecognizer就行，其实手势的统计或许都在结束的时候统计区分下类型就够了吧！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol AOPLoggerGestureRecognizerProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">-(void)algrp_handleGesture:(UIGestureRecognizer*)gestureRecognizer;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"页面统计\"><a href=\"#页面统计\" class=\"headerlink\" title=\"页面统计\"></a>页面统计</h4><p>这个太寻常了，感觉没什么好说，使用方法如上，之所以还提供个pod的AOPLogger/AOPPageView,主要是如果要统计浏览时长逻辑，自己方便实现（如显示的时候runtime随便塞个date进去，消失的时候算一下上报），还有我默认预先忽略了部分页面,省了自己写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol AOPLoggerPageViewProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">-(BOOL)alpvp_viewIgnore:(id)sender;</span><br><span class=\"line\">-(void)alpvp_viewDidAppear:(BOOL)animated sender:(id)sender;</span><br><span class=\"line\">-(void)alpvp_viewDidDisappear:(BOOL)animated sender:(id)sender;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"业务统计\"><a href=\"#业务统计\" class=\"headerlink\" title=\"业务统计\"></a>业务统计</h1><p>业务统计首先放的位置要保证在对应业务线的目录里，毕竟跟业务关联密切，大的业务逻辑调整的时候看一下放业务统计目录下对应的地方需不需要修改。</p>\n<h4 id=\"无参数方法统计\"><a href=\"#无参数方法统计\" class=\"headerlink\" title=\"无参数方法统计\"></a>无参数方法统计</h4><p>这一类就是需要写在业务层里但统计的时候只记录一个Event名，比如有个方法-(void)abc:(id)a b:(id)b c:(id)c;我只是记录他被调用，这种直接AOPLogger调用下[AOPLogger AOPLoggerWithClassString:classString methodString:@”abc:b:c” log:@”abc”]或扔plist里默认直接解决。</p>\n<h4 id=\"方法内逻辑处理统计\"><a href=\"#方法内逻辑处理统计\" class=\"headerlink\" title=\"方法内逻辑处理统计\"></a>方法内逻辑处理统计</h4><p>这个就有点厉害了，比如下订单的时候我买了一堆东西里面带着各种商品属性，要你把某种属性的商品做统计，只是举例…这时候直接写这个类的类扩展load方法里切面然后写逻辑处理统计，这里不建议用Aspects库，底层保证切一个类的一个方法一次是好用的，可业务层各种奇葩逻辑都会有，想解耦经常用奇招所以最好允许多次切面，dispatch_once保证自己的逻辑需要的切一次就可以了，可以用我简单封装的方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject (AOPLogger)</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)al_hookOrAddWithOriginSeletor:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector error:(NSError**)error;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"前后逻辑关联统计\"><a href=\"#前后逻辑关联统计\" class=\"headerlink\" title=\"前后逻辑关联统计\"></a>前后逻辑关联统计</h4><p>这个可以结合点击来讲，比上面还要让人头疼，类似统计我查看一个东西，要记录我在哪点击的查看以及当前页面的数据属性，还有从哪来到当前页面的，要查看东西的id。这个时候就需要结合通用统计来搞了，我们在最底层可以做的是把本身点击的UI对象的默认字典属性和最上层页面的默认字典属性以及点击对象target上层UI对象的默认字典属性做统计，最上层的激活页面这个是可以在任何地方搞出来的，回头我可以把类扩展放上来，在任何页面都可以拿到当前页面，前一个页面以及页面属于第几层。底层在响应默认点击事件之前处理我们的统计逻辑，接下来就是怎么把属性赋值，这个时候就需要我们去切面当前页面里做model赋值的方法然后同时把想要统计的属性赋值到当前页面的默认字典属性里，如果这是cell上的button那么赋值cell的时候就可以切面。</p>\n<p>总的来说就是寻找UI对象赋值点，然后切面为UI对象添加统计属性，我们runtime加到所有UI对象上隐藏的默认字典属性字段专门承接关联信息，底层只做读取整合，业务层切面赋值。</p>\n<p>这个时候就会发现数据对象与UI对象绑定协议的制定会直接决定实现的复杂度。</p>\n<h4 id=\"后序\"><a href=\"#后序\" class=\"headerlink\" title=\"后序\"></a>后序</h4><p>业务层的统计我个人认为原则上尽量后端做这个事，毕竟要保证统计数据的正确性，其实减少前端统计很重要，毕竟现在web（pc网页），wap（手机网页），小程序，安卓，ios一牵扯业务逻辑统计非常需要统一校准，不然数据绝对超乎你的想象。</p>\n<h1 id=\"归纳统计解耦思路\"><a href=\"#归纳统计解耦思路\" class=\"headerlink\" title=\"归纳统计解耦思路\"></a>归纳统计解耦思路</h1><p>统计放到其他端其实解耦思路也是大致相同。。。下面总结：<br>1.找底层触发的事件点<br>2.业务层找赋值点<br>3.使用AOP的思路对上面的地方进行插入我们的统计逻辑</p>"},{"title":"IOS 网络服务层自动化详解","date":"2017-03-01T18:09:05.000Z","_content":"\n# 前言\n之前的文章http://www.jianshu.com/p/7a3a387584c6 最后提到了网络服务层自动化，今天在详细说说。之前封装了ServerAPI，这套框架本身其实相当于定义了一套规范的。\n自动化的概念还是放最后，先讲清楚这框架，到了后面自动化概念自然而然就出来了。\n#ServerAPI 分析与网络服务层构建\n框架本身构成主要有4部分\n### ServerAPI\n主要对后台的API接口做对应描述，相当于网络请求的配置文件Model，定义了请求地址，重试次数，超时时间，返回数据类型，解析数据类型，上传方式等等，，除了常用描述还封装了常用方法算是个标准的胖Model\n常用方法例如，请求地址这里也是拆分成host ，path ，pathParameter，parameter，内部封装了组合逻辑，下面4个属性\nhost：http://xxxx/\npath：module/{xxxmudleID}\npathParameter：xxxmudleID:xxxx\nparameter：key:value\n可以拼成http://xxxx/module/xxxmudleID?key=value 这个url，还有自动为每一次请求生成唯一ID，对请求打Tag方便归类，包括发起请求这也提供了方法，不过实现当然不在这，毕竟他只负责描述\n\n\n### ServerAPIManager\n主要负责管理请求和根据api发起请求，框架内他只是一个管理者逻辑，对发起的请求做归类管理，而发起请求包括缓存逻辑这里通过Category来实现，而具体要实现哪些，由最后面的协议类定义，这样框架本身不去对网络层实现，缓存层实现做干涉，方便更自由的定制化，例如网络层AFN，ASI，还是其他语言都跟框架本身无关，所以这里框架本身只是一个壳，移植性较高，同样的思想拿到其他平台依然适用\n### ServerResult\n主要把返回的数据用通用型实体表示，包括发起的api，发起请求的request对象，返回的源数据，返回的格式化数据，返回的错误，状态等，由于牵扯到数据格式化，所以这里依然是通过Category实现对应方法，方便扩展\n\nps：不支持扩展的语言，继承也可以\n<!-- more -->\n### ServerAPIProtocol\n主要负责定义要在Category里实现的方法，这里我直接放源码，注释还算全，关键内容不多，这就是描述要实现哪些才能让框架跑起来，具体方法放那里具体怎么用每个人有每个人不同的想法\n```Objective-C\n//通过Category对ServerAPI实现对应的协议\n\n@class ServerAPI;\n\ntypedef void  (^sap_requestFailHandle)(ServerResult *result, NSError* errInfo);\ntypedef void  (^sap_requestSuccessHandle)(ServerResult *result);\n\n#pragma mark - 必须实现的协议\n@protocol ServerAPIManagerRequestProtocol <NSObject>\n\n@required\n\n/**\n发起请求逻辑实现 方便用AFN，ASI或自己写\n@param api 请求描述的ServerAPI\n@param completion 请求回调\n@param progressHandle 请求进度\n*/\n-(void)requestDataWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion progressHandle:(sap_progressHandle)progressHandle;\n\n/**\n取消一个请求\n@param api 请求描述的ServerAPI\n*/\n-(void)cancelRequestWithAPI:(ServerAPI*)api;\n\n@optional\n\n/**\n发起请求逻辑实现 方便用AFN，ASI或自己写\n@param api 请求描述的ServerAPI\n@param successHandle 请求成功回调\n@param failHandle 请求失败回调\n@param progressHandle 请求进度\n*/\n-(void)requestDataWithAPI:(ServerAPI*)api successHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle progressHandle:(sap_progressHandle)progressHandle;\n\n\n/**\n根据requestID取消一个请求\n@param requestID 请求唯一ID\n*/\n-(void)cancelRequestWithRequestID:(NSString*)requestID;\n\n/**\n根据requestsTag取消某一类表示的请求\n@param requestsTag 请求分类标识\n*/\n-(void)cancelRequestWithRequestsTag:(NSString*)requestsTag;\n\n/**\n根据requestID数组取消相关请求\n@param requestList requestID的数组\n*/\n-(void)cancelRequestWithRequestIDList:(NSArray*)requestList;\n\n/**\n根据ServerAPI数组取消相关请求\n@param requestList ServerAPI的数组\n*/\n-(void)cancelRequestWithAPIList:(NSArray*)requestList;\n\n/**\n取消最后一个请求\n*/\n-(void)cancelLastRequest;\n\n/**\n取消第一个请求\n*/\n-(void)cancelFirstRequest;\n\n@end\n\n@protocol ServerAPIResponseProtocol <NSObject>\n\n@required\n\n/**\n请求结束时间   最好设置时放到responseFormatWithData方法内\n@return 请求结束时间\n*/\n-(NSDate *)endDate;\n\n/**\n数据格式化处理\n@param data 数据源\n@param error 错误源\n@param completion 请求回调\n@param cacheData 缓存数据\n*/\n-(void)responseFormatWithData:(id)data error:(NSError*)error completion:(sap_requestCompletion)completion cacheData:(id)cacheData;\n@optional\n\n/**\n数据格式化后的处理 用于对ServerAPI实现Category加入部分业务逻辑\n@param result 格式化数据\n*/\n-(void)responseCustomDoInCategoryWithResult:(ServerResult*)result;\n\n@end\n\n#pragma mark - 可选协议\n@protocol ServerAPIManagerCacheProtocol <NSObject>\n\n@optional\n\n/**\n拉取缓存数据\n@param api 请求描述的ServerAPI\n@param completion 请求回调\n@param error 错误信息\n@return 缓存有无\n*/\n-(BOOL)fetchDataCacheWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion error:(NSError*)error;\n\n/**\n拉取缓存数据\n@param api 请求描述的ServerAPI\n@param successHandle 请求成功回调\n@param failHandle 请求失败回调\n@param error 错误信息\n@return 缓存有无\n*/\n-(BOOL)fetchDataCacheWithAPI:(ServerAPI*)api successHandle:(sap_requestCompletion)successHandle failHandle:(sap_requestFailHandle)failHandle error:(NSError*)error;\n\n/**\n保存缓存\n@param api 请求描述的ServerAPI\n*/\n-(void)saveDataCacheWithResult:(ServerAPI*)api;\n@end\n\n/**\n与ServerAPIRequstProtocol的协议有重叠主要用于内部封装逻辑\n*/\n@protocol ServerAPIRequstOptionalProtocol <NSObject>\n\n@optional\n-(void)requestDataWithSuccessHandle:(sap_requestCompletion)successHandle failHandle:(sap_requestFailHandle)failHandle;\n\n+(ServerAPI*)newRequestDataWithSuccessHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle;\n\n@end\n\n/**\n与ServerAPIManagerRequestProtocol的协议有重叠主要用于内部封装逻辑\n*/\n@protocol ServerAPIManagerRequestOptionalProtocol <NSObject>\n\n@optional\n-(void)requestDataWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion progressHandle:(sap_progressHandle)progressHandle;\n\n-(void)requestDataWithAPI:(ServerAPI*)api successHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle;\n\n-(void)cancelRequestWithAPI:(ServerAPI*)api;\n-(void)cancelRequestWithRequestID:(NSString*)requestID;\n-(void)cancelRequestWithRequestsTag:(NSString*)requestsTag;\n-(void)cancelRequestWithRequestIDList:(NSArray*)requestList;\n-(void)cancelRequestWithAPIList:(NSArray*)requestList;\n-(void)cancelLastRequest;\n-(void)cancelFirstRequest;\n\n@end\n```\n源码地址：https://github.com/heroims/ServerAPI/\n#ServerAPI使用\n下面说说怎么用，按这种模式填充完自己定制的方法实现后，既可以当做离散型API用也会可以当做集约型API用，还可以直接用URL\n```Objective-C\n//离散型API使用  一个请求是一个API类，用NSClassFromString主要为了省头文件引用懒得加头文件。。。           \n[NSClassFromString(@\"DemoAPI\") newRequestDataWithCompletion:^(ServerResult *result, NSError *errInfo) {\n\n} requestParameters:nil requestTag:NSStringFromClass([self class])];\n\nServerAPI *discreteApi=[[NSClassFromString(@\"DemoAPI\") alloc] init];\ndiscreteApi.requestParameters=nil;\ndiscreteApi.requestTag=NSStringFromClass([self class]);\n[discreteApi requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) {\n\n}];\n\n//集约型API使用  可以直接类扩展加静态方法设置，可以自行类扩展个更简洁通用的方法这里只距离\nServerAPI *intensiveAPI=[[ServerAPI alloc] init];\nintensiveAPI.requestHost=@\"http://xxx.xxx.xxx\";\nintensiveAPI.requestPath=@\"xxx\";\nintensiveAPI.requestParameters=nil;\nintensiveAPI.requestTag=NSStringFromClass([self class]);\nintensiveAPI.accessType=APIAccessType_Get;\nintensiveAPI.resultFormat=APIResultFormat_JSON;\nintensiveAPI.timeOut=30;\nintensiveAPI.retryTimes=2;\n[intensiveAPI requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) {\n\n}];\n\n//直接请求Url\nServerAPI *urlAPI=[[ServerAPI alloc] init];\nurlAPI.requestURL=@\"http://xxx.xxx.xxx\";\nurlAPI.requestTag=NSStringFromClass([self class]);\n[urlAPI requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) {\n\n}];\n\n```\n# ServerAPI自动化产出（离散型API好处）\n当采用了离散型API时，调用的时候通常只需要初始化对应的API，传入后台要的参数，至此数据返回，一个请求完成。\n通过继承ServerAPI，return 描述的固定值一个对应的API类就创建完成，然后回到之前的文章，如果服务端写的代码工整或有地方统一定义直接可以自动导出一套API的所有描述文件，也就是各各XXXAPI，哪怕代码不工整，API文档总该有吧，有点格式就可以读出来自动生成API，如果还没有，，，，好吧，那就帮他们规范化所以有了下面我用Swift写的工具 。\n#### ServerAPICreator\nhttps://github.com/heroims/ServerAPICreator\n功能很简单，就是对API接口的描述，填完自动生成wiki.md和一堆XXXAPI.h,XXXAPI.m文件。\n这种东西就是定制化比较高的东西了，所以代码也就看看吧，拿来直接用是不可能的，怎样都要改改，但思路相信看到这的人基本都有了\n\n![687474703a2f2f6865726f696d732e6769746875622e696f2f53657276657241504943726561746f722f32414530344336422d364233422d343738332d393537322d4143423746333632314641432e706e67.png](/assets/blogImage/3994053-254e821d28eb7c80.png)\n\n### 联想\n按照这种设计架构的方式很多层面的东西都会渐渐的用描述解决，开发一套东西需要的是脚本描述。核心引擎好了，想想人工智能是不是不断积累数据，产出脚本描述然后不断的自动写代码给自己打patch（随便一说扯扯淡）。。。。\n","source":"_posts/IOS 网络服务层自动化详解.md","raw":"---\ntitle: IOS 网络服务层自动化详解\ndate: 2017-03-02 02:09:05\ntags:\n    - IOS\n    - 网络层\n    - 自动化\n    - 架构设计\n---\n\n# 前言\n之前的文章http://www.jianshu.com/p/7a3a387584c6 最后提到了网络服务层自动化，今天在详细说说。之前封装了ServerAPI，这套框架本身其实相当于定义了一套规范的。\n自动化的概念还是放最后，先讲清楚这框架，到了后面自动化概念自然而然就出来了。\n#ServerAPI 分析与网络服务层构建\n框架本身构成主要有4部分\n### ServerAPI\n主要对后台的API接口做对应描述，相当于网络请求的配置文件Model，定义了请求地址，重试次数，超时时间，返回数据类型，解析数据类型，上传方式等等，，除了常用描述还封装了常用方法算是个标准的胖Model\n常用方法例如，请求地址这里也是拆分成host ，path ，pathParameter，parameter，内部封装了组合逻辑，下面4个属性\nhost：http://xxxx/\npath：module/{xxxmudleID}\npathParameter：xxxmudleID:xxxx\nparameter：key:value\n可以拼成http://xxxx/module/xxxmudleID?key=value 这个url，还有自动为每一次请求生成唯一ID，对请求打Tag方便归类，包括发起请求这也提供了方法，不过实现当然不在这，毕竟他只负责描述\n\n\n### ServerAPIManager\n主要负责管理请求和根据api发起请求，框架内他只是一个管理者逻辑，对发起的请求做归类管理，而发起请求包括缓存逻辑这里通过Category来实现，而具体要实现哪些，由最后面的协议类定义，这样框架本身不去对网络层实现，缓存层实现做干涉，方便更自由的定制化，例如网络层AFN，ASI，还是其他语言都跟框架本身无关，所以这里框架本身只是一个壳，移植性较高，同样的思想拿到其他平台依然适用\n### ServerResult\n主要把返回的数据用通用型实体表示，包括发起的api，发起请求的request对象，返回的源数据，返回的格式化数据，返回的错误，状态等，由于牵扯到数据格式化，所以这里依然是通过Category实现对应方法，方便扩展\n\nps：不支持扩展的语言，继承也可以\n<!-- more -->\n### ServerAPIProtocol\n主要负责定义要在Category里实现的方法，这里我直接放源码，注释还算全，关键内容不多，这就是描述要实现哪些才能让框架跑起来，具体方法放那里具体怎么用每个人有每个人不同的想法\n```Objective-C\n//通过Category对ServerAPI实现对应的协议\n\n@class ServerAPI;\n\ntypedef void  (^sap_requestFailHandle)(ServerResult *result, NSError* errInfo);\ntypedef void  (^sap_requestSuccessHandle)(ServerResult *result);\n\n#pragma mark - 必须实现的协议\n@protocol ServerAPIManagerRequestProtocol <NSObject>\n\n@required\n\n/**\n发起请求逻辑实现 方便用AFN，ASI或自己写\n@param api 请求描述的ServerAPI\n@param completion 请求回调\n@param progressHandle 请求进度\n*/\n-(void)requestDataWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion progressHandle:(sap_progressHandle)progressHandle;\n\n/**\n取消一个请求\n@param api 请求描述的ServerAPI\n*/\n-(void)cancelRequestWithAPI:(ServerAPI*)api;\n\n@optional\n\n/**\n发起请求逻辑实现 方便用AFN，ASI或自己写\n@param api 请求描述的ServerAPI\n@param successHandle 请求成功回调\n@param failHandle 请求失败回调\n@param progressHandle 请求进度\n*/\n-(void)requestDataWithAPI:(ServerAPI*)api successHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle progressHandle:(sap_progressHandle)progressHandle;\n\n\n/**\n根据requestID取消一个请求\n@param requestID 请求唯一ID\n*/\n-(void)cancelRequestWithRequestID:(NSString*)requestID;\n\n/**\n根据requestsTag取消某一类表示的请求\n@param requestsTag 请求分类标识\n*/\n-(void)cancelRequestWithRequestsTag:(NSString*)requestsTag;\n\n/**\n根据requestID数组取消相关请求\n@param requestList requestID的数组\n*/\n-(void)cancelRequestWithRequestIDList:(NSArray*)requestList;\n\n/**\n根据ServerAPI数组取消相关请求\n@param requestList ServerAPI的数组\n*/\n-(void)cancelRequestWithAPIList:(NSArray*)requestList;\n\n/**\n取消最后一个请求\n*/\n-(void)cancelLastRequest;\n\n/**\n取消第一个请求\n*/\n-(void)cancelFirstRequest;\n\n@end\n\n@protocol ServerAPIResponseProtocol <NSObject>\n\n@required\n\n/**\n请求结束时间   最好设置时放到responseFormatWithData方法内\n@return 请求结束时间\n*/\n-(NSDate *)endDate;\n\n/**\n数据格式化处理\n@param data 数据源\n@param error 错误源\n@param completion 请求回调\n@param cacheData 缓存数据\n*/\n-(void)responseFormatWithData:(id)data error:(NSError*)error completion:(sap_requestCompletion)completion cacheData:(id)cacheData;\n@optional\n\n/**\n数据格式化后的处理 用于对ServerAPI实现Category加入部分业务逻辑\n@param result 格式化数据\n*/\n-(void)responseCustomDoInCategoryWithResult:(ServerResult*)result;\n\n@end\n\n#pragma mark - 可选协议\n@protocol ServerAPIManagerCacheProtocol <NSObject>\n\n@optional\n\n/**\n拉取缓存数据\n@param api 请求描述的ServerAPI\n@param completion 请求回调\n@param error 错误信息\n@return 缓存有无\n*/\n-(BOOL)fetchDataCacheWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion error:(NSError*)error;\n\n/**\n拉取缓存数据\n@param api 请求描述的ServerAPI\n@param successHandle 请求成功回调\n@param failHandle 请求失败回调\n@param error 错误信息\n@return 缓存有无\n*/\n-(BOOL)fetchDataCacheWithAPI:(ServerAPI*)api successHandle:(sap_requestCompletion)successHandle failHandle:(sap_requestFailHandle)failHandle error:(NSError*)error;\n\n/**\n保存缓存\n@param api 请求描述的ServerAPI\n*/\n-(void)saveDataCacheWithResult:(ServerAPI*)api;\n@end\n\n/**\n与ServerAPIRequstProtocol的协议有重叠主要用于内部封装逻辑\n*/\n@protocol ServerAPIRequstOptionalProtocol <NSObject>\n\n@optional\n-(void)requestDataWithSuccessHandle:(sap_requestCompletion)successHandle failHandle:(sap_requestFailHandle)failHandle;\n\n+(ServerAPI*)newRequestDataWithSuccessHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle;\n\n@end\n\n/**\n与ServerAPIManagerRequestProtocol的协议有重叠主要用于内部封装逻辑\n*/\n@protocol ServerAPIManagerRequestOptionalProtocol <NSObject>\n\n@optional\n-(void)requestDataWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion progressHandle:(sap_progressHandle)progressHandle;\n\n-(void)requestDataWithAPI:(ServerAPI*)api successHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle;\n\n-(void)cancelRequestWithAPI:(ServerAPI*)api;\n-(void)cancelRequestWithRequestID:(NSString*)requestID;\n-(void)cancelRequestWithRequestsTag:(NSString*)requestsTag;\n-(void)cancelRequestWithRequestIDList:(NSArray*)requestList;\n-(void)cancelRequestWithAPIList:(NSArray*)requestList;\n-(void)cancelLastRequest;\n-(void)cancelFirstRequest;\n\n@end\n```\n源码地址：https://github.com/heroims/ServerAPI/\n#ServerAPI使用\n下面说说怎么用，按这种模式填充完自己定制的方法实现后，既可以当做离散型API用也会可以当做集约型API用，还可以直接用URL\n```Objective-C\n//离散型API使用  一个请求是一个API类，用NSClassFromString主要为了省头文件引用懒得加头文件。。。           \n[NSClassFromString(@\"DemoAPI\") newRequestDataWithCompletion:^(ServerResult *result, NSError *errInfo) {\n\n} requestParameters:nil requestTag:NSStringFromClass([self class])];\n\nServerAPI *discreteApi=[[NSClassFromString(@\"DemoAPI\") alloc] init];\ndiscreteApi.requestParameters=nil;\ndiscreteApi.requestTag=NSStringFromClass([self class]);\n[discreteApi requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) {\n\n}];\n\n//集约型API使用  可以直接类扩展加静态方法设置，可以自行类扩展个更简洁通用的方法这里只距离\nServerAPI *intensiveAPI=[[ServerAPI alloc] init];\nintensiveAPI.requestHost=@\"http://xxx.xxx.xxx\";\nintensiveAPI.requestPath=@\"xxx\";\nintensiveAPI.requestParameters=nil;\nintensiveAPI.requestTag=NSStringFromClass([self class]);\nintensiveAPI.accessType=APIAccessType_Get;\nintensiveAPI.resultFormat=APIResultFormat_JSON;\nintensiveAPI.timeOut=30;\nintensiveAPI.retryTimes=2;\n[intensiveAPI requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) {\n\n}];\n\n//直接请求Url\nServerAPI *urlAPI=[[ServerAPI alloc] init];\nurlAPI.requestURL=@\"http://xxx.xxx.xxx\";\nurlAPI.requestTag=NSStringFromClass([self class]);\n[urlAPI requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) {\n\n}];\n\n```\n# ServerAPI自动化产出（离散型API好处）\n当采用了离散型API时，调用的时候通常只需要初始化对应的API，传入后台要的参数，至此数据返回，一个请求完成。\n通过继承ServerAPI，return 描述的固定值一个对应的API类就创建完成，然后回到之前的文章，如果服务端写的代码工整或有地方统一定义直接可以自动导出一套API的所有描述文件，也就是各各XXXAPI，哪怕代码不工整，API文档总该有吧，有点格式就可以读出来自动生成API，如果还没有，，，，好吧，那就帮他们规范化所以有了下面我用Swift写的工具 。\n#### ServerAPICreator\nhttps://github.com/heroims/ServerAPICreator\n功能很简单，就是对API接口的描述，填完自动生成wiki.md和一堆XXXAPI.h,XXXAPI.m文件。\n这种东西就是定制化比较高的东西了，所以代码也就看看吧，拿来直接用是不可能的，怎样都要改改，但思路相信看到这的人基本都有了\n\n![687474703a2f2f6865726f696d732e6769746875622e696f2f53657276657241504943726561746f722f32414530344336422d364233422d343738332d393537322d4143423746333632314641432e706e67.png](/assets/blogImage/3994053-254e821d28eb7c80.png)\n\n### 联想\n按照这种设计架构的方式很多层面的东西都会渐渐的用描述解决，开发一套东西需要的是脚本描述。核心引擎好了，想想人工智能是不是不断积累数据，产出脚本描述然后不断的自动写代码给自己打patch（随便一说扯扯淡）。。。。\n","slug":"IOS 网络服务层自动化详解","published":1,"updated":"2021-07-08T09:20:31.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqq000anhs652n0q7ja","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前的文章<a href=\"http://www.jianshu.com/p/7a3a387584c6\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/7a3a387584c6</a> 最后提到了网络服务层自动化，今天在详细说说。之前封装了ServerAPI，这套框架本身其实相当于定义了一套规范的。<br>自动化的概念还是放最后，先讲清楚这框架，到了后面自动化概念自然而然就出来了。</p>\n<p>#ServerAPI 分析与网络服务层构建<br>框架本身构成主要有4部分</p>\n<h3 id=\"ServerAPI\"><a href=\"#ServerAPI\" class=\"headerlink\" title=\"ServerAPI\"></a>ServerAPI</h3><p>主要对后台的API接口做对应描述，相当于网络请求的配置文件Model，定义了请求地址，重试次数，超时时间，返回数据类型，解析数据类型，上传方式等等，，除了常用描述还封装了常用方法算是个标准的胖Model<br>常用方法例如，请求地址这里也是拆分成host ，path ，pathParameter，parameter，内部封装了组合逻辑，下面4个属性<br>host：<a href=\"http://xxxx/\" target=\"_blank\" rel=\"noopener\">http://xxxx/</a><br>path：module/{xxxmudleID}<br>pathParameter：xxxmudleID:xxxx<br>parameter：key:value<br>可以拼成<a href=\"http://xxxx/module/xxxmudleID?key=value\" target=\"_blank\" rel=\"noopener\">http://xxxx/module/xxxmudleID?key=value</a> 这个url，还有自动为每一次请求生成唯一ID，对请求打Tag方便归类，包括发起请求这也提供了方法，不过实现当然不在这，毕竟他只负责描述</p>\n<h3 id=\"ServerAPIManager\"><a href=\"#ServerAPIManager\" class=\"headerlink\" title=\"ServerAPIManager\"></a>ServerAPIManager</h3><p>主要负责管理请求和根据api发起请求，框架内他只是一个管理者逻辑，对发起的请求做归类管理，而发起请求包括缓存逻辑这里通过Category来实现，而具体要实现哪些，由最后面的协议类定义，这样框架本身不去对网络层实现，缓存层实现做干涉，方便更自由的定制化，例如网络层AFN，ASI，还是其他语言都跟框架本身无关，所以这里框架本身只是一个壳，移植性较高，同样的思想拿到其他平台依然适用</p>\n<h3 id=\"ServerResult\"><a href=\"#ServerResult\" class=\"headerlink\" title=\"ServerResult\"></a>ServerResult</h3><p>主要把返回的数据用通用型实体表示，包括发起的api，发起请求的request对象，返回的源数据，返回的格式化数据，返回的错误，状态等，由于牵扯到数据格式化，所以这里依然是通过Category实现对应方法，方便扩展</p>\n<p>ps：不支持扩展的语言，继承也可以<br><a id=\"more\"></a></p>\n<h3 id=\"ServerAPIProtocol\"><a href=\"#ServerAPIProtocol\" class=\"headerlink\" title=\"ServerAPIProtocol\"></a>ServerAPIProtocol</h3><p>主要负责定义要在Category里实现的方法，这里我直接放源码，注释还算全，关键内容不多，这就是描述要实现哪些才能让框架跑起来，具体方法放那里具体怎么用每个人有每个人不同的想法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过Category对ServerAPI实现对应的协议</span><br><span class=\"line\"></span><br><span class=\"line\">@class ServerAPI;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef void  (^sap_requestFailHandle)(ServerResult *result, NSError* errInfo);</span><br><span class=\"line\">typedef void  (^sap_requestSuccessHandle)(ServerResult *result);</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 必须实现的协议</span><br><span class=\"line\">@protocol ServerAPIManagerRequestProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">发起请求逻辑实现 方便用AFN，ASI或自己写</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">@param completion 请求回调</span><br><span class=\"line\">@param progressHandle 请求进度</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)requestDataWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion progressHandle:(sap_progressHandle)progressHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">取消一个请求</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithAPI:(ServerAPI*)api;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">发起请求逻辑实现 方便用AFN，ASI或自己写</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">@param successHandle 请求成功回调</span><br><span class=\"line\">@param failHandle 请求失败回调</span><br><span class=\"line\">@param progressHandle 请求进度</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)requestDataWithAPI:(ServerAPI*)api successHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle progressHandle:(sap_progressHandle)progressHandle;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">根据requestID取消一个请求</span><br><span class=\"line\">@param requestID 请求唯一ID</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithRequestID:(NSString*)requestID;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">根据requestsTag取消某一类表示的请求</span><br><span class=\"line\">@param requestsTag 请求分类标识</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithRequestsTag:(NSString*)requestsTag;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">根据requestID数组取消相关请求</span><br><span class=\"line\">@param requestList requestID的数组</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithRequestIDList:(NSArray*)requestList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">根据ServerAPI数组取消相关请求</span><br><span class=\"line\">@param requestList ServerAPI的数组</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithAPIList:(NSArray*)requestList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">取消最后一个请求</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelLastRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">取消第一个请求</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelFirstRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol ServerAPIResponseProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">请求结束时间   最好设置时放到responseFormatWithData方法内</span><br><span class=\"line\">@return 请求结束时间</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(NSDate *)endDate;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">数据格式化处理</span><br><span class=\"line\">@param data 数据源</span><br><span class=\"line\">@param error 错误源</span><br><span class=\"line\">@param completion 请求回调</span><br><span class=\"line\">@param cacheData 缓存数据</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)responseFormatWithData:(id)data error:(NSError*)error completion:(sap_requestCompletion)completion cacheData:(id)cacheData;</span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">数据格式化后的处理 用于对ServerAPI实现Category加入部分业务逻辑</span><br><span class=\"line\">@param result 格式化数据</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)responseCustomDoInCategoryWithResult:(ServerResult*)result;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 可选协议</span><br><span class=\"line\">@protocol ServerAPIManagerCacheProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">拉取缓存数据</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">@param completion 请求回调</span><br><span class=\"line\">@param error 错误信息</span><br><span class=\"line\">@return 缓存有无</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(BOOL)fetchDataCacheWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion error:(NSError*)error;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">拉取缓存数据</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">@param successHandle 请求成功回调</span><br><span class=\"line\">@param failHandle 请求失败回调</span><br><span class=\"line\">@param error 错误信息</span><br><span class=\"line\">@return 缓存有无</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(BOOL)fetchDataCacheWithAPI:(ServerAPI*)api successHandle:(sap_requestCompletion)successHandle failHandle:(sap_requestFailHandle)failHandle error:(NSError*)error;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">保存缓存</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)saveDataCacheWithResult:(ServerAPI*)api;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">与ServerAPIRequstProtocol的协议有重叠主要用于内部封装逻辑</span><br><span class=\"line\">*/</span><br><span class=\"line\">@protocol ServerAPIRequstOptionalProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">-(void)requestDataWithSuccessHandle:(sap_requestCompletion)successHandle failHandle:(sap_requestFailHandle)failHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">+(ServerAPI*)newRequestDataWithSuccessHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">与ServerAPIManagerRequestProtocol的协议有重叠主要用于内部封装逻辑</span><br><span class=\"line\">*/</span><br><span class=\"line\">@protocol ServerAPIManagerRequestOptionalProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">-(void)requestDataWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion progressHandle:(sap_progressHandle)progressHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)requestDataWithAPI:(ServerAPI*)api successHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)cancelRequestWithAPI:(ServerAPI*)api;</span><br><span class=\"line\">-(void)cancelRequestWithRequestID:(NSString*)requestID;</span><br><span class=\"line\">-(void)cancelRequestWithRequestsTag:(NSString*)requestsTag;</span><br><span class=\"line\">-(void)cancelRequestWithRequestIDList:(NSArray*)requestList;</span><br><span class=\"line\">-(void)cancelRequestWithAPIList:(NSArray*)requestList;</span><br><span class=\"line\">-(void)cancelLastRequest;</span><br><span class=\"line\">-(void)cancelFirstRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>源码地址：<a href=\"https://github.com/heroims/ServerAPI/\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/ServerAPI/</a></p>\n<p>#ServerAPI使用<br>下面说说怎么用，按这种模式填充完自己定制的方法实现后，既可以当做离散型API用也会可以当做集约型API用，还可以直接用URL<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//离散型API使用  一个请求是一个API类，用NSClassFromString主要为了省头文件引用懒得加头文件。。。           </span><br><span class=\"line\">[NSClassFromString(@&quot;DemoAPI&quot;) newRequestDataWithCompletion:^(ServerResult *result, NSError *errInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; requestParameters:nil requestTag:NSStringFromClass([self class])];</span><br><span class=\"line\"></span><br><span class=\"line\">ServerAPI *discreteApi=[[NSClassFromString(@&quot;DemoAPI&quot;) alloc] init];</span><br><span class=\"line\">discreteApi.requestParameters=nil;</span><br><span class=\"line\">discreteApi.requestTag=NSStringFromClass([self class]);</span><br><span class=\"line\">[discreteApi requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">//集约型API使用  可以直接类扩展加静态方法设置，可以自行类扩展个更简洁通用的方法这里只距离</span><br><span class=\"line\">ServerAPI *intensiveAPI=[[ServerAPI alloc] init];</span><br><span class=\"line\">intensiveAPI.requestHost=@&quot;http://xxx.xxx.xxx&quot;;</span><br><span class=\"line\">intensiveAPI.requestPath=@&quot;xxx&quot;;</span><br><span class=\"line\">intensiveAPI.requestParameters=nil;</span><br><span class=\"line\">intensiveAPI.requestTag=NSStringFromClass([self class]);</span><br><span class=\"line\">intensiveAPI.accessType=APIAccessType_Get;</span><br><span class=\"line\">intensiveAPI.resultFormat=APIResultFormat_JSON;</span><br><span class=\"line\">intensiveAPI.timeOut=30;</span><br><span class=\"line\">intensiveAPI.retryTimes=2;</span><br><span class=\"line\">[intensiveAPI requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">//直接请求Url</span><br><span class=\"line\">ServerAPI *urlAPI=[[ServerAPI alloc] init];</span><br><span class=\"line\">urlAPI.requestURL=@&quot;http://xxx.xxx.xxx&quot;;</span><br><span class=\"line\">urlAPI.requestTag=NSStringFromClass([self class]);</span><br><span class=\"line\">[urlAPI requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"ServerAPI自动化产出（离散型API好处）\"><a href=\"#ServerAPI自动化产出（离散型API好处）\" class=\"headerlink\" title=\"ServerAPI自动化产出（离散型API好处）\"></a>ServerAPI自动化产出（离散型API好处）</h1><p>当采用了离散型API时，调用的时候通常只需要初始化对应的API，传入后台要的参数，至此数据返回，一个请求完成。<br>通过继承ServerAPI，return 描述的固定值一个对应的API类就创建完成，然后回到之前的文章，如果服务端写的代码工整或有地方统一定义直接可以自动导出一套API的所有描述文件，也就是各各XXXAPI，哪怕代码不工整，API文档总该有吧，有点格式就可以读出来自动生成API，如果还没有，，，，好吧，那就帮他们规范化所以有了下面我用Swift写的工具 。</p>\n<h4 id=\"ServerAPICreator\"><a href=\"#ServerAPICreator\" class=\"headerlink\" title=\"ServerAPICreator\"></a>ServerAPICreator</h4><p><a href=\"https://github.com/heroims/ServerAPICreator\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/ServerAPICreator</a><br>功能很简单，就是对API接口的描述，填完自动生成wiki.md和一堆XXXAPI.h,XXXAPI.m文件。<br>这种东西就是定制化比较高的东西了，所以代码也就看看吧，拿来直接用是不可能的，怎样都要改改，但思路相信看到这的人基本都有了</p>\n<p><img src=\"/assets/blogImage/3994053-254e821d28eb7c80.png\" alt=\"687474703a2f2f6865726f696d732e6769746875622e696f2f53657276657241504943726561746f722f32414530344336422d364233422d343738332d393537322d4143423746333632314641432e706e67.png\"></p>\n<h3 id=\"联想\"><a href=\"#联想\" class=\"headerlink\" title=\"联想\"></a>联想</h3><p>按照这种设计架构的方式很多层面的东西都会渐渐的用描述解决，开发一套东西需要的是脚本描述。核心引擎好了，想想人工智能是不是不断积累数据，产出脚本描述然后不断的自动写代码给自己打patch（随便一说扯扯淡）。。。。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前的文章<a href=\"http://www.jianshu.com/p/7a3a387584c6\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/7a3a387584c6</a> 最后提到了网络服务层自动化，今天在详细说说。之前封装了ServerAPI，这套框架本身其实相当于定义了一套规范的。<br>自动化的概念还是放最后，先讲清楚这框架，到了后面自动化概念自然而然就出来了。</p>\n<p>#ServerAPI 分析与网络服务层构建<br>框架本身构成主要有4部分</p>\n<h3 id=\"ServerAPI\"><a href=\"#ServerAPI\" class=\"headerlink\" title=\"ServerAPI\"></a>ServerAPI</h3><p>主要对后台的API接口做对应描述，相当于网络请求的配置文件Model，定义了请求地址，重试次数，超时时间，返回数据类型，解析数据类型，上传方式等等，，除了常用描述还封装了常用方法算是个标准的胖Model<br>常用方法例如，请求地址这里也是拆分成host ，path ，pathParameter，parameter，内部封装了组合逻辑，下面4个属性<br>host：<a href=\"http://xxxx/\" target=\"_blank\" rel=\"noopener\">http://xxxx/</a><br>path：module/{xxxmudleID}<br>pathParameter：xxxmudleID:xxxx<br>parameter：key:value<br>可以拼成<a href=\"http://xxxx/module/xxxmudleID?key=value\" target=\"_blank\" rel=\"noopener\">http://xxxx/module/xxxmudleID?key=value</a> 这个url，还有自动为每一次请求生成唯一ID，对请求打Tag方便归类，包括发起请求这也提供了方法，不过实现当然不在这，毕竟他只负责描述</p>\n<h3 id=\"ServerAPIManager\"><a href=\"#ServerAPIManager\" class=\"headerlink\" title=\"ServerAPIManager\"></a>ServerAPIManager</h3><p>主要负责管理请求和根据api发起请求，框架内他只是一个管理者逻辑，对发起的请求做归类管理，而发起请求包括缓存逻辑这里通过Category来实现，而具体要实现哪些，由最后面的协议类定义，这样框架本身不去对网络层实现，缓存层实现做干涉，方便更自由的定制化，例如网络层AFN，ASI，还是其他语言都跟框架本身无关，所以这里框架本身只是一个壳，移植性较高，同样的思想拿到其他平台依然适用</p>\n<h3 id=\"ServerResult\"><a href=\"#ServerResult\" class=\"headerlink\" title=\"ServerResult\"></a>ServerResult</h3><p>主要把返回的数据用通用型实体表示，包括发起的api，发起请求的request对象，返回的源数据，返回的格式化数据，返回的错误，状态等，由于牵扯到数据格式化，所以这里依然是通过Category实现对应方法，方便扩展</p>\n<p>ps：不支持扩展的语言，继承也可以<br>","more":"</p>\n<h3 id=\"ServerAPIProtocol\"><a href=\"#ServerAPIProtocol\" class=\"headerlink\" title=\"ServerAPIProtocol\"></a>ServerAPIProtocol</h3><p>主要负责定义要在Category里实现的方法，这里我直接放源码，注释还算全，关键内容不多，这就是描述要实现哪些才能让框架跑起来，具体方法放那里具体怎么用每个人有每个人不同的想法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过Category对ServerAPI实现对应的协议</span><br><span class=\"line\"></span><br><span class=\"line\">@class ServerAPI;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef void  (^sap_requestFailHandle)(ServerResult *result, NSError* errInfo);</span><br><span class=\"line\">typedef void  (^sap_requestSuccessHandle)(ServerResult *result);</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 必须实现的协议</span><br><span class=\"line\">@protocol ServerAPIManagerRequestProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">发起请求逻辑实现 方便用AFN，ASI或自己写</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">@param completion 请求回调</span><br><span class=\"line\">@param progressHandle 请求进度</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)requestDataWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion progressHandle:(sap_progressHandle)progressHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">取消一个请求</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithAPI:(ServerAPI*)api;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">发起请求逻辑实现 方便用AFN，ASI或自己写</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">@param successHandle 请求成功回调</span><br><span class=\"line\">@param failHandle 请求失败回调</span><br><span class=\"line\">@param progressHandle 请求进度</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)requestDataWithAPI:(ServerAPI*)api successHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle progressHandle:(sap_progressHandle)progressHandle;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">根据requestID取消一个请求</span><br><span class=\"line\">@param requestID 请求唯一ID</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithRequestID:(NSString*)requestID;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">根据requestsTag取消某一类表示的请求</span><br><span class=\"line\">@param requestsTag 请求分类标识</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithRequestsTag:(NSString*)requestsTag;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">根据requestID数组取消相关请求</span><br><span class=\"line\">@param requestList requestID的数组</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithRequestIDList:(NSArray*)requestList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">根据ServerAPI数组取消相关请求</span><br><span class=\"line\">@param requestList ServerAPI的数组</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelRequestWithAPIList:(NSArray*)requestList;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">取消最后一个请求</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelLastRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">取消第一个请求</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)cancelFirstRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol ServerAPIResponseProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@required</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">请求结束时间   最好设置时放到responseFormatWithData方法内</span><br><span class=\"line\">@return 请求结束时间</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(NSDate *)endDate;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">数据格式化处理</span><br><span class=\"line\">@param data 数据源</span><br><span class=\"line\">@param error 错误源</span><br><span class=\"line\">@param completion 请求回调</span><br><span class=\"line\">@param cacheData 缓存数据</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)responseFormatWithData:(id)data error:(NSError*)error completion:(sap_requestCompletion)completion cacheData:(id)cacheData;</span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">数据格式化后的处理 用于对ServerAPI实现Category加入部分业务逻辑</span><br><span class=\"line\">@param result 格式化数据</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)responseCustomDoInCategoryWithResult:(ServerResult*)result;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 可选协议</span><br><span class=\"line\">@protocol ServerAPIManagerCacheProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">拉取缓存数据</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">@param completion 请求回调</span><br><span class=\"line\">@param error 错误信息</span><br><span class=\"line\">@return 缓存有无</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(BOOL)fetchDataCacheWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion error:(NSError*)error;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">拉取缓存数据</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">@param successHandle 请求成功回调</span><br><span class=\"line\">@param failHandle 请求失败回调</span><br><span class=\"line\">@param error 错误信息</span><br><span class=\"line\">@return 缓存有无</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(BOOL)fetchDataCacheWithAPI:(ServerAPI*)api successHandle:(sap_requestCompletion)successHandle failHandle:(sap_requestFailHandle)failHandle error:(NSError*)error;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">保存缓存</span><br><span class=\"line\">@param api 请求描述的ServerAPI</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)saveDataCacheWithResult:(ServerAPI*)api;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">与ServerAPIRequstProtocol的协议有重叠主要用于内部封装逻辑</span><br><span class=\"line\">*/</span><br><span class=\"line\">@protocol ServerAPIRequstOptionalProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">-(void)requestDataWithSuccessHandle:(sap_requestCompletion)successHandle failHandle:(sap_requestFailHandle)failHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">+(ServerAPI*)newRequestDataWithSuccessHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">与ServerAPIManagerRequestProtocol的协议有重叠主要用于内部封装逻辑</span><br><span class=\"line\">*/</span><br><span class=\"line\">@protocol ServerAPIManagerRequestOptionalProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@optional</span><br><span class=\"line\">-(void)requestDataWithAPI:(ServerAPI*)api completion:(sap_requestCompletion)completion progressHandle:(sap_progressHandle)progressHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)requestDataWithAPI:(ServerAPI*)api successHandle:(sap_requestSuccessHandle)successHandle failHandle:(sap_requestFailHandle)failHandle;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)cancelRequestWithAPI:(ServerAPI*)api;</span><br><span class=\"line\">-(void)cancelRequestWithRequestID:(NSString*)requestID;</span><br><span class=\"line\">-(void)cancelRequestWithRequestsTag:(NSString*)requestsTag;</span><br><span class=\"line\">-(void)cancelRequestWithRequestIDList:(NSArray*)requestList;</span><br><span class=\"line\">-(void)cancelRequestWithAPIList:(NSArray*)requestList;</span><br><span class=\"line\">-(void)cancelLastRequest;</span><br><span class=\"line\">-(void)cancelFirstRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>源码地址：<a href=\"https://github.com/heroims/ServerAPI/\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/ServerAPI/</a></p>\n<p>#ServerAPI使用<br>下面说说怎么用，按这种模式填充完自己定制的方法实现后，既可以当做离散型API用也会可以当做集约型API用，还可以直接用URL<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//离散型API使用  一个请求是一个API类，用NSClassFromString主要为了省头文件引用懒得加头文件。。。           </span><br><span class=\"line\">[NSClassFromString(@&quot;DemoAPI&quot;) newRequestDataWithCompletion:^(ServerResult *result, NSError *errInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; requestParameters:nil requestTag:NSStringFromClass([self class])];</span><br><span class=\"line\"></span><br><span class=\"line\">ServerAPI *discreteApi=[[NSClassFromString(@&quot;DemoAPI&quot;) alloc] init];</span><br><span class=\"line\">discreteApi.requestParameters=nil;</span><br><span class=\"line\">discreteApi.requestTag=NSStringFromClass([self class]);</span><br><span class=\"line\">[discreteApi requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">//集约型API使用  可以直接类扩展加静态方法设置，可以自行类扩展个更简洁通用的方法这里只距离</span><br><span class=\"line\">ServerAPI *intensiveAPI=[[ServerAPI alloc] init];</span><br><span class=\"line\">intensiveAPI.requestHost=@&quot;http://xxx.xxx.xxx&quot;;</span><br><span class=\"line\">intensiveAPI.requestPath=@&quot;xxx&quot;;</span><br><span class=\"line\">intensiveAPI.requestParameters=nil;</span><br><span class=\"line\">intensiveAPI.requestTag=NSStringFromClass([self class]);</span><br><span class=\"line\">intensiveAPI.accessType=APIAccessType_Get;</span><br><span class=\"line\">intensiveAPI.resultFormat=APIResultFormat_JSON;</span><br><span class=\"line\">intensiveAPI.timeOut=30;</span><br><span class=\"line\">intensiveAPI.retryTimes=2;</span><br><span class=\"line\">[intensiveAPI requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">//直接请求Url</span><br><span class=\"line\">ServerAPI *urlAPI=[[ServerAPI alloc] init];</span><br><span class=\"line\">urlAPI.requestURL=@&quot;http://xxx.xxx.xxx&quot;;</span><br><span class=\"line\">urlAPI.requestTag=NSStringFromClass([self class]);</span><br><span class=\"line\">[urlAPI requestDataWithCompletion:^(ServerResult *result, NSError *errInfo) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"ServerAPI自动化产出（离散型API好处）\"><a href=\"#ServerAPI自动化产出（离散型API好处）\" class=\"headerlink\" title=\"ServerAPI自动化产出（离散型API好处）\"></a>ServerAPI自动化产出（离散型API好处）</h1><p>当采用了离散型API时，调用的时候通常只需要初始化对应的API，传入后台要的参数，至此数据返回，一个请求完成。<br>通过继承ServerAPI，return 描述的固定值一个对应的API类就创建完成，然后回到之前的文章，如果服务端写的代码工整或有地方统一定义直接可以自动导出一套API的所有描述文件，也就是各各XXXAPI，哪怕代码不工整，API文档总该有吧，有点格式就可以读出来自动生成API，如果还没有，，，，好吧，那就帮他们规范化所以有了下面我用Swift写的工具 。</p>\n<h4 id=\"ServerAPICreator\"><a href=\"#ServerAPICreator\" class=\"headerlink\" title=\"ServerAPICreator\"></a>ServerAPICreator</h4><p><a href=\"https://github.com/heroims/ServerAPICreator\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/ServerAPICreator</a><br>功能很简单，就是对API接口的描述，填完自动生成wiki.md和一堆XXXAPI.h,XXXAPI.m文件。<br>这种东西就是定制化比较高的东西了，所以代码也就看看吧，拿来直接用是不可能的，怎样都要改改，但思路相信看到这的人基本都有了</p>\n<p><img src=\"/assets/blogImage/3994053-254e821d28eb7c80.png\" alt=\"687474703a2f2f6865726f696d732e6769746875622e696f2f53657276657241504943726561746f722f32414530344336422d364233422d343738332d393537322d4143423746333632314641432e706e67.png\"></p>\n<h3 id=\"联想\"><a href=\"#联想\" class=\"headerlink\" title=\"联想\"></a>联想</h3><p>按照这种设计架构的方式很多层面的东西都会渐渐的用描述解决，开发一套东西需要的是脚本描述。核心引擎好了，想想人工智能是不是不断积累数据，产出脚本描述然后不断的自动写代码给自己打patch（随便一说扯扯淡）。。。。</p>"},{"title":"IOS 各类获取授权常用处理","date":"2017-09-29T08:50:41.000Z","_content":"\n# 地理位置授权\n需要引用`#import <CoreLocation/CoreLocation.h>`\n- plist\n```\n始终允许访问位置\nNSLocationAlwaysUsageDescription\n位置\nNSLocationUsageDescription\n在使用期间访问位置\nNSLocationWhenInUseUsageDescription\n始终允许访问位置并且在使用期间访问位置\nNSLocationAlwaysAndWhenInUseUsageDescription\n```\n- 判断\n```\n//判断是否开启\n[CLLocationManager locationServicesEnabled];\n//获取具体状态\n[CLLocationManager authorizationStatus];\n```\n- 授权\n```\nCLLocationManager *locManager = [[CLLocationManager alloc] init];\n[locManager ]\n//获取始终允许访问位置权限\n[locManager requestWhenInUseAuthorization];\n//获取在使用期间访问位置\n[locManager requestAlwaysAuthorization];\n```\n# 相册授权\n需要引用`#import <AssetsLibrary/AssetsLibrary.h>`或`#import <Photos/Photos.h>`\n- plist\n```\n访问相册\nNSPhotoLibraryUsageDescription\n添加相册\nNSPhotoAddLibraryUsageDescription\n```\n- 判断\n```\n[ALAssetsLibrary authorizationStatus];\n\n[PHPhotoLibrary authorizationStatus];\n```\n- 授权\n```\n[PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {\nif (status == PHAuthorizationStatusAuthorized) {\n// 用户同意授权\n}\nelse {\n// 用户拒绝授权\n}\n}];\n```\n# 相机&麦克风授权\n需要引用`#import <AVFoundation/AVFoundation.h>`\n- plist\n```\n相机\nNSCameraUsageDescription\n麦克风\nNSMicrophoneUsageDescription\n```\n- 判断\n```\n//AVMediaTypeVideo相机 AVMediaTypeAudio麦克风\n[AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];\n```\n- 授权\n```\n//AVMediaTypeVideo相机 AVMediaTypeAudio麦克风\n[AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {\n\nif (granted){// 用户同意授权\n\n}\nelse {// 用户拒绝授权\n\n}\n}];\n\n//不推荐慎用\n[[AVAudioSession sharedInstance] performSelector:@selector(requestRecordPermission:) withObject:^(BOOL granted) {\nif (granted){// 用户同意授权\n\n}\nelse {// 用户拒绝授权\n\n}\n}];\n```\n# 通讯录授权\n需要引用`#import <Contacts/Contacts.h>`\n- plist\n```\n通讯录\nNSContactsUsageDescription\n```\n- 判断\n```\n[CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts]\n```\n- 授权\n```\nCNContactStore*contactStore = [[CNContactStore alloc] init];\n\n[contactStore requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted,NSError*_Nullable error) {\nif (granted){// 用户同意授权\n\n}\nelse {// 用户拒绝授权\n\n}\n}];\n```\n<!-- more -->\n# 蜂窝网络授权\n### 目前无解，可能以后也无解\n\n仅可以判断首次安装是不是蜂窝网络没开或没授权\n\n引用以下头文件\n```\n#import <SystemConfiguration/CaptiveNetwork.h>\n#import <SystemConfiguration/SCNetworkReachability.h>\n#import <CoreTelephony/CTTelephonyNetworkInfo.h>\n#import <CoreTelephony/CTCellularData.h>\n#import <netinet/in.h>\n```\n- 判断\n```\n//info不为nil，则当前链接wifi\n- (NSDictionary *)fetchSSIDInfo {\nNSArray *ifs = (__bridge_transfer NSArray *)CNCopySupportedInterfaces();\nif (!ifs) {\nreturn nil;\n}\n\nNSDictionary *info = nil;\nfor (NSString *ifnam in ifs) {\ninfo = (__bridge_transfer NSDictionary *)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);\nif (info && [info count]) { break; }\n}\nreturn info;\n}\n\n//返回CTRadioAccessTechnologyGPRS时说明是2g，网络情况复杂就当无网\n- (NSString *)fetchMobileInfo {\nCTTelephonyNetworkInfo *info = [[CTTelephonyNetworkInfo alloc] init];\nreturn  info.currentRadioAccessTechnology;\n}\n\n- (BOOL)checkNetworkConnect {\n// 创建零地址，0.0.0.0的地址表示查询本机的网络连接状态\nstruct sockaddr_in zeroAddress;//sockaddr_in是与sockaddr等价的数据结构\nbzero(&zeroAddress, sizeof(zeroAddress));\nzeroAddress.sin_len = sizeof(zeroAddress);\nzeroAddress.sin_family = AF_INET;//sin_family是地址家族，一般都是“AF_xxx”的形式。通常大多用的是都是AF_INET,代表TCP/IP协议族\n\n/**\n*  SCNetworkReachabilityRef: 用来保存创建测试连接返回的引用\n*\n*  SCNetworkReachabilityCreateWithAddress: 根据传入的地址测试连接.\n*  第一个参数可以为NULL或kCFAllocatorDefault\n*  第二个参数为需要测试连接的IP地址,当为0.0.0.0时则可以查询本机的网络连接状态.\n*  同时返回一个引用必须在用完后释放.\n*  PS: SCNetworkReachabilityCreateWithName: 这个是根据传入的网址测试连接,\n*  第二个参数比如为\"www.apple.com\",其他和上一个一样.\n*\n*  SCNetworkReachabilityGetFlags: 这个函数用来获得测试连接的状态,\n*  第一个参数为之前建立的测试连接的引用,\n*  第二个参数用来保存获得的状态,\n*  如果能获得状态则返回TRUE，否则返回FALSE\n*\n*/\nSCNetworkReachabilityRef defaultRouteReachability = SCNetworkReachabilityCreateWithAddress(NULL, (struct sockaddr *)&zeroAddress); //创建测试连接的引用：\nSCNetworkReachabilityFlags flags;\n\nBOOL didRetrieveFlags = SCNetworkReachabilityGetFlags(defaultRouteReachability, &flags);\nCFRelease(defaultRouteReachability);\nif (didRetrieveFlags && flags == 0) {\n//当前是没有打开网络情况进入,可能是关闭蜂窝/无线或进入飞行模式\nreturn NO;\n}\nreturn YES;\n}\n\n- (void)startValidateNetworkAuthorization:(void(^)(CTCellularDataRestrictedState state))block {\nCTCellularData *cellularData = [[CTCellularData alloc]init];\ncellularData.cellularDataRestrictionDidUpdateNotifier =  ^(CTCellularDataRestrictedState state){\nblock(state);\n//获取联网状态\nswitch (state) {\ncase kCTCellularDataRestricted:\n\nbreak;\ncase kCTCellularDataNotRestricted:\n\nbreak;\ncase kCTCellularDataRestrictedStateUnknown:\n\nbreak;\ndefault:\nbreak;\n};\n};\n}\n```\n- 调用\n```\nBOOL checkConnect=YES;\nBOOL isConnectWifi=[self fetchSSIDInfo];\nBOOL isGPRS=[[self fetchMobileInfo] isEqualToString:CTRadioAccessTechnologyGPRS]||[[self fetchMobileInfo] isEqualToString:CTRadioAccessTechnologyEdge];\nBOOL isConnectNetwork=[self checkNetworkConnect];\nif (!isConnectWifi) {\ncheckConnect=NO;\n}\nif (isGPRS) {\ncheckConnect=NO;\n}\nif (!isConnectNetwork) {\ncheckConnect=NO;\n}\n\nif (![[[NSUserDefaults standardUserDefaults] objectForKey:@\"firstInstall\"] boolValue]) {\n[[NSUserDefaults standardUserDefaults] setObject:@(YES) forKey:@\"firstInstall\"];\nif (checkConnect) {\n[self startValidateNetworkAuthorization:^(CTCellularDataRestrictedState state) {\nif (state != kCTCellularDataRestricted) {\n//首次打开app，未连接wifi移动网络正常，即有网情况蜂窝关闭，需提示用户开启蜂窝网络\n}\n}];\n}\n}\n```\n# 其他授权\n- plist\n```\n蓝牙\nNSBluetoothPeripheralUsageDescription\n媒体资料库\nNSAppleMusicUsageDescription\n音乐\nkTCCServiceMediaLibrary\nSiri\nNSSiriUsageDescription\n语音识别\nNSSpeechRecognitionUsageDescription\n日历\nNSCalendarsUsageDescription\n健康分享\nNSHealthShareUsageDescription\n健康更新\nNSHealthUpdateUsageDescription\n运动与健康\nNSMotionUsageDescription\n提醒事项\nNSRemindersUsageDescription\nFaceID\nNSFaceIDUsageDescription\n智能家居\nNSHomeKitUsageDescription\n运动\nNSMotionUsageDescription\nNFC\nNFCReaderUsageDescription\n视频认证\nNSVideoSubscriberAccountUsageDescription\n```\n","source":"_posts/IOS-各类获取授权处理.md","raw":"---\ntitle: IOS 各类获取授权常用处理\ndate: 2017-09-29 16:50:41\ntags:\n    - 实用技巧\n    - IOS\n    - 授权\n    - 地理位置\n    - 网络判断\n    - 相册\n    - 相机\n    - 麦克风\n    - 通讯录\n    - 蜂窝网络\n---\n\n# 地理位置授权\n需要引用`#import <CoreLocation/CoreLocation.h>`\n- plist\n```\n始终允许访问位置\nNSLocationAlwaysUsageDescription\n位置\nNSLocationUsageDescription\n在使用期间访问位置\nNSLocationWhenInUseUsageDescription\n始终允许访问位置并且在使用期间访问位置\nNSLocationAlwaysAndWhenInUseUsageDescription\n```\n- 判断\n```\n//判断是否开启\n[CLLocationManager locationServicesEnabled];\n//获取具体状态\n[CLLocationManager authorizationStatus];\n```\n- 授权\n```\nCLLocationManager *locManager = [[CLLocationManager alloc] init];\n[locManager ]\n//获取始终允许访问位置权限\n[locManager requestWhenInUseAuthorization];\n//获取在使用期间访问位置\n[locManager requestAlwaysAuthorization];\n```\n# 相册授权\n需要引用`#import <AssetsLibrary/AssetsLibrary.h>`或`#import <Photos/Photos.h>`\n- plist\n```\n访问相册\nNSPhotoLibraryUsageDescription\n添加相册\nNSPhotoAddLibraryUsageDescription\n```\n- 判断\n```\n[ALAssetsLibrary authorizationStatus];\n\n[PHPhotoLibrary authorizationStatus];\n```\n- 授权\n```\n[PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {\nif (status == PHAuthorizationStatusAuthorized) {\n// 用户同意授权\n}\nelse {\n// 用户拒绝授权\n}\n}];\n```\n# 相机&麦克风授权\n需要引用`#import <AVFoundation/AVFoundation.h>`\n- plist\n```\n相机\nNSCameraUsageDescription\n麦克风\nNSMicrophoneUsageDescription\n```\n- 判断\n```\n//AVMediaTypeVideo相机 AVMediaTypeAudio麦克风\n[AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];\n```\n- 授权\n```\n//AVMediaTypeVideo相机 AVMediaTypeAudio麦克风\n[AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {\n\nif (granted){// 用户同意授权\n\n}\nelse {// 用户拒绝授权\n\n}\n}];\n\n//不推荐慎用\n[[AVAudioSession sharedInstance] performSelector:@selector(requestRecordPermission:) withObject:^(BOOL granted) {\nif (granted){// 用户同意授权\n\n}\nelse {// 用户拒绝授权\n\n}\n}];\n```\n# 通讯录授权\n需要引用`#import <Contacts/Contacts.h>`\n- plist\n```\n通讯录\nNSContactsUsageDescription\n```\n- 判断\n```\n[CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts]\n```\n- 授权\n```\nCNContactStore*contactStore = [[CNContactStore alloc] init];\n\n[contactStore requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted,NSError*_Nullable error) {\nif (granted){// 用户同意授权\n\n}\nelse {// 用户拒绝授权\n\n}\n}];\n```\n<!-- more -->\n# 蜂窝网络授权\n### 目前无解，可能以后也无解\n\n仅可以判断首次安装是不是蜂窝网络没开或没授权\n\n引用以下头文件\n```\n#import <SystemConfiguration/CaptiveNetwork.h>\n#import <SystemConfiguration/SCNetworkReachability.h>\n#import <CoreTelephony/CTTelephonyNetworkInfo.h>\n#import <CoreTelephony/CTCellularData.h>\n#import <netinet/in.h>\n```\n- 判断\n```\n//info不为nil，则当前链接wifi\n- (NSDictionary *)fetchSSIDInfo {\nNSArray *ifs = (__bridge_transfer NSArray *)CNCopySupportedInterfaces();\nif (!ifs) {\nreturn nil;\n}\n\nNSDictionary *info = nil;\nfor (NSString *ifnam in ifs) {\ninfo = (__bridge_transfer NSDictionary *)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);\nif (info && [info count]) { break; }\n}\nreturn info;\n}\n\n//返回CTRadioAccessTechnologyGPRS时说明是2g，网络情况复杂就当无网\n- (NSString *)fetchMobileInfo {\nCTTelephonyNetworkInfo *info = [[CTTelephonyNetworkInfo alloc] init];\nreturn  info.currentRadioAccessTechnology;\n}\n\n- (BOOL)checkNetworkConnect {\n// 创建零地址，0.0.0.0的地址表示查询本机的网络连接状态\nstruct sockaddr_in zeroAddress;//sockaddr_in是与sockaddr等价的数据结构\nbzero(&zeroAddress, sizeof(zeroAddress));\nzeroAddress.sin_len = sizeof(zeroAddress);\nzeroAddress.sin_family = AF_INET;//sin_family是地址家族，一般都是“AF_xxx”的形式。通常大多用的是都是AF_INET,代表TCP/IP协议族\n\n/**\n*  SCNetworkReachabilityRef: 用来保存创建测试连接返回的引用\n*\n*  SCNetworkReachabilityCreateWithAddress: 根据传入的地址测试连接.\n*  第一个参数可以为NULL或kCFAllocatorDefault\n*  第二个参数为需要测试连接的IP地址,当为0.0.0.0时则可以查询本机的网络连接状态.\n*  同时返回一个引用必须在用完后释放.\n*  PS: SCNetworkReachabilityCreateWithName: 这个是根据传入的网址测试连接,\n*  第二个参数比如为\"www.apple.com\",其他和上一个一样.\n*\n*  SCNetworkReachabilityGetFlags: 这个函数用来获得测试连接的状态,\n*  第一个参数为之前建立的测试连接的引用,\n*  第二个参数用来保存获得的状态,\n*  如果能获得状态则返回TRUE，否则返回FALSE\n*\n*/\nSCNetworkReachabilityRef defaultRouteReachability = SCNetworkReachabilityCreateWithAddress(NULL, (struct sockaddr *)&zeroAddress); //创建测试连接的引用：\nSCNetworkReachabilityFlags flags;\n\nBOOL didRetrieveFlags = SCNetworkReachabilityGetFlags(defaultRouteReachability, &flags);\nCFRelease(defaultRouteReachability);\nif (didRetrieveFlags && flags == 0) {\n//当前是没有打开网络情况进入,可能是关闭蜂窝/无线或进入飞行模式\nreturn NO;\n}\nreturn YES;\n}\n\n- (void)startValidateNetworkAuthorization:(void(^)(CTCellularDataRestrictedState state))block {\nCTCellularData *cellularData = [[CTCellularData alloc]init];\ncellularData.cellularDataRestrictionDidUpdateNotifier =  ^(CTCellularDataRestrictedState state){\nblock(state);\n//获取联网状态\nswitch (state) {\ncase kCTCellularDataRestricted:\n\nbreak;\ncase kCTCellularDataNotRestricted:\n\nbreak;\ncase kCTCellularDataRestrictedStateUnknown:\n\nbreak;\ndefault:\nbreak;\n};\n};\n}\n```\n- 调用\n```\nBOOL checkConnect=YES;\nBOOL isConnectWifi=[self fetchSSIDInfo];\nBOOL isGPRS=[[self fetchMobileInfo] isEqualToString:CTRadioAccessTechnologyGPRS]||[[self fetchMobileInfo] isEqualToString:CTRadioAccessTechnologyEdge];\nBOOL isConnectNetwork=[self checkNetworkConnect];\nif (!isConnectWifi) {\ncheckConnect=NO;\n}\nif (isGPRS) {\ncheckConnect=NO;\n}\nif (!isConnectNetwork) {\ncheckConnect=NO;\n}\n\nif (![[[NSUserDefaults standardUserDefaults] objectForKey:@\"firstInstall\"] boolValue]) {\n[[NSUserDefaults standardUserDefaults] setObject:@(YES) forKey:@\"firstInstall\"];\nif (checkConnect) {\n[self startValidateNetworkAuthorization:^(CTCellularDataRestrictedState state) {\nif (state != kCTCellularDataRestricted) {\n//首次打开app，未连接wifi移动网络正常，即有网情况蜂窝关闭，需提示用户开启蜂窝网络\n}\n}];\n}\n}\n```\n# 其他授权\n- plist\n```\n蓝牙\nNSBluetoothPeripheralUsageDescription\n媒体资料库\nNSAppleMusicUsageDescription\n音乐\nkTCCServiceMediaLibrary\nSiri\nNSSiriUsageDescription\n语音识别\nNSSpeechRecognitionUsageDescription\n日历\nNSCalendarsUsageDescription\n健康分享\nNSHealthShareUsageDescription\n健康更新\nNSHealthUpdateUsageDescription\n运动与健康\nNSMotionUsageDescription\n提醒事项\nNSRemindersUsageDescription\nFaceID\nNSFaceIDUsageDescription\n智能家居\nNSHomeKitUsageDescription\n运动\nNSMotionUsageDescription\nNFC\nNFCReaderUsageDescription\n视频认证\nNSVideoSubscriberAccountUsageDescription\n```\n","slug":"IOS-各类获取授权处理","published":1,"updated":"2021-07-08T09:20:31.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqr000bnhs6dr0x05ed","content":"<h1 id=\"地理位置授权\"><a href=\"#地理位置授权\" class=\"headerlink\" title=\"地理位置授权\"></a>地理位置授权</h1><p>需要引用<code>#import &lt;CoreLocation/CoreLocation.h&gt;</code></p>\n<ul>\n<li><p>plist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">始终允许访问位置</span><br><span class=\"line\">NSLocationAlwaysUsageDescription</span><br><span class=\"line\">位置</span><br><span class=\"line\">NSLocationUsageDescription</span><br><span class=\"line\">在使用期间访问位置</span><br><span class=\"line\">NSLocationWhenInUseUsageDescription</span><br><span class=\"line\">始终允许访问位置并且在使用期间访问位置</span><br><span class=\"line\">NSLocationAlwaysAndWhenInUseUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断是否开启</span><br><span class=\"line\">[CLLocationManager locationServicesEnabled];</span><br><span class=\"line\">//获取具体状态</span><br><span class=\"line\">[CLLocationManager authorizationStatus];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLLocationManager *locManager = [[CLLocationManager alloc] init];</span><br><span class=\"line\">[locManager ]</span><br><span class=\"line\">//获取始终允许访问位置权限</span><br><span class=\"line\">[locManager requestWhenInUseAuthorization];</span><br><span class=\"line\">//获取在使用期间访问位置</span><br><span class=\"line\">[locManager requestAlwaysAuthorization];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"相册授权\"><a href=\"#相册授权\" class=\"headerlink\" title=\"相册授权\"></a>相册授权</h1><p>需要引用<code>#import &lt;AssetsLibrary/AssetsLibrary.h&gt;</code>或<code>#import &lt;Photos/Photos.h&gt;</code></p>\n<ul>\n<li><p>plist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问相册</span><br><span class=\"line\">NSPhotoLibraryUsageDescription</span><br><span class=\"line\">添加相册</span><br><span class=\"line\">NSPhotoAddLibraryUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ALAssetsLibrary authorizationStatus];</span><br><span class=\"line\"></span><br><span class=\"line\">[PHPhotoLibrary authorizationStatus];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) &#123;</span><br><span class=\"line\">if (status == PHAuthorizationStatusAuthorized) &#123;</span><br><span class=\"line\">// 用户同意授权</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">// 用户拒绝授权</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"相机-amp-麦克风授权\"><a href=\"#相机-amp-麦克风授权\" class=\"headerlink\" title=\"相机&amp;麦克风授权\"></a>相机&amp;麦克风授权</h1><p>需要引用<code>#import &lt;AVFoundation/AVFoundation.h&gt;</code></p>\n<ul>\n<li><p>plist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相机</span><br><span class=\"line\">NSCameraUsageDescription</span><br><span class=\"line\">麦克风</span><br><span class=\"line\">NSMicrophoneUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//AVMediaTypeVideo相机 AVMediaTypeAudio麦克风</span><br><span class=\"line\">[AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//AVMediaTypeVideo相机 AVMediaTypeAudio麦克风</span><br><span class=\"line\">[AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">if (granted)&#123;// 用户同意授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;// 用户拒绝授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">//不推荐慎用</span><br><span class=\"line\">[[AVAudioSession sharedInstance] performSelector:@selector(requestRecordPermission:) withObject:^(BOOL granted) &#123;</span><br><span class=\"line\">if (granted)&#123;// 用户同意授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;// 用户拒绝授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"通讯录授权\"><a href=\"#通讯录授权\" class=\"headerlink\" title=\"通讯录授权\"></a>通讯录授权</h1><p>需要引用<code>#import &lt;Contacts/Contacts.h&gt;</code></p>\n<ul>\n<li><p>plist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通讯录</span><br><span class=\"line\">NSContactsUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CNContactStore*contactStore = [[CNContactStore alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">[contactStore requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted,NSError*_Nullable error) &#123;</span><br><span class=\"line\">if (granted)&#123;// 用户同意授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;// 用户拒绝授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"蜂窝网络授权\"><a href=\"#蜂窝网络授权\" class=\"headerlink\" title=\"蜂窝网络授权\"></a>蜂窝网络授权</h1><h3 id=\"目前无解，可能以后也无解\"><a href=\"#目前无解，可能以后也无解\" class=\"headerlink\" title=\"目前无解，可能以后也无解\"></a>目前无解，可能以后也无解</h3><p>仅可以判断首次安装是不是蜂窝网络没开或没授权</p>\n<p>引用以下头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;SystemConfiguration/CaptiveNetwork.h&gt;</span><br><span class=\"line\">#import &lt;SystemConfiguration/SCNetworkReachability.h&gt;</span><br><span class=\"line\">#import &lt;CoreTelephony/CTTelephonyNetworkInfo.h&gt;</span><br><span class=\"line\">#import &lt;CoreTelephony/CTCellularData.h&gt;</span><br><span class=\"line\">#import &lt;netinet/in.h&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//info不为nil，则当前链接wifi</span><br><span class=\"line\">- (NSDictionary *)fetchSSIDInfo &#123;</span><br><span class=\"line\">NSArray *ifs = (__bridge_transfer NSArray *)CNCopySupportedInterfaces();</span><br><span class=\"line\">if (!ifs) &#123;</span><br><span class=\"line\">return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSDictionary *info = nil;</span><br><span class=\"line\">for (NSString *ifnam in ifs) &#123;</span><br><span class=\"line\">info = (__bridge_transfer NSDictionary *)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);</span><br><span class=\"line\">if (info &amp;&amp; [info count]) &#123; break; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return info;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//返回CTRadioAccessTechnologyGPRS时说明是2g，网络情况复杂就当无网</span><br><span class=\"line\">- (NSString *)fetchMobileInfo &#123;</span><br><span class=\"line\">CTTelephonyNetworkInfo *info = [[CTTelephonyNetworkInfo alloc] init];</span><br><span class=\"line\">return  info.currentRadioAccessTechnology;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)checkNetworkConnect &#123;</span><br><span class=\"line\">// 创建零地址，0.0.0.0的地址表示查询本机的网络连接状态</span><br><span class=\"line\">struct sockaddr_in zeroAddress;//sockaddr_in是与sockaddr等价的数据结构</span><br><span class=\"line\">bzero(&amp;zeroAddress, sizeof(zeroAddress));</span><br><span class=\"line\">zeroAddress.sin_len = sizeof(zeroAddress);</span><br><span class=\"line\">zeroAddress.sin_family = AF_INET;//sin_family是地址家族，一般都是“AF_xxx”的形式。通常大多用的是都是AF_INET,代表TCP/IP协议族</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  SCNetworkReachabilityRef: 用来保存创建测试连接返回的引用</span><br><span class=\"line\">*</span><br><span class=\"line\">*  SCNetworkReachabilityCreateWithAddress: 根据传入的地址测试连接.</span><br><span class=\"line\">*  第一个参数可以为NULL或kCFAllocatorDefault</span><br><span class=\"line\">*  第二个参数为需要测试连接的IP地址,当为0.0.0.0时则可以查询本机的网络连接状态.</span><br><span class=\"line\">*  同时返回一个引用必须在用完后释放.</span><br><span class=\"line\">*  PS: SCNetworkReachabilityCreateWithName: 这个是根据传入的网址测试连接,</span><br><span class=\"line\">*  第二个参数比如为&quot;www.apple.com&quot;,其他和上一个一样.</span><br><span class=\"line\">*</span><br><span class=\"line\">*  SCNetworkReachabilityGetFlags: 这个函数用来获得测试连接的状态,</span><br><span class=\"line\">*  第一个参数为之前建立的测试连接的引用,</span><br><span class=\"line\">*  第二个参数用来保存获得的状态,</span><br><span class=\"line\">*  如果能获得状态则返回TRUE，否则返回FALSE</span><br><span class=\"line\">*</span><br><span class=\"line\">*/</span><br><span class=\"line\">SCNetworkReachabilityRef defaultRouteReachability = SCNetworkReachabilityCreateWithAddress(NULL, (struct sockaddr *)&amp;zeroAddress); //创建测试连接的引用：</span><br><span class=\"line\">SCNetworkReachabilityFlags flags;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL didRetrieveFlags = SCNetworkReachabilityGetFlags(defaultRouteReachability, &amp;flags);</span><br><span class=\"line\">CFRelease(defaultRouteReachability);</span><br><span class=\"line\">if (didRetrieveFlags &amp;&amp; flags == 0) &#123;</span><br><span class=\"line\">//当前是没有打开网络情况进入,可能是关闭蜂窝/无线或进入飞行模式</span><br><span class=\"line\">return NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)startValidateNetworkAuthorization:(void(^)(CTCellularDataRestrictedState state))block &#123;</span><br><span class=\"line\">CTCellularData *cellularData = [[CTCellularData alloc]init];</span><br><span class=\"line\">cellularData.cellularDataRestrictionDidUpdateNotifier =  ^(CTCellularDataRestrictedState state)&#123;</span><br><span class=\"line\">block(state);</span><br><span class=\"line\">//获取联网状态</span><br><span class=\"line\">switch (state) &#123;</span><br><span class=\"line\">case kCTCellularDataRestricted:</span><br><span class=\"line\"></span><br><span class=\"line\">break;</span><br><span class=\"line\">case kCTCellularDataNotRestricted:</span><br><span class=\"line\"></span><br><span class=\"line\">break;</span><br><span class=\"line\">case kCTCellularDataRestrictedStateUnknown:</span><br><span class=\"line\"></span><br><span class=\"line\">break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">break;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL checkConnect=YES;</span><br><span class=\"line\">BOOL isConnectWifi=[self fetchSSIDInfo];</span><br><span class=\"line\">BOOL isGPRS=[[self fetchMobileInfo] isEqualToString:CTRadioAccessTechnologyGPRS]||[[self fetchMobileInfo] isEqualToString:CTRadioAccessTechnologyEdge];</span><br><span class=\"line\">BOOL isConnectNetwork=[self checkNetworkConnect];</span><br><span class=\"line\">if (!isConnectWifi) &#123;</span><br><span class=\"line\">checkConnect=NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (isGPRS) &#123;</span><br><span class=\"line\">checkConnect=NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (!isConnectNetwork) &#123;</span><br><span class=\"line\">checkConnect=NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (![[[NSUserDefaults standardUserDefaults] objectForKey:@&quot;firstInstall&quot;] boolValue]) &#123;</span><br><span class=\"line\">[[NSUserDefaults standardUserDefaults] setObject:@(YES) forKey:@&quot;firstInstall&quot;];</span><br><span class=\"line\">if (checkConnect) &#123;</span><br><span class=\"line\">[self startValidateNetworkAuthorization:^(CTCellularDataRestrictedState state) &#123;</span><br><span class=\"line\">if (state != kCTCellularDataRestricted) &#123;</span><br><span class=\"line\">//首次打开app，未连接wifi移动网络正常，即有网情况蜂窝关闭，需提示用户开启蜂窝网络</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"其他授权\"><a href=\"#其他授权\" class=\"headerlink\" title=\"其他授权\"></a>其他授权</h1><ul>\n<li>plist<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">蓝牙</span><br><span class=\"line\">NSBluetoothPeripheralUsageDescription</span><br><span class=\"line\">媒体资料库</span><br><span class=\"line\">NSAppleMusicUsageDescription</span><br><span class=\"line\">音乐</span><br><span class=\"line\">kTCCServiceMediaLibrary</span><br><span class=\"line\">Siri</span><br><span class=\"line\">NSSiriUsageDescription</span><br><span class=\"line\">语音识别</span><br><span class=\"line\">NSSpeechRecognitionUsageDescription</span><br><span class=\"line\">日历</span><br><span class=\"line\">NSCalendarsUsageDescription</span><br><span class=\"line\">健康分享</span><br><span class=\"line\">NSHealthShareUsageDescription</span><br><span class=\"line\">健康更新</span><br><span class=\"line\">NSHealthUpdateUsageDescription</span><br><span class=\"line\">运动与健康</span><br><span class=\"line\">NSMotionUsageDescription</span><br><span class=\"line\">提醒事项</span><br><span class=\"line\">NSRemindersUsageDescription</span><br><span class=\"line\">FaceID</span><br><span class=\"line\">NSFaceIDUsageDescription</span><br><span class=\"line\">智能家居</span><br><span class=\"line\">NSHomeKitUsageDescription</span><br><span class=\"line\">运动</span><br><span class=\"line\">NSMotionUsageDescription</span><br><span class=\"line\">NFC</span><br><span class=\"line\">NFCReaderUsageDescription</span><br><span class=\"line\">视频认证</span><br><span class=\"line\">NSVideoSubscriberAccountUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"地理位置授权\"><a href=\"#地理位置授权\" class=\"headerlink\" title=\"地理位置授权\"></a>地理位置授权</h1><p>需要引用<code>#import &lt;CoreLocation/CoreLocation.h&gt;</code></p>\n<ul>\n<li><p>plist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">始终允许访问位置</span><br><span class=\"line\">NSLocationAlwaysUsageDescription</span><br><span class=\"line\">位置</span><br><span class=\"line\">NSLocationUsageDescription</span><br><span class=\"line\">在使用期间访问位置</span><br><span class=\"line\">NSLocationWhenInUseUsageDescription</span><br><span class=\"line\">始终允许访问位置并且在使用期间访问位置</span><br><span class=\"line\">NSLocationAlwaysAndWhenInUseUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断是否开启</span><br><span class=\"line\">[CLLocationManager locationServicesEnabled];</span><br><span class=\"line\">//获取具体状态</span><br><span class=\"line\">[CLLocationManager authorizationStatus];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CLLocationManager *locManager = [[CLLocationManager alloc] init];</span><br><span class=\"line\">[locManager ]</span><br><span class=\"line\">//获取始终允许访问位置权限</span><br><span class=\"line\">[locManager requestWhenInUseAuthorization];</span><br><span class=\"line\">//获取在使用期间访问位置</span><br><span class=\"line\">[locManager requestAlwaysAuthorization];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"相册授权\"><a href=\"#相册授权\" class=\"headerlink\" title=\"相册授权\"></a>相册授权</h1><p>需要引用<code>#import &lt;AssetsLibrary/AssetsLibrary.h&gt;</code>或<code>#import &lt;Photos/Photos.h&gt;</code></p>\n<ul>\n<li><p>plist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问相册</span><br><span class=\"line\">NSPhotoLibraryUsageDescription</span><br><span class=\"line\">添加相册</span><br><span class=\"line\">NSPhotoAddLibraryUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ALAssetsLibrary authorizationStatus];</span><br><span class=\"line\"></span><br><span class=\"line\">[PHPhotoLibrary authorizationStatus];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) &#123;</span><br><span class=\"line\">if (status == PHAuthorizationStatusAuthorized) &#123;</span><br><span class=\"line\">// 用户同意授权</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">// 用户拒绝授权</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"相机-amp-麦克风授权\"><a href=\"#相机-amp-麦克风授权\" class=\"headerlink\" title=\"相机&amp;麦克风授权\"></a>相机&amp;麦克风授权</h1><p>需要引用<code>#import &lt;AVFoundation/AVFoundation.h&gt;</code></p>\n<ul>\n<li><p>plist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相机</span><br><span class=\"line\">NSCameraUsageDescription</span><br><span class=\"line\">麦克风</span><br><span class=\"line\">NSMicrophoneUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//AVMediaTypeVideo相机 AVMediaTypeAudio麦克风</span><br><span class=\"line\">[AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//AVMediaTypeVideo相机 AVMediaTypeAudio麦克风</span><br><span class=\"line\">[AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">if (granted)&#123;// 用户同意授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;// 用户拒绝授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">//不推荐慎用</span><br><span class=\"line\">[[AVAudioSession sharedInstance] performSelector:@selector(requestRecordPermission:) withObject:^(BOOL granted) &#123;</span><br><span class=\"line\">if (granted)&#123;// 用户同意授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;// 用户拒绝授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"通讯录授权\"><a href=\"#通讯录授权\" class=\"headerlink\" title=\"通讯录授权\"></a>通讯录授权</h1><p>需要引用<code>#import &lt;Contacts/Contacts.h&gt;</code></p>\n<ul>\n<li><p>plist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通讯录</span><br><span class=\"line\">NSContactsUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CNContactStore*contactStore = [[CNContactStore alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\">[contactStore requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted,NSError*_Nullable error) &#123;</span><br><span class=\"line\">if (granted)&#123;// 用户同意授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;// 用户拒绝授权</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h1 id=\"蜂窝网络授权\"><a href=\"#蜂窝网络授权\" class=\"headerlink\" title=\"蜂窝网络授权\"></a>蜂窝网络授权</h1><h3 id=\"目前无解，可能以后也无解\"><a href=\"#目前无解，可能以后也无解\" class=\"headerlink\" title=\"目前无解，可能以后也无解\"></a>目前无解，可能以后也无解</h3><p>仅可以判断首次安装是不是蜂窝网络没开或没授权</p>\n<p>引用以下头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;SystemConfiguration/CaptiveNetwork.h&gt;</span><br><span class=\"line\">#import &lt;SystemConfiguration/SCNetworkReachability.h&gt;</span><br><span class=\"line\">#import &lt;CoreTelephony/CTTelephonyNetworkInfo.h&gt;</span><br><span class=\"line\">#import &lt;CoreTelephony/CTCellularData.h&gt;</span><br><span class=\"line\">#import &lt;netinet/in.h&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//info不为nil，则当前链接wifi</span><br><span class=\"line\">- (NSDictionary *)fetchSSIDInfo &#123;</span><br><span class=\"line\">NSArray *ifs = (__bridge_transfer NSArray *)CNCopySupportedInterfaces();</span><br><span class=\"line\">if (!ifs) &#123;</span><br><span class=\"line\">return nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NSDictionary *info = nil;</span><br><span class=\"line\">for (NSString *ifnam in ifs) &#123;</span><br><span class=\"line\">info = (__bridge_transfer NSDictionary *)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);</span><br><span class=\"line\">if (info &amp;&amp; [info count]) &#123; break; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return info;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//返回CTRadioAccessTechnologyGPRS时说明是2g，网络情况复杂就当无网</span><br><span class=\"line\">- (NSString *)fetchMobileInfo &#123;</span><br><span class=\"line\">CTTelephonyNetworkInfo *info = [[CTTelephonyNetworkInfo alloc] init];</span><br><span class=\"line\">return  info.currentRadioAccessTechnology;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)checkNetworkConnect &#123;</span><br><span class=\"line\">// 创建零地址，0.0.0.0的地址表示查询本机的网络连接状态</span><br><span class=\"line\">struct sockaddr_in zeroAddress;//sockaddr_in是与sockaddr等价的数据结构</span><br><span class=\"line\">bzero(&amp;zeroAddress, sizeof(zeroAddress));</span><br><span class=\"line\">zeroAddress.sin_len = sizeof(zeroAddress);</span><br><span class=\"line\">zeroAddress.sin_family = AF_INET;//sin_family是地址家族，一般都是“AF_xxx”的形式。通常大多用的是都是AF_INET,代表TCP/IP协议族</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  SCNetworkReachabilityRef: 用来保存创建测试连接返回的引用</span><br><span class=\"line\">*</span><br><span class=\"line\">*  SCNetworkReachabilityCreateWithAddress: 根据传入的地址测试连接.</span><br><span class=\"line\">*  第一个参数可以为NULL或kCFAllocatorDefault</span><br><span class=\"line\">*  第二个参数为需要测试连接的IP地址,当为0.0.0.0时则可以查询本机的网络连接状态.</span><br><span class=\"line\">*  同时返回一个引用必须在用完后释放.</span><br><span class=\"line\">*  PS: SCNetworkReachabilityCreateWithName: 这个是根据传入的网址测试连接,</span><br><span class=\"line\">*  第二个参数比如为&quot;www.apple.com&quot;,其他和上一个一样.</span><br><span class=\"line\">*</span><br><span class=\"line\">*  SCNetworkReachabilityGetFlags: 这个函数用来获得测试连接的状态,</span><br><span class=\"line\">*  第一个参数为之前建立的测试连接的引用,</span><br><span class=\"line\">*  第二个参数用来保存获得的状态,</span><br><span class=\"line\">*  如果能获得状态则返回TRUE，否则返回FALSE</span><br><span class=\"line\">*</span><br><span class=\"line\">*/</span><br><span class=\"line\">SCNetworkReachabilityRef defaultRouteReachability = SCNetworkReachabilityCreateWithAddress(NULL, (struct sockaddr *)&amp;zeroAddress); //创建测试连接的引用：</span><br><span class=\"line\">SCNetworkReachabilityFlags flags;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL didRetrieveFlags = SCNetworkReachabilityGetFlags(defaultRouteReachability, &amp;flags);</span><br><span class=\"line\">CFRelease(defaultRouteReachability);</span><br><span class=\"line\">if (didRetrieveFlags &amp;&amp; flags == 0) &#123;</span><br><span class=\"line\">//当前是没有打开网络情况进入,可能是关闭蜂窝/无线或进入飞行模式</span><br><span class=\"line\">return NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)startValidateNetworkAuthorization:(void(^)(CTCellularDataRestrictedState state))block &#123;</span><br><span class=\"line\">CTCellularData *cellularData = [[CTCellularData alloc]init];</span><br><span class=\"line\">cellularData.cellularDataRestrictionDidUpdateNotifier =  ^(CTCellularDataRestrictedState state)&#123;</span><br><span class=\"line\">block(state);</span><br><span class=\"line\">//获取联网状态</span><br><span class=\"line\">switch (state) &#123;</span><br><span class=\"line\">case kCTCellularDataRestricted:</span><br><span class=\"line\"></span><br><span class=\"line\">break;</span><br><span class=\"line\">case kCTCellularDataNotRestricted:</span><br><span class=\"line\"></span><br><span class=\"line\">break;</span><br><span class=\"line\">case kCTCellularDataRestrictedStateUnknown:</span><br><span class=\"line\"></span><br><span class=\"line\">break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">break;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL checkConnect=YES;</span><br><span class=\"line\">BOOL isConnectWifi=[self fetchSSIDInfo];</span><br><span class=\"line\">BOOL isGPRS=[[self fetchMobileInfo] isEqualToString:CTRadioAccessTechnologyGPRS]||[[self fetchMobileInfo] isEqualToString:CTRadioAccessTechnologyEdge];</span><br><span class=\"line\">BOOL isConnectNetwork=[self checkNetworkConnect];</span><br><span class=\"line\">if (!isConnectWifi) &#123;</span><br><span class=\"line\">checkConnect=NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (isGPRS) &#123;</span><br><span class=\"line\">checkConnect=NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (!isConnectNetwork) &#123;</span><br><span class=\"line\">checkConnect=NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (![[[NSUserDefaults standardUserDefaults] objectForKey:@&quot;firstInstall&quot;] boolValue]) &#123;</span><br><span class=\"line\">[[NSUserDefaults standardUserDefaults] setObject:@(YES) forKey:@&quot;firstInstall&quot;];</span><br><span class=\"line\">if (checkConnect) &#123;</span><br><span class=\"line\">[self startValidateNetworkAuthorization:^(CTCellularDataRestrictedState state) &#123;</span><br><span class=\"line\">if (state != kCTCellularDataRestricted) &#123;</span><br><span class=\"line\">//首次打开app，未连接wifi移动网络正常，即有网情况蜂窝关闭，需提示用户开启蜂窝网络</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"其他授权\"><a href=\"#其他授权\" class=\"headerlink\" title=\"其他授权\"></a>其他授权</h1><ul>\n<li>plist<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">蓝牙</span><br><span class=\"line\">NSBluetoothPeripheralUsageDescription</span><br><span class=\"line\">媒体资料库</span><br><span class=\"line\">NSAppleMusicUsageDescription</span><br><span class=\"line\">音乐</span><br><span class=\"line\">kTCCServiceMediaLibrary</span><br><span class=\"line\">Siri</span><br><span class=\"line\">NSSiriUsageDescription</span><br><span class=\"line\">语音识别</span><br><span class=\"line\">NSSpeechRecognitionUsageDescription</span><br><span class=\"line\">日历</span><br><span class=\"line\">NSCalendarsUsageDescription</span><br><span class=\"line\">健康分享</span><br><span class=\"line\">NSHealthShareUsageDescription</span><br><span class=\"line\">健康更新</span><br><span class=\"line\">NSHealthUpdateUsageDescription</span><br><span class=\"line\">运动与健康</span><br><span class=\"line\">NSMotionUsageDescription</span><br><span class=\"line\">提醒事项</span><br><span class=\"line\">NSRemindersUsageDescription</span><br><span class=\"line\">FaceID</span><br><span class=\"line\">NSFaceIDUsageDescription</span><br><span class=\"line\">智能家居</span><br><span class=\"line\">NSHomeKitUsageDescription</span><br><span class=\"line\">运动</span><br><span class=\"line\">NSMotionUsageDescription</span><br><span class=\"line\">NFC</span><br><span class=\"line\">NFCReaderUsageDescription</span><br><span class=\"line\">视频认证</span><br><span class=\"line\">NSVideoSubscriberAccountUsageDescription</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"IOS百行代码全局语言本地化/国际化","date":"2017-02-14T18:09:05.000Z","_content":"\n# IOS百行代码全局语言本地化/国际化\n废话不多说先把基本配置搞定图文一起来\n\n![3618569F-C518-4582-8580-9DC73F1E8B2E.png](/assets/blogImage/3994053-006976bd750f8324.jpeg)\n这里点个“+”直接就o了\n剩下的就是创建strings文件也就是语言映射文件\n\n![32E018FA-1E4C-4127-BD87-0AE0B0B1641D.png](/assets/blogImage/3994053-6172f40aabb17548.jpeg)\n\n划线的就是创建时候该点击的InfoPlist.strings就是定义CFBundleDisplayName来确定app的名字\nLocalizable.strings则是正经的语言映射表了\nxib，storyboard和image也是一个套路看划线那点击就ok了\n![6DCE952A-4868-4652-AAB5-59C36DF129D5.png](/assets/blogImage/3994053-f2f6768c6d73d371.jpeg)\n# 百行代码全局Hook完成本地化\n废话不多说先放代码在解释\nhttps://github.com/heroims/LocalizedEngine\n<!-- more -->\n```Objective-C\n#import \"LocalizedEngine.h\"\n#import <objc/runtime.h>\n#import <UIKit/UIKit.h>\n\n#define LocalizedString(string) NSLocalizedString(string, nil)\n\n@interface NSObject (LocalizedEngineSwizzling)\n\n@end\n@implementation NSObject (LocalizedEngineSwizzling)\n\n+ (BOOL)les_swizzleMethod:(SEL)origSel withMethod:(SEL)altSel {\nMethod origMethod = class_getInstanceMethod(self, origSel);\nMethod altMethod = class_getInstanceMethod(self, altSel);\nif (!origMethod || !altMethod) {\nreturn NO;\n}\nclass_addMethod(self,\norigSel,\nclass_getMethodImplementation(self, origSel),\nmethod_getTypeEncoding(origMethod));\nclass_addMethod(self,\naltSel,\nclass_getMethodImplementation(self, altSel),\nmethod_getTypeEncoding(altMethod));\nmethod_exchangeImplementations(class_getInstanceMethod(self, origSel),\nclass_getInstanceMethod(self, altSel));\nreturn YES;\n}\n\n+ (BOOL)les_swizzleClassMethod:(SEL)origSel withMethod:(SEL)altSel {\nreturn [object_getClass((id)self) les_swizzleMethod:origSel withMethod:altSel];\n}\n\n@end\n\n@interface NSString (LocalizedEngine)\n\n@end\n\n@implementation NSString(LocalizedEngine)\n\n-(CGRect)le_boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(nullable NSDictionary<NSString *, id> *)attributes context:(nullable NSStringDrawingContext *)context{\nreturn [LocalizedString(self) le_boundingRectWithSize:size options:options attributes:attributes context:context];\n}\n\n- (CGSize)le_sizeWithAttributes:(nullable NSDictionary<NSString *, id> *)attrs{\nreturn [LocalizedString(self) le_sizeWithAttributes:attrs];\n}\n@end\n\n@interface UILabel (LocalizedEngine)\n\n@end\n\n@implementation UILabel(LocalizedEngine)\n\n-(void)le_setText:(NSString *)text{\n[self le_setText:LocalizedString(text)];\n}\n\n@end\n\n@interface UITabBarItem (LocalizedEngine)\n\n@end\n@implementation UITabBarItem (LocalizedEngine)\n\n-(void)le_setTitle:(NSString *)title{\n[self le_setTitle:LocalizedString(title)];\n}\n\n@end\n\n@interface UIViewController (LocalizedEngine)\n\n@end\n@implementation UIViewController (LocalizedEngine)\n\n-(void)le_setTitle:(NSString *)title{\n[self le_setTitle:LocalizedString(title)];\n}\n\n@end\n\n@interface UIButton (LocalizedEngine)\n\n@end\n@implementation UIButton (LocalizedEngine)\n\n-(void)le_setTitle:(NSString *)title forState:(UIControlState)state{\n[self le_setTitle:LocalizedString(title) forState:state];\n}\n\n@end\n\n@implementation LocalizedEngine\n\n+(void)startEngine{\n[[UILabel class] les_swizzleMethod:@selector(setText:) withMethod:@selector(le_setText:)];\n[[UITabBarItem class] les_swizzleMethod:@selector(setTitle:) withMethod:@selector(le_setTitle:)];\n[[UIViewController class] les_swizzleMethod:@selector(setTitle:) withMethod:@selector(le_setTitle:)];\n[[UIButton class] les_swizzleMethod:@selector(setTitle:forState:) withMethod:@selector(le_setTitle:forState:)];\n[[NSString class] les_swizzleMethod:@selector(boundingRectWithSize:options:attributes:context:) withMethod:@selector(le_boundingRectWithSize:options:attributes:context:)];\n[[NSString class] les_swizzleMethod:@selector(sizeWithAttributes:) withMethod:@selector(le_sizeWithAttributes:)];\n\n\n}\n\n@end\n```\n\n调用只需要一句话\n[LocalizedEngine startEngine];\n其实只对UILabel做一次全局的文本就都被替换了，另一方面就是NSString对可变宽高的处理，这两个就已经解决了大部分需求，只不过后来发现系统控件在传递文本时做了布局的自适应，所以就有了UITabBarItem UIButton UIViewController的扩展，\n根据自己APP情况适当调整即可，包括NSAttributedString 细化出来这些估计也不会超过200行，上边放出的是初版，.m总共100行冒头，轻轻松松省去慢慢找位置加，有人找你做本地化，从此只需要做好string对照表即可，让人按格式给你。\n这只是利用AOP这种面向切面开发的思想解决问题的实例，同样的道理，风格扩展，日志，crash防御都能很好的独立且省事的完成。\n后续还将放一篇AOPLogger的讲讲\n","source":"_posts/IOS百行代码全局语言本地化:国际化.md","raw":"---\ntitle: IOS百行代码全局语言本地化/国际化\ndate: 2017-02-15 02:09:05\ntags:\n    - IOS\n    - 百行代码系列\n    - 切面\n    - 本地化/国际化\n    - 翻译\n---\n\n# IOS百行代码全局语言本地化/国际化\n废话不多说先把基本配置搞定图文一起来\n\n![3618569F-C518-4582-8580-9DC73F1E8B2E.png](/assets/blogImage/3994053-006976bd750f8324.jpeg)\n这里点个“+”直接就o了\n剩下的就是创建strings文件也就是语言映射文件\n\n![32E018FA-1E4C-4127-BD87-0AE0B0B1641D.png](/assets/blogImage/3994053-6172f40aabb17548.jpeg)\n\n划线的就是创建时候该点击的InfoPlist.strings就是定义CFBundleDisplayName来确定app的名字\nLocalizable.strings则是正经的语言映射表了\nxib，storyboard和image也是一个套路看划线那点击就ok了\n![6DCE952A-4868-4652-AAB5-59C36DF129D5.png](/assets/blogImage/3994053-f2f6768c6d73d371.jpeg)\n# 百行代码全局Hook完成本地化\n废话不多说先放代码在解释\nhttps://github.com/heroims/LocalizedEngine\n<!-- more -->\n```Objective-C\n#import \"LocalizedEngine.h\"\n#import <objc/runtime.h>\n#import <UIKit/UIKit.h>\n\n#define LocalizedString(string) NSLocalizedString(string, nil)\n\n@interface NSObject (LocalizedEngineSwizzling)\n\n@end\n@implementation NSObject (LocalizedEngineSwizzling)\n\n+ (BOOL)les_swizzleMethod:(SEL)origSel withMethod:(SEL)altSel {\nMethod origMethod = class_getInstanceMethod(self, origSel);\nMethod altMethod = class_getInstanceMethod(self, altSel);\nif (!origMethod || !altMethod) {\nreturn NO;\n}\nclass_addMethod(self,\norigSel,\nclass_getMethodImplementation(self, origSel),\nmethod_getTypeEncoding(origMethod));\nclass_addMethod(self,\naltSel,\nclass_getMethodImplementation(self, altSel),\nmethod_getTypeEncoding(altMethod));\nmethod_exchangeImplementations(class_getInstanceMethod(self, origSel),\nclass_getInstanceMethod(self, altSel));\nreturn YES;\n}\n\n+ (BOOL)les_swizzleClassMethod:(SEL)origSel withMethod:(SEL)altSel {\nreturn [object_getClass((id)self) les_swizzleMethod:origSel withMethod:altSel];\n}\n\n@end\n\n@interface NSString (LocalizedEngine)\n\n@end\n\n@implementation NSString(LocalizedEngine)\n\n-(CGRect)le_boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(nullable NSDictionary<NSString *, id> *)attributes context:(nullable NSStringDrawingContext *)context{\nreturn [LocalizedString(self) le_boundingRectWithSize:size options:options attributes:attributes context:context];\n}\n\n- (CGSize)le_sizeWithAttributes:(nullable NSDictionary<NSString *, id> *)attrs{\nreturn [LocalizedString(self) le_sizeWithAttributes:attrs];\n}\n@end\n\n@interface UILabel (LocalizedEngine)\n\n@end\n\n@implementation UILabel(LocalizedEngine)\n\n-(void)le_setText:(NSString *)text{\n[self le_setText:LocalizedString(text)];\n}\n\n@end\n\n@interface UITabBarItem (LocalizedEngine)\n\n@end\n@implementation UITabBarItem (LocalizedEngine)\n\n-(void)le_setTitle:(NSString *)title{\n[self le_setTitle:LocalizedString(title)];\n}\n\n@end\n\n@interface UIViewController (LocalizedEngine)\n\n@end\n@implementation UIViewController (LocalizedEngine)\n\n-(void)le_setTitle:(NSString *)title{\n[self le_setTitle:LocalizedString(title)];\n}\n\n@end\n\n@interface UIButton (LocalizedEngine)\n\n@end\n@implementation UIButton (LocalizedEngine)\n\n-(void)le_setTitle:(NSString *)title forState:(UIControlState)state{\n[self le_setTitle:LocalizedString(title) forState:state];\n}\n\n@end\n\n@implementation LocalizedEngine\n\n+(void)startEngine{\n[[UILabel class] les_swizzleMethod:@selector(setText:) withMethod:@selector(le_setText:)];\n[[UITabBarItem class] les_swizzleMethod:@selector(setTitle:) withMethod:@selector(le_setTitle:)];\n[[UIViewController class] les_swizzleMethod:@selector(setTitle:) withMethod:@selector(le_setTitle:)];\n[[UIButton class] les_swizzleMethod:@selector(setTitle:forState:) withMethod:@selector(le_setTitle:forState:)];\n[[NSString class] les_swizzleMethod:@selector(boundingRectWithSize:options:attributes:context:) withMethod:@selector(le_boundingRectWithSize:options:attributes:context:)];\n[[NSString class] les_swizzleMethod:@selector(sizeWithAttributes:) withMethod:@selector(le_sizeWithAttributes:)];\n\n\n}\n\n@end\n```\n\n调用只需要一句话\n[LocalizedEngine startEngine];\n其实只对UILabel做一次全局的文本就都被替换了，另一方面就是NSString对可变宽高的处理，这两个就已经解决了大部分需求，只不过后来发现系统控件在传递文本时做了布局的自适应，所以就有了UITabBarItem UIButton UIViewController的扩展，\n根据自己APP情况适当调整即可，包括NSAttributedString 细化出来这些估计也不会超过200行，上边放出的是初版，.m总共100行冒头，轻轻松松省去慢慢找位置加，有人找你做本地化，从此只需要做好string对照表即可，让人按格式给你。\n这只是利用AOP这种面向切面开发的思想解决问题的实例，同样的道理，风格扩展，日志，crash防御都能很好的独立且省事的完成。\n后续还将放一篇AOPLogger的讲讲\n","slug":"IOS百行代码全局语言本地化:国际化","published":1,"updated":"2021-07-08T09:20:31.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqt000dnhs6z5njqt65","content":"<h1 id=\"IOS百行代码全局语言本地化-国际化\"><a href=\"#IOS百行代码全局语言本地化-国际化\" class=\"headerlink\" title=\"IOS百行代码全局语言本地化/国际化\"></a>IOS百行代码全局语言本地化/国际化</h1><p>废话不多说先把基本配置搞定图文一起来</p>\n<p><img src=\"/assets/blogImage/3994053-006976bd750f8324.jpeg\" alt=\"3618569F-C518-4582-8580-9DC73F1E8B2E.png\"><br>这里点个“+”直接就o了<br>剩下的就是创建strings文件也就是语言映射文件</p>\n<p><img src=\"/assets/blogImage/3994053-6172f40aabb17548.jpeg\" alt=\"32E018FA-1E4C-4127-BD87-0AE0B0B1641D.png\"></p>\n<p>划线的就是创建时候该点击的InfoPlist.strings就是定义CFBundleDisplayName来确定app的名字<br>Localizable.strings则是正经的语言映射表了<br>xib，storyboard和image也是一个套路看划线那点击就ok了<br><img src=\"/assets/blogImage/3994053-f2f6768c6d73d371.jpeg\" alt=\"6DCE952A-4868-4652-AAB5-59C36DF129D5.png\"></p>\n<h1 id=\"百行代码全局Hook完成本地化\"><a href=\"#百行代码全局Hook完成本地化\" class=\"headerlink\" title=\"百行代码全局Hook完成本地化\"></a>百行代码全局Hook完成本地化</h1><p>废话不多说先放代码在解释<br><a href=\"https://github.com/heroims/LocalizedEngine\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/LocalizedEngine</a><br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;LocalizedEngine.h&quot;</span><br><span class=\"line\">#import &lt;objc/runtime.h&gt;</span><br><span class=\"line\">#import &lt;UIKit/UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define LocalizedString(string) NSLocalizedString(string, nil)</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSObject (LocalizedEngineSwizzling)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation NSObject (LocalizedEngineSwizzling)</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)les_swizzleMethod:(SEL)origSel withMethod:(SEL)altSel &#123;</span><br><span class=\"line\">Method origMethod = class_getInstanceMethod(self, origSel);</span><br><span class=\"line\">Method altMethod = class_getInstanceMethod(self, altSel);</span><br><span class=\"line\">if (!origMethod || !altMethod) &#123;</span><br><span class=\"line\">return NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class_addMethod(self,</span><br><span class=\"line\">origSel,</span><br><span class=\"line\">class_getMethodImplementation(self, origSel),</span><br><span class=\"line\">method_getTypeEncoding(origMethod));</span><br><span class=\"line\">class_addMethod(self,</span><br><span class=\"line\">altSel,</span><br><span class=\"line\">class_getMethodImplementation(self, altSel),</span><br><span class=\"line\">method_getTypeEncoding(altMethod));</span><br><span class=\"line\">method_exchangeImplementations(class_getInstanceMethod(self, origSel),</span><br><span class=\"line\">class_getInstanceMethod(self, altSel));</span><br><span class=\"line\">return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)les_swizzleClassMethod:(SEL)origSel withMethod:(SEL)altSel &#123;</span><br><span class=\"line\">return [object_getClass((id)self) les_swizzleMethod:origSel withMethod:altSel];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSString (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation NSString(LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(CGRect)le_boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(nullable NSDictionary&lt;NSString *, id&gt; *)attributes context:(nullable NSStringDrawingContext *)context&#123;</span><br><span class=\"line\">return [LocalizedString(self) le_boundingRectWithSize:size options:options attributes:attributes context:context];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (CGSize)le_sizeWithAttributes:(nullable NSDictionary&lt;NSString *, id&gt; *)attrs&#123;</span><br><span class=\"line\">return [LocalizedString(self) le_sizeWithAttributes:attrs];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface UILabel (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation UILabel(LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)le_setText:(NSString *)text&#123;</span><br><span class=\"line\">[self le_setText:LocalizedString(text)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface UITabBarItem (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation UITabBarItem (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)le_setTitle:(NSString *)title&#123;</span><br><span class=\"line\">[self le_setTitle:LocalizedString(title)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface UIViewController (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation UIViewController (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)le_setTitle:(NSString *)title&#123;</span><br><span class=\"line\">[self le_setTitle:LocalizedString(title)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface UIButton (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation UIButton (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)le_setTitle:(NSString *)title forState:(UIControlState)state&#123;</span><br><span class=\"line\">[self le_setTitle:LocalizedString(title) forState:state];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation LocalizedEngine</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)startEngine&#123;</span><br><span class=\"line\">[[UILabel class] les_swizzleMethod:@selector(setText:) withMethod:@selector(le_setText:)];</span><br><span class=\"line\">[[UITabBarItem class] les_swizzleMethod:@selector(setTitle:) withMethod:@selector(le_setTitle:)];</span><br><span class=\"line\">[[UIViewController class] les_swizzleMethod:@selector(setTitle:) withMethod:@selector(le_setTitle:)];</span><br><span class=\"line\">[[UIButton class] les_swizzleMethod:@selector(setTitle:forState:) withMethod:@selector(le_setTitle:forState:)];</span><br><span class=\"line\">[[NSString class] les_swizzleMethod:@selector(boundingRectWithSize:options:attributes:context:) withMethod:@selector(le_boundingRectWithSize:options:attributes:context:)];</span><br><span class=\"line\">[[NSString class] les_swizzleMethod:@selector(sizeWithAttributes:) withMethod:@selector(le_sizeWithAttributes:)];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>调用只需要一句话<br>[LocalizedEngine startEngine];<br>其实只对UILabel做一次全局的文本就都被替换了，另一方面就是NSString对可变宽高的处理，这两个就已经解决了大部分需求，只不过后来发现系统控件在传递文本时做了布局的自适应，所以就有了UITabBarItem UIButton UIViewController的扩展，<br>根据自己APP情况适当调整即可，包括NSAttributedString 细化出来这些估计也不会超过200行，上边放出的是初版，.m总共100行冒头，轻轻松松省去慢慢找位置加，有人找你做本地化，从此只需要做好string对照表即可，让人按格式给你。<br>这只是利用AOP这种面向切面开发的思想解决问题的实例，同样的道理，风格扩展，日志，crash防御都能很好的独立且省事的完成。<br>后续还将放一篇AOPLogger的讲讲</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"IOS百行代码全局语言本地化-国际化\"><a href=\"#IOS百行代码全局语言本地化-国际化\" class=\"headerlink\" title=\"IOS百行代码全局语言本地化/国际化\"></a>IOS百行代码全局语言本地化/国际化</h1><p>废话不多说先把基本配置搞定图文一起来</p>\n<p><img src=\"/assets/blogImage/3994053-006976bd750f8324.jpeg\" alt=\"3618569F-C518-4582-8580-9DC73F1E8B2E.png\"><br>这里点个“+”直接就o了<br>剩下的就是创建strings文件也就是语言映射文件</p>\n<p><img src=\"/assets/blogImage/3994053-6172f40aabb17548.jpeg\" alt=\"32E018FA-1E4C-4127-BD87-0AE0B0B1641D.png\"></p>\n<p>划线的就是创建时候该点击的InfoPlist.strings就是定义CFBundleDisplayName来确定app的名字<br>Localizable.strings则是正经的语言映射表了<br>xib，storyboard和image也是一个套路看划线那点击就ok了<br><img src=\"/assets/blogImage/3994053-f2f6768c6d73d371.jpeg\" alt=\"6DCE952A-4868-4652-AAB5-59C36DF129D5.png\"></p>\n<h1 id=\"百行代码全局Hook完成本地化\"><a href=\"#百行代码全局Hook完成本地化\" class=\"headerlink\" title=\"百行代码全局Hook完成本地化\"></a>百行代码全局Hook完成本地化</h1><p>废话不多说先放代码在解释<br><a href=\"https://github.com/heroims/LocalizedEngine\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/LocalizedEngine</a><br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;LocalizedEngine.h&quot;</span><br><span class=\"line\">#import &lt;objc/runtime.h&gt;</span><br><span class=\"line\">#import &lt;UIKit/UIKit.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define LocalizedString(string) NSLocalizedString(string, nil)</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSObject (LocalizedEngineSwizzling)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation NSObject (LocalizedEngineSwizzling)</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)les_swizzleMethod:(SEL)origSel withMethod:(SEL)altSel &#123;</span><br><span class=\"line\">Method origMethod = class_getInstanceMethod(self, origSel);</span><br><span class=\"line\">Method altMethod = class_getInstanceMethod(self, altSel);</span><br><span class=\"line\">if (!origMethod || !altMethod) &#123;</span><br><span class=\"line\">return NO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class_addMethod(self,</span><br><span class=\"line\">origSel,</span><br><span class=\"line\">class_getMethodImplementation(self, origSel),</span><br><span class=\"line\">method_getTypeEncoding(origMethod));</span><br><span class=\"line\">class_addMethod(self,</span><br><span class=\"line\">altSel,</span><br><span class=\"line\">class_getMethodImplementation(self, altSel),</span><br><span class=\"line\">method_getTypeEncoding(altMethod));</span><br><span class=\"line\">method_exchangeImplementations(class_getInstanceMethod(self, origSel),</span><br><span class=\"line\">class_getInstanceMethod(self, altSel));</span><br><span class=\"line\">return YES;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)les_swizzleClassMethod:(SEL)origSel withMethod:(SEL)altSel &#123;</span><br><span class=\"line\">return [object_getClass((id)self) les_swizzleMethod:origSel withMethod:altSel];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSString (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation NSString(LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(CGRect)le_boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(nullable NSDictionary&lt;NSString *, id&gt; *)attributes context:(nullable NSStringDrawingContext *)context&#123;</span><br><span class=\"line\">return [LocalizedString(self) le_boundingRectWithSize:size options:options attributes:attributes context:context];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (CGSize)le_sizeWithAttributes:(nullable NSDictionary&lt;NSString *, id&gt; *)attrs&#123;</span><br><span class=\"line\">return [LocalizedString(self) le_sizeWithAttributes:attrs];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface UILabel (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation UILabel(LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)le_setText:(NSString *)text&#123;</span><br><span class=\"line\">[self le_setText:LocalizedString(text)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface UITabBarItem (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation UITabBarItem (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)le_setTitle:(NSString *)title&#123;</span><br><span class=\"line\">[self le_setTitle:LocalizedString(title)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface UIViewController (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation UIViewController (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)le_setTitle:(NSString *)title&#123;</span><br><span class=\"line\">[self le_setTitle:LocalizedString(title)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface UIButton (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation UIButton (LocalizedEngine)</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)le_setTitle:(NSString *)title forState:(UIControlState)state&#123;</span><br><span class=\"line\">[self le_setTitle:LocalizedString(title) forState:state];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation LocalizedEngine</span><br><span class=\"line\"></span><br><span class=\"line\">+(void)startEngine&#123;</span><br><span class=\"line\">[[UILabel class] les_swizzleMethod:@selector(setText:) withMethod:@selector(le_setText:)];</span><br><span class=\"line\">[[UITabBarItem class] les_swizzleMethod:@selector(setTitle:) withMethod:@selector(le_setTitle:)];</span><br><span class=\"line\">[[UIViewController class] les_swizzleMethod:@selector(setTitle:) withMethod:@selector(le_setTitle:)];</span><br><span class=\"line\">[[UIButton class] les_swizzleMethod:@selector(setTitle:forState:) withMethod:@selector(le_setTitle:forState:)];</span><br><span class=\"line\">[[NSString class] les_swizzleMethod:@selector(boundingRectWithSize:options:attributes:context:) withMethod:@selector(le_boundingRectWithSize:options:attributes:context:)];</span><br><span class=\"line\">[[NSString class] les_swizzleMethod:@selector(sizeWithAttributes:) withMethod:@selector(le_sizeWithAttributes:)];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure></p>\n<p>调用只需要一句话<br>[LocalizedEngine startEngine];<br>其实只对UILabel做一次全局的文本就都被替换了，另一方面就是NSString对可变宽高的处理，这两个就已经解决了大部分需求，只不过后来发现系统控件在传递文本时做了布局的自适应，所以就有了UITabBarItem UIButton UIViewController的扩展，<br>根据自己APP情况适当调整即可，包括NSAttributedString 细化出来这些估计也不会超过200行，上边放出的是初版，.m总共100行冒头，轻轻松松省去慢慢找位置加，有人找你做本地化，从此只需要做好string对照表即可，让人按格式给你。<br>这只是利用AOP这种面向切面开发的思想解决问题的实例，同样的道理，风格扩展，日志，crash防御都能很好的独立且省事的完成。<br>后续还将放一篇AOPLogger的讲讲</p>"},{"title":"IOS常用数学函数","date":"2013-01-22T06:32:21.000Z","_content":"\n# 1、 三角函数\n\ndouble sin (double);正弦\n\ndouble cos (double);余弦\n\ndouble tan (double);正切\n\n# 2 、反三角函数\ndouble asin (double); 结果介于[-PI/2, PI/2]\n\ndouble acos (double); 结果介于[0, PI]\n\ndouble atan (double); 反正切(主值), 结果介于[-PI/2, PI/2]\n\ndouble atan2 (double, double); 反正切(整圆值), 结果介于[-PI, PI]\n\n# 3 、双曲三角函数\ndouble sinh (double);\n\ndouble cosh (double);\n\ndouble tanh (double);\n\n# 4 、指数与对数\ndouble exp (double);求取自然数e的幂\n\ndouble sqrt (double);开平方\n\ndouble log (double); 以e为底的对数\n\ndouble log10 (double);以10为底的对数\n\ndouble pow(double x, double y）;计算以x为底数的y次幂\n\nfloat powf(float x, float y); 功能与pow一致，只是输入与输出皆为浮点数\n\n# 5 、取整\ndouble ceil (double); 取上整\n\ndouble floor (double); 取下整\n\ndouble round(double); 四舍五入\n\ndouble roundf(double); 四舍五入\n\ndouble lround(double); 四舍五入\n\ndouble lroundf(double); 四舍五入\n\n# 6 、绝对值\n\ndouble fabs (double);求绝对值\n\ndouble cabs(struct complex znum) ;求复数的绝对值\n\n# 7 、标准化浮点数\ndouble frexp (double f, int *p); 标准化浮点数, f = x * 2^p, 已知f求x, p ( x介于[0.5, 1] )\n\ndouble ldexp (double x, int p); 与frexp相反, 已知x, p求f\n\n# 8 、取整与取余\ndouble modf (double, double*); 将参数的整数部分通过指针回传, 返回小数部分\n\ndouble fmod (double, double); 返回两参数相除的余数\n# 9 、其他\ndouble hypot(double x, double y);已知直角三角形两个直角边长度，求斜边长度\n\ndouble ldexp(double x, int exponent);计算x*(2的exponent次幂)\n\ndouble poly(double x, int degree, double coeffs [] );计算多项式\n\nnt matherr(struct exception *e);数学错误计算处理程序\n","source":"_posts/IOS常用数学函数.md","raw":"---\ntitle: IOS常用数学函数\ndate: 2013-01-22 14:32:21\ntags:\n    - IOS\n    - 数学函数\n---\n\n# 1、 三角函数\n\ndouble sin (double);正弦\n\ndouble cos (double);余弦\n\ndouble tan (double);正切\n\n# 2 、反三角函数\ndouble asin (double); 结果介于[-PI/2, PI/2]\n\ndouble acos (double); 结果介于[0, PI]\n\ndouble atan (double); 反正切(主值), 结果介于[-PI/2, PI/2]\n\ndouble atan2 (double, double); 反正切(整圆值), 结果介于[-PI, PI]\n\n# 3 、双曲三角函数\ndouble sinh (double);\n\ndouble cosh (double);\n\ndouble tanh (double);\n\n# 4 、指数与对数\ndouble exp (double);求取自然数e的幂\n\ndouble sqrt (double);开平方\n\ndouble log (double); 以e为底的对数\n\ndouble log10 (double);以10为底的对数\n\ndouble pow(double x, double y）;计算以x为底数的y次幂\n\nfloat powf(float x, float y); 功能与pow一致，只是输入与输出皆为浮点数\n\n# 5 、取整\ndouble ceil (double); 取上整\n\ndouble floor (double); 取下整\n\ndouble round(double); 四舍五入\n\ndouble roundf(double); 四舍五入\n\ndouble lround(double); 四舍五入\n\ndouble lroundf(double); 四舍五入\n\n# 6 、绝对值\n\ndouble fabs (double);求绝对值\n\ndouble cabs(struct complex znum) ;求复数的绝对值\n\n# 7 、标准化浮点数\ndouble frexp (double f, int *p); 标准化浮点数, f = x * 2^p, 已知f求x, p ( x介于[0.5, 1] )\n\ndouble ldexp (double x, int p); 与frexp相反, 已知x, p求f\n\n# 8 、取整与取余\ndouble modf (double, double*); 将参数的整数部分通过指针回传, 返回小数部分\n\ndouble fmod (double, double); 返回两参数相除的余数\n# 9 、其他\ndouble hypot(double x, double y);已知直角三角形两个直角边长度，求斜边长度\n\ndouble ldexp(double x, int exponent);计算x*(2的exponent次幂)\n\ndouble poly(double x, int degree, double coeffs [] );计算多项式\n\nnt matherr(struct exception *e);数学错误计算处理程序\n","slug":"IOS常用数学函数","published":1,"updated":"2021-07-08T09:20:31.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqu000enhs6p17dh54f","content":"<h1 id=\"1、-三角函数\"><a href=\"#1、-三角函数\" class=\"headerlink\" title=\"1、 三角函数\"></a>1、 三角函数</h1><p>double sin (double);正弦</p>\n<p>double cos (double);余弦</p>\n<p>double tan (double);正切</p>\n<h1 id=\"2-、反三角函数\"><a href=\"#2-、反三角函数\" class=\"headerlink\" title=\"2 、反三角函数\"></a>2 、反三角函数</h1><p>double asin (double); 结果介于[-PI/2, PI/2]</p>\n<p>double acos (double); 结果介于[0, PI]</p>\n<p>double atan (double); 反正切(主值), 结果介于[-PI/2, PI/2]</p>\n<p>double atan2 (double, double); 反正切(整圆值), 结果介于[-PI, PI]</p>\n<h1 id=\"3-、双曲三角函数\"><a href=\"#3-、双曲三角函数\" class=\"headerlink\" title=\"3 、双曲三角函数\"></a>3 、双曲三角函数</h1><p>double sinh (double);</p>\n<p>double cosh (double);</p>\n<p>double tanh (double);</p>\n<h1 id=\"4-、指数与对数\"><a href=\"#4-、指数与对数\" class=\"headerlink\" title=\"4 、指数与对数\"></a>4 、指数与对数</h1><p>double exp (double);求取自然数e的幂</p>\n<p>double sqrt (double);开平方</p>\n<p>double log (double); 以e为底的对数</p>\n<p>double log10 (double);以10为底的对数</p>\n<p>double pow(double x, double y）;计算以x为底数的y次幂</p>\n<p>float powf(float x, float y); 功能与pow一致，只是输入与输出皆为浮点数</p>\n<h1 id=\"5-、取整\"><a href=\"#5-、取整\" class=\"headerlink\" title=\"5 、取整\"></a>5 、取整</h1><p>double ceil (double); 取上整</p>\n<p>double floor (double); 取下整</p>\n<p>double round(double); 四舍五入</p>\n<p>double roundf(double); 四舍五入</p>\n<p>double lround(double); 四舍五入</p>\n<p>double lroundf(double); 四舍五入</p>\n<h1 id=\"6-、绝对值\"><a href=\"#6-、绝对值\" class=\"headerlink\" title=\"6 、绝对值\"></a>6 、绝对值</h1><p>double fabs (double);求绝对值</p>\n<p>double cabs(struct complex znum) ;求复数的绝对值</p>\n<h1 id=\"7-、标准化浮点数\"><a href=\"#7-、标准化浮点数\" class=\"headerlink\" title=\"7 、标准化浮点数\"></a>7 、标准化浮点数</h1><p>double frexp (double f, int <em>p); 标准化浮点数, f = x </em> 2^p, 已知f求x, p ( x介于[0.5, 1] )</p>\n<p>double ldexp (double x, int p); 与frexp相反, 已知x, p求f</p>\n<h1 id=\"8-、取整与取余\"><a href=\"#8-、取整与取余\" class=\"headerlink\" title=\"8 、取整与取余\"></a>8 、取整与取余</h1><p>double modf (double, double*); 将参数的整数部分通过指针回传, 返回小数部分</p>\n<p>double fmod (double, double); 返回两参数相除的余数</p>\n<h1 id=\"9-、其他\"><a href=\"#9-、其他\" class=\"headerlink\" title=\"9 、其他\"></a>9 、其他</h1><p>double hypot(double x, double y);已知直角三角形两个直角边长度，求斜边长度</p>\n<p>double ldexp(double x, int exponent);计算x*(2的exponent次幂)</p>\n<p>double poly(double x, int degree, double coeffs [] );计算多项式</p>\n<p>nt matherr(struct exception *e);数学错误计算处理程序</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1、-三角函数\"><a href=\"#1、-三角函数\" class=\"headerlink\" title=\"1、 三角函数\"></a>1、 三角函数</h1><p>double sin (double);正弦</p>\n<p>double cos (double);余弦</p>\n<p>double tan (double);正切</p>\n<h1 id=\"2-、反三角函数\"><a href=\"#2-、反三角函数\" class=\"headerlink\" title=\"2 、反三角函数\"></a>2 、反三角函数</h1><p>double asin (double); 结果介于[-PI/2, PI/2]</p>\n<p>double acos (double); 结果介于[0, PI]</p>\n<p>double atan (double); 反正切(主值), 结果介于[-PI/2, PI/2]</p>\n<p>double atan2 (double, double); 反正切(整圆值), 结果介于[-PI, PI]</p>\n<h1 id=\"3-、双曲三角函数\"><a href=\"#3-、双曲三角函数\" class=\"headerlink\" title=\"3 、双曲三角函数\"></a>3 、双曲三角函数</h1><p>double sinh (double);</p>\n<p>double cosh (double);</p>\n<p>double tanh (double);</p>\n<h1 id=\"4-、指数与对数\"><a href=\"#4-、指数与对数\" class=\"headerlink\" title=\"4 、指数与对数\"></a>4 、指数与对数</h1><p>double exp (double);求取自然数e的幂</p>\n<p>double sqrt (double);开平方</p>\n<p>double log (double); 以e为底的对数</p>\n<p>double log10 (double);以10为底的对数</p>\n<p>double pow(double x, double y）;计算以x为底数的y次幂</p>\n<p>float powf(float x, float y); 功能与pow一致，只是输入与输出皆为浮点数</p>\n<h1 id=\"5-、取整\"><a href=\"#5-、取整\" class=\"headerlink\" title=\"5 、取整\"></a>5 、取整</h1><p>double ceil (double); 取上整</p>\n<p>double floor (double); 取下整</p>\n<p>double round(double); 四舍五入</p>\n<p>double roundf(double); 四舍五入</p>\n<p>double lround(double); 四舍五入</p>\n<p>double lroundf(double); 四舍五入</p>\n<h1 id=\"6-、绝对值\"><a href=\"#6-、绝对值\" class=\"headerlink\" title=\"6 、绝对值\"></a>6 、绝对值</h1><p>double fabs (double);求绝对值</p>\n<p>double cabs(struct complex znum) ;求复数的绝对值</p>\n<h1 id=\"7-、标准化浮点数\"><a href=\"#7-、标准化浮点数\" class=\"headerlink\" title=\"7 、标准化浮点数\"></a>7 、标准化浮点数</h1><p>double frexp (double f, int <em>p); 标准化浮点数, f = x </em> 2^p, 已知f求x, p ( x介于[0.5, 1] )</p>\n<p>double ldexp (double x, int p); 与frexp相反, 已知x, p求f</p>\n<h1 id=\"8-、取整与取余\"><a href=\"#8-、取整与取余\" class=\"headerlink\" title=\"8 、取整与取余\"></a>8 、取整与取余</h1><p>double modf (double, double*); 将参数的整数部分通过指针回传, 返回小数部分</p>\n<p>double fmod (double, double); 返回两参数相除的余数</p>\n<h1 id=\"9-、其他\"><a href=\"#9-、其他\" class=\"headerlink\" title=\"9 、其他\"></a>9 、其他</h1><p>double hypot(double x, double y);已知直角三角形两个直角边长度，求斜边长度</p>\n<p>double ldexp(double x, int exponent);计算x*(2的exponent次幂)</p>\n<p>double poly(double x, int degree, double coeffs [] );计算多项式</p>\n<p>nt matherr(struct exception *e);数学错误计算处理程序</p>\n"},{"title":"Linux 构建/编译IOS/Mac程序","date":"2017-09-09T18:09:05.000Z","_content":"\n# 前言\n理论上这是一个很好的想法，但真正落实到实践，简直坑的不要不要的！笔者最终在CentOS上实在搞不动了，只在Ubuntu上弄了，关键CentOS是公司环境也不敢太造次。\n\n整个东西写出来主要是让自己记住坑太多，不是实在想不开没事干，千万不要再搞。\n\n思路来源https://github.com/facebook/xcbuild/issues/37\n# 目的\n做这个事情起初只是因为我司不提供Mac机器来做自动打包，但又想要让我做自动打包，能提供的也只有CentOS系统，不过很快就发现打包其实完全不可能，因为证书问题很难解决，然后想着跑跑CI的test也不错才继续研究了一下。。。。毕竟我们Model都是自动生成的，git提交后跑一下CI确保能各端运行正常还是很有用的，另外版本归档打tag的时候跑一下CocoaPods把完整可执行代码构建好拉下来归档也是挺不错的！\n\n现实是恐怕就CocoaPods构建是比较稳定100%没问题，编译这个完全不敢说ok。。。所以有条件的话还是建议用有台Mac专门来干这些事，不然实在太麻烦，哪怕ssh到一台同事电脑悄悄开个账户搞都比在linux上搞靠谱！\n\n如图实现，没mac和有mac简直就是天壤之别的恶心差距！\n\n![Untitled.png](/assets/blogImage/3994053-fad34baa2afc46ac.png)\n\n# 安装配置\n## 准备工作\nruby （为了支持CocoaPods）\n[clang](http://releases.llvm.org/download.html) 4.0或以上（为了支持IOS10，如果你准备的sdk版本不高，那就无所谓了，关键是对应上）\n[Apple clang](https://opensource.apple.com/tarballs/clang/)(用他的话妥妥的手动apt-get拯救不了你)\n[cctools-port](https://github.com/tpoechtrager/cctools-port.git) 生成ios工具链（ios-toolchain）回头替换掉Xcode里的\n[ninja](https://github.com/ninja-build/ninja.git)\n[xcbuild](https://github.com/facebook/xcbuild.git)\nXcode（确切的说其实只要三个文件夹但我很不放心用了整个）\n<!-- more -->\n## CocoaPods 安装\n这里不得不提CocoaPods兼容性真心不错\nCentOS\n```\nsudo yum install ruby\nsudo gem install cocoapods\n```\nUbuntu\n```\nsudo apt-get install ruby\nsudo gem install cocoapods\n```\n就是如此简单！已经时可用状态了！\n## Clang 安装\n接下来就不细说CentOS了应为基本上大部分库都是要源码安装。。。\n首先`clang --version`看看版本是不是自己想要，多半都不是然后直接删了\n```\nsudo apt-get autoremove clang\n```\n然后搞一下软件源`/etc/apt/sources.list`不然各种依赖包各种找不到让你爽歪歪\n```\n#deb cdrom:[Ubuntu 16.04.2 LTS _Xenial Xerus_ - Release amd64 (20170215.2)]/ xenial main restricted\n# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to\n# newer versions of the distribution.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial main restricted\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted\n## Major bug fix updates produced after the final release of the\n## distribution.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\n## team. Also, please note that software in universe WILL NOT receive any\n## review or updates from the Ubuntu security team.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial universe\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial universe\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu \n## team, and may not be under a free licence. Please satisfy yourself as to \n## your rights to use the software. Also, please note that software in \n## multiverse WILL NOT receive any review or updates from the Ubuntu\n## security team.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial multiverse\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial multiverse\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse\n## N.B. software from this repository may not have been tested as\n## extensively as that contained in the main release, although it includes\n## newer versions of some applications which may provide useful features.\n## Also, please note that software in backports WILL NOT receive any review\n## or updates from the Ubuntu security team.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse\n## Uncomment the following two lines to add software from Canonical's\n## 'partner' repository.\n## This software is not part of Ubuntu, but is offered by Canonical and the\n## respective vendors as a service to Ubuntu users.\n# deb http://archive.canonical.com/ubuntu xenial partner\n# deb-src http://archive.canonical.com/ubuntu xenial partner\ndeb http://security.ubuntu.com/ubuntu xenial-security main restricted\n# deb-src http://security.ubuntu.com/ubuntu xenial-security main restricted\ndeb http://security.ubuntu.com/ubuntu xenial-security universe\n# deb-src http://security.ubuntu.com/ubuntu xenial-security universe\ndeb http://security.ubuntu.com/ubuntu xenial-security multiverse\n# deb-src http://security.ubuntu.com/ubuntu xenial-security multiverse\n```\n下面大更新一波，安装\n```\nsudo apt-get update\nsudo apt-get install git gcc cmake libssl-dev libtool autoconf automake clang-4.0\n```\n除了错误别找我，直接谷歌去找源\n安装完`clang`看看位置如果不是`usr/bin`\n执行下面命令制作软链接，只为保险不是必需的。。。。\n```\nsudo ln -s /usr/bin/clang-4.0 /usr/bin/clang\nsudo ln -s /usr/bin/clang++-4.0 /usr/bin/clang++\n```\n吐槽一波CentOS你更新了源也没用该没有的还是没有建议直接源码安装。\n\n```\n#下载llvm源码\nwget http://llvm.org/releases/4.0.1/llvm-4.0.1.src.tar.xz\ntar xf llvm-4.0.1.src.tar.xz\nmv llvm-4.0.1.src llvm\n\n#下载clang源码\ncd llvm/tools\nwget http://llvm.org/releases/4.0.1/cfe-4.0.1.src.tar.xz\ntar xf cfe-4.0.1.src.tar.xz\nmv cfe-4.0.1.src clang\ncd ../..\n\n#下载clang-tools-extra源码  可选\ncd llvm/tools/clang/tools\nwget http://llvm.org/releases/4.0.1/clang-tools-extra-4.0.1.src.tar.xz\ntar xf clang-tools-extra-4.0.1.src.tar.xz\nmv clang-tools-extra-4.0.1.src  extra\ncd ../../../..\n\n#下载compiler-rt源码 可选\ncd llvm/projects\nwget http://llvm.org/releases/4.0.1/compiler-rt-4.0.1.src.tar.xz\ntar xf compiler-rt-4.0.1.src.tar.xz\nmv compiler-rt-4.0.1.src compiler-rt\ncd ../..\n\nmkdir llvmbuild\ncd llvmbuild\n#正常套路安装\n#设置配置\n#–prefix=directory — 设置llvm编译的安装路径(default/usr/local). \n#–enable-optimized — 是否选择优化(defaultis NO)，yes是指安装一个Release版本. \n#–enable-assertions — 是否断言检查(default is YES).\n../llvm/configure --enable-optimized --enable-targets=host-only --prefix=/usr/bin\n#构建\ncmake ../llvm\nmake\n#安装\nsudo make install\n\n#ninja套路安装\n#设置配置\ncmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/bin -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_FFI=ON -DLLVM_BUILD_LLVM_DYLIB=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLLVM_TARGETS_TO_BUILD=\"host\" -Wno-dev ../llvm\n#构建想几核自己根据配置设置\nninja -j4\n#安装\nninja install\n```\n## Apple Clang 安装\n步骤如上面CentOS源码安装Clang一样，只是把Clang地址改了下\n```\ncd llvm/tools\nwget https://opensource.apple.com/tarballs/clang/clang-800.0.42.1.tar.gz\ntar xf clang-800.0.42.1.tar.gz\nmv clang-800.0.42.1 clang\ncd ../..\n```\n\n## cctools-port 制作ios-toolchain 的Clang\n### ios sdk 打包\n下载完Xcode直接执行下面命令\n```\n\nSDK=$(ls -l Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs | grep \" -> iPhoneOS.sdk\" | head -n1 | awk '{print $9}')\ncp -r Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk /tmp/$SDK 1>/dev/null\ncp -r Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1 /tmp/$SDK/usr/include/c++ 1>/dev/null\npushd /tmp\ntar -cvzf $SDK.tar.gz $SDK\nrm -rf $SDK\nmv $SDK.tar.gz ~\npopd\n```\n### 制作 iOS armv7 工具链\n```\ncd cctools-port\nIPHONEOS_DEPLOYMENT_TARGET=5.0 usage_examples/ios_toolchain/build.sh ~/iPhoneOS10.0.sdk.tar.gz armv7\n```\n制作工具链成功后会提示*** all done ***\n\n将生成的工具链移到 /usr/local/ 目录并更名为 ios-armv7\n```\nsudo mv usage_examples/ios_toolchain/target /usr/local/ios-armv7\n```\n将库文件拷贝一份，放进公共库 /usr/lib\n```\nsudo cp /usr/local/ios-armv7/lib/libtapi.so /usr/lib\n```\n\n最后将工具链的 bin 目录加入PATH，方便调用\n```\nexport PATH=$PATH:/usr/local/ios-armv7/bin\n```\n### 制作 iOS arm64 工具链\n```\ncd cctools-port\nIPHONEOS_DEPLOYMENT_TARGET=5.0 usage_examples/ios_toolchain/build.sh ~/iPhoneOS10.0.sdk.tar.gz arm64\n```\n制作工具链成功后会提示*** all done ***\n\n将生成的工具链  /usr/local/ 目录并更名为 ios-arm64\n```\nsudo mv usage_examples/ios_toolchain/target /usr/local/ios-arm64\n```\n使用 rename 命令重命名前缀以与 armv7 区分开来把 arm- 前缀改为 aarch64- 前缀\n```\nrename 's/arm-/aarch64-/' /usr/local/ios-arm64/bin/*\nsudo rm /usr/local/ios-arm64/aarch64-apple-darwin11-clang++\nsudo ln -s /usr/local/ios-arm64/aarch64-apple-darwin11-clang /usr/local/ios-arm64/aarch64-apple-darwin11-clang++\n```\n将库文件拷贝一份，放进公共库 /usr/lib\n```\nsudo cp /usr/local/ios-arm64/lib/libtapi.so /usr/lib\n```\n最后将工具链的 bin 目录加入PATH，方便调用\n```\nexport PATH=$PATH:/usr/local/ios-arm64/bin\n```\n\n其实到这基本完活了，单跑.m文件已经没问题了，下面只是为了更加方便的编译项目\n\n这里已经可以跑个测试程序编译试试了如`arrch-apple-darwin11-clang helloworld.c -o helloworld`或`arm-apple-darwin11-clang helloworld.c -o helloworld`\n\n### 合并 armv7 和 arm64 工具链(可选)\n一般用`ar`命令做合并不过容易出问题\n\n### 替换xctoolchain\n把最后想要用的生成的工具链clang 和 clang++文件替换到`usr/bin`下（不替换也可以达成目的即可），相当于回头编译的时候走我们产出的这套clang环境。总之就是思路就是让`xcbuild`走我们的这套clang去打包编译程序即可。如果你用Apple Clang或直接Clang能打包编译也就不用自己手动做这个事了。\n\n\n## Ninja 安装\nUbuntu一行命令解决。。。。\n```\napt-get install ninja-build\n```\nCentOS天坑模式开启不出意外先升级cmake\n源码安装最新版[cmake](https://gitlab.kitware.com/cmake/cmake.git)解压执行`./bootstrap && make && make install` 就ok了，3个命令合一。\n然后下载ninja源码\n```\ngit clone git://github.com/ninja-build/ninja.git && cd ninja\ngit checkout release\n./configure.py --bootstrap\n```\n最后把Path加一下\n```\nexport PATH=$PATH:/xxx/xxx/ninja\n```\n## xcbuild 安装\n```\ngit clone https://github.com/facebook/xcbuild\ncd xcbuild\ngit submodule update --init\nmake\n```\n最后把Path加一下和DEVELOPER_DIR\nDEVELOPER_DIR就是Xcode的目录，Xcode其实只需要有三个文件夹`Xcode.app/Contents/PlugIns`，`Xcode.app/Contents/Developer/Toolchains`,`Xcode.app/Contents/Developer/Platforms`\n```\nexport PATH=$PATH:/xxx/xxx/xcbuild/build\nexport DEVELOPER_DIR=/xxx/xxx/Xcode.app\n```\n# 使用\n完全可以像在Mac下一样用没有任何区别，不过也就CocoaPods完全ok，xcbuild指令和xcodebuild用法完全一样直接用xcodebuild也没问题，只不过能不能编译成功就听天由命吧！坑很深，慎入！\n","source":"_posts/Linux 构建:编译IOS:Mac程序.md","raw":"---\ntitle: Linux 构建/编译IOS/Mac程序\ndate: 2017-09-10 02:09:05\ntags:\n    - IOS\n    - 构建\n    - 编译\n    - Linux\n    - 架构设计\n---\n\n# 前言\n理论上这是一个很好的想法，但真正落实到实践，简直坑的不要不要的！笔者最终在CentOS上实在搞不动了，只在Ubuntu上弄了，关键CentOS是公司环境也不敢太造次。\n\n整个东西写出来主要是让自己记住坑太多，不是实在想不开没事干，千万不要再搞。\n\n思路来源https://github.com/facebook/xcbuild/issues/37\n# 目的\n做这个事情起初只是因为我司不提供Mac机器来做自动打包，但又想要让我做自动打包，能提供的也只有CentOS系统，不过很快就发现打包其实完全不可能，因为证书问题很难解决，然后想着跑跑CI的test也不错才继续研究了一下。。。。毕竟我们Model都是自动生成的，git提交后跑一下CI确保能各端运行正常还是很有用的，另外版本归档打tag的时候跑一下CocoaPods把完整可执行代码构建好拉下来归档也是挺不错的！\n\n现实是恐怕就CocoaPods构建是比较稳定100%没问题，编译这个完全不敢说ok。。。所以有条件的话还是建议用有台Mac专门来干这些事，不然实在太麻烦，哪怕ssh到一台同事电脑悄悄开个账户搞都比在linux上搞靠谱！\n\n如图实现，没mac和有mac简直就是天壤之别的恶心差距！\n\n![Untitled.png](/assets/blogImage/3994053-fad34baa2afc46ac.png)\n\n# 安装配置\n## 准备工作\nruby （为了支持CocoaPods）\n[clang](http://releases.llvm.org/download.html) 4.0或以上（为了支持IOS10，如果你准备的sdk版本不高，那就无所谓了，关键是对应上）\n[Apple clang](https://opensource.apple.com/tarballs/clang/)(用他的话妥妥的手动apt-get拯救不了你)\n[cctools-port](https://github.com/tpoechtrager/cctools-port.git) 生成ios工具链（ios-toolchain）回头替换掉Xcode里的\n[ninja](https://github.com/ninja-build/ninja.git)\n[xcbuild](https://github.com/facebook/xcbuild.git)\nXcode（确切的说其实只要三个文件夹但我很不放心用了整个）\n<!-- more -->\n## CocoaPods 安装\n这里不得不提CocoaPods兼容性真心不错\nCentOS\n```\nsudo yum install ruby\nsudo gem install cocoapods\n```\nUbuntu\n```\nsudo apt-get install ruby\nsudo gem install cocoapods\n```\n就是如此简单！已经时可用状态了！\n## Clang 安装\n接下来就不细说CentOS了应为基本上大部分库都是要源码安装。。。\n首先`clang --version`看看版本是不是自己想要，多半都不是然后直接删了\n```\nsudo apt-get autoremove clang\n```\n然后搞一下软件源`/etc/apt/sources.list`不然各种依赖包各种找不到让你爽歪歪\n```\n#deb cdrom:[Ubuntu 16.04.2 LTS _Xenial Xerus_ - Release amd64 (20170215.2)]/ xenial main restricted\n# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to\n# newer versions of the distribution.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial main restricted\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted\n## Major bug fix updates produced after the final release of the\n## distribution.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu\n## team. Also, please note that software in universe WILL NOT receive any\n## review or updates from the Ubuntu security team.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial universe\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial universe\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe\n## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu \n## team, and may not be under a free licence. Please satisfy yourself as to \n## your rights to use the software. Also, please note that software in \n## multiverse WILL NOT receive any review or updates from the Ubuntu\n## security team.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial multiverse\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial multiverse\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse\n## N.B. software from this repository may not have been tested as\n## extensively as that contained in the main release, although it includes\n## newer versions of some applications which may provide useful features.\n## Also, please note that software in backports WILL NOT receive any review\n## or updates from the Ubuntu security team.\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse\n# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse\n## Uncomment the following two lines to add software from Canonical's\n## 'partner' repository.\n## This software is not part of Ubuntu, but is offered by Canonical and the\n## respective vendors as a service to Ubuntu users.\n# deb http://archive.canonical.com/ubuntu xenial partner\n# deb-src http://archive.canonical.com/ubuntu xenial partner\ndeb http://security.ubuntu.com/ubuntu xenial-security main restricted\n# deb-src http://security.ubuntu.com/ubuntu xenial-security main restricted\ndeb http://security.ubuntu.com/ubuntu xenial-security universe\n# deb-src http://security.ubuntu.com/ubuntu xenial-security universe\ndeb http://security.ubuntu.com/ubuntu xenial-security multiverse\n# deb-src http://security.ubuntu.com/ubuntu xenial-security multiverse\n```\n下面大更新一波，安装\n```\nsudo apt-get update\nsudo apt-get install git gcc cmake libssl-dev libtool autoconf automake clang-4.0\n```\n除了错误别找我，直接谷歌去找源\n安装完`clang`看看位置如果不是`usr/bin`\n执行下面命令制作软链接，只为保险不是必需的。。。。\n```\nsudo ln -s /usr/bin/clang-4.0 /usr/bin/clang\nsudo ln -s /usr/bin/clang++-4.0 /usr/bin/clang++\n```\n吐槽一波CentOS你更新了源也没用该没有的还是没有建议直接源码安装。\n\n```\n#下载llvm源码\nwget http://llvm.org/releases/4.0.1/llvm-4.0.1.src.tar.xz\ntar xf llvm-4.0.1.src.tar.xz\nmv llvm-4.0.1.src llvm\n\n#下载clang源码\ncd llvm/tools\nwget http://llvm.org/releases/4.0.1/cfe-4.0.1.src.tar.xz\ntar xf cfe-4.0.1.src.tar.xz\nmv cfe-4.0.1.src clang\ncd ../..\n\n#下载clang-tools-extra源码  可选\ncd llvm/tools/clang/tools\nwget http://llvm.org/releases/4.0.1/clang-tools-extra-4.0.1.src.tar.xz\ntar xf clang-tools-extra-4.0.1.src.tar.xz\nmv clang-tools-extra-4.0.1.src  extra\ncd ../../../..\n\n#下载compiler-rt源码 可选\ncd llvm/projects\nwget http://llvm.org/releases/4.0.1/compiler-rt-4.0.1.src.tar.xz\ntar xf compiler-rt-4.0.1.src.tar.xz\nmv compiler-rt-4.0.1.src compiler-rt\ncd ../..\n\nmkdir llvmbuild\ncd llvmbuild\n#正常套路安装\n#设置配置\n#–prefix=directory — 设置llvm编译的安装路径(default/usr/local). \n#–enable-optimized — 是否选择优化(defaultis NO)，yes是指安装一个Release版本. \n#–enable-assertions — 是否断言检查(default is YES).\n../llvm/configure --enable-optimized --enable-targets=host-only --prefix=/usr/bin\n#构建\ncmake ../llvm\nmake\n#安装\nsudo make install\n\n#ninja套路安装\n#设置配置\ncmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/bin -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_FFI=ON -DLLVM_BUILD_LLVM_DYLIB=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLLVM_TARGETS_TO_BUILD=\"host\" -Wno-dev ../llvm\n#构建想几核自己根据配置设置\nninja -j4\n#安装\nninja install\n```\n## Apple Clang 安装\n步骤如上面CentOS源码安装Clang一样，只是把Clang地址改了下\n```\ncd llvm/tools\nwget https://opensource.apple.com/tarballs/clang/clang-800.0.42.1.tar.gz\ntar xf clang-800.0.42.1.tar.gz\nmv clang-800.0.42.1 clang\ncd ../..\n```\n\n## cctools-port 制作ios-toolchain 的Clang\n### ios sdk 打包\n下载完Xcode直接执行下面命令\n```\n\nSDK=$(ls -l Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs | grep \" -> iPhoneOS.sdk\" | head -n1 | awk '{print $9}')\ncp -r Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk /tmp/$SDK 1>/dev/null\ncp -r Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1 /tmp/$SDK/usr/include/c++ 1>/dev/null\npushd /tmp\ntar -cvzf $SDK.tar.gz $SDK\nrm -rf $SDK\nmv $SDK.tar.gz ~\npopd\n```\n### 制作 iOS armv7 工具链\n```\ncd cctools-port\nIPHONEOS_DEPLOYMENT_TARGET=5.0 usage_examples/ios_toolchain/build.sh ~/iPhoneOS10.0.sdk.tar.gz armv7\n```\n制作工具链成功后会提示*** all done ***\n\n将生成的工具链移到 /usr/local/ 目录并更名为 ios-armv7\n```\nsudo mv usage_examples/ios_toolchain/target /usr/local/ios-armv7\n```\n将库文件拷贝一份，放进公共库 /usr/lib\n```\nsudo cp /usr/local/ios-armv7/lib/libtapi.so /usr/lib\n```\n\n最后将工具链的 bin 目录加入PATH，方便调用\n```\nexport PATH=$PATH:/usr/local/ios-armv7/bin\n```\n### 制作 iOS arm64 工具链\n```\ncd cctools-port\nIPHONEOS_DEPLOYMENT_TARGET=5.0 usage_examples/ios_toolchain/build.sh ~/iPhoneOS10.0.sdk.tar.gz arm64\n```\n制作工具链成功后会提示*** all done ***\n\n将生成的工具链  /usr/local/ 目录并更名为 ios-arm64\n```\nsudo mv usage_examples/ios_toolchain/target /usr/local/ios-arm64\n```\n使用 rename 命令重命名前缀以与 armv7 区分开来把 arm- 前缀改为 aarch64- 前缀\n```\nrename 's/arm-/aarch64-/' /usr/local/ios-arm64/bin/*\nsudo rm /usr/local/ios-arm64/aarch64-apple-darwin11-clang++\nsudo ln -s /usr/local/ios-arm64/aarch64-apple-darwin11-clang /usr/local/ios-arm64/aarch64-apple-darwin11-clang++\n```\n将库文件拷贝一份，放进公共库 /usr/lib\n```\nsudo cp /usr/local/ios-arm64/lib/libtapi.so /usr/lib\n```\n最后将工具链的 bin 目录加入PATH，方便调用\n```\nexport PATH=$PATH:/usr/local/ios-arm64/bin\n```\n\n其实到这基本完活了，单跑.m文件已经没问题了，下面只是为了更加方便的编译项目\n\n这里已经可以跑个测试程序编译试试了如`arrch-apple-darwin11-clang helloworld.c -o helloworld`或`arm-apple-darwin11-clang helloworld.c -o helloworld`\n\n### 合并 armv7 和 arm64 工具链(可选)\n一般用`ar`命令做合并不过容易出问题\n\n### 替换xctoolchain\n把最后想要用的生成的工具链clang 和 clang++文件替换到`usr/bin`下（不替换也可以达成目的即可），相当于回头编译的时候走我们产出的这套clang环境。总之就是思路就是让`xcbuild`走我们的这套clang去打包编译程序即可。如果你用Apple Clang或直接Clang能打包编译也就不用自己手动做这个事了。\n\n\n## Ninja 安装\nUbuntu一行命令解决。。。。\n```\napt-get install ninja-build\n```\nCentOS天坑模式开启不出意外先升级cmake\n源码安装最新版[cmake](https://gitlab.kitware.com/cmake/cmake.git)解压执行`./bootstrap && make && make install` 就ok了，3个命令合一。\n然后下载ninja源码\n```\ngit clone git://github.com/ninja-build/ninja.git && cd ninja\ngit checkout release\n./configure.py --bootstrap\n```\n最后把Path加一下\n```\nexport PATH=$PATH:/xxx/xxx/ninja\n```\n## xcbuild 安装\n```\ngit clone https://github.com/facebook/xcbuild\ncd xcbuild\ngit submodule update --init\nmake\n```\n最后把Path加一下和DEVELOPER_DIR\nDEVELOPER_DIR就是Xcode的目录，Xcode其实只需要有三个文件夹`Xcode.app/Contents/PlugIns`，`Xcode.app/Contents/Developer/Toolchains`,`Xcode.app/Contents/Developer/Platforms`\n```\nexport PATH=$PATH:/xxx/xxx/xcbuild/build\nexport DEVELOPER_DIR=/xxx/xxx/Xcode.app\n```\n# 使用\n完全可以像在Mac下一样用没有任何区别，不过也就CocoaPods完全ok，xcbuild指令和xcodebuild用法完全一样直接用xcodebuild也没问题，只不过能不能编译成功就听天由命吧！坑很深，慎入！\n","slug":"Linux 构建:编译IOS:Mac程序","published":1,"updated":"2021-07-08T09:20:31.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqw000gnhs674bame8h","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>理论上这是一个很好的想法，但真正落实到实践，简直坑的不要不要的！笔者最终在CentOS上实在搞不动了，只在Ubuntu上弄了，关键CentOS是公司环境也不敢太造次。</p>\n<p>整个东西写出来主要是让自己记住坑太多，不是实在想不开没事干，千万不要再搞。</p>\n<p>思路来源<a href=\"https://github.com/facebook/xcbuild/issues/37\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/xcbuild/issues/37</a></p>\n<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>做这个事情起初只是因为我司不提供Mac机器来做自动打包，但又想要让我做自动打包，能提供的也只有CentOS系统，不过很快就发现打包其实完全不可能，因为证书问题很难解决，然后想着跑跑CI的test也不错才继续研究了一下。。。。毕竟我们Model都是自动生成的，git提交后跑一下CI确保能各端运行正常还是很有用的，另外版本归档打tag的时候跑一下CocoaPods把完整可执行代码构建好拉下来归档也是挺不错的！</p>\n<p>现实是恐怕就CocoaPods构建是比较稳定100%没问题，编译这个完全不敢说ok。。。所以有条件的话还是建议用有台Mac专门来干这些事，不然实在太麻烦，哪怕ssh到一台同事电脑悄悄开个账户搞都比在linux上搞靠谱！</p>\n<p>如图实现，没mac和有mac简直就是天壤之别的恶心差距！</p>\n<p><img src=\"/assets/blogImage/3994053-fad34baa2afc46ac.png\" alt=\"Untitled.png\"></p>\n<h1 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>ruby （为了支持CocoaPods）<br><a href=\"http://releases.llvm.org/download.html\" target=\"_blank\" rel=\"noopener\">clang</a> 4.0或以上（为了支持IOS10，如果你准备的sdk版本不高，那就无所谓了，关键是对应上）<br><a href=\"https://opensource.apple.com/tarballs/clang/\" target=\"_blank\" rel=\"noopener\">Apple clang</a>(用他的话妥妥的手动apt-get拯救不了你)<br><a href=\"https://github.com/tpoechtrager/cctools-port.git\" target=\"_blank\" rel=\"noopener\">cctools-port</a> 生成ios工具链（ios-toolchain）回头替换掉Xcode里的<br><a href=\"https://github.com/ninja-build/ninja.git\" target=\"_blank\" rel=\"noopener\">ninja</a><br><a href=\"https://github.com/facebook/xcbuild.git\" target=\"_blank\" rel=\"noopener\">xcbuild</a><br>Xcode（确切的说其实只要三个文件夹但我很不放心用了整个）<br><a id=\"more\"></a></p>\n<h2 id=\"CocoaPods-安装\"><a href=\"#CocoaPods-安装\" class=\"headerlink\" title=\"CocoaPods 安装\"></a>CocoaPods 安装</h2><p>这里不得不提CocoaPods兼容性真心不错<br>CentOS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install ruby</span><br><span class=\"line\">sudo gem install cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>Ubuntu<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ruby</span><br><span class=\"line\">sudo gem install cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>就是如此简单！已经时可用状态了！</p>\n<h2 id=\"Clang-安装\"><a href=\"#Clang-安装\" class=\"headerlink\" title=\"Clang 安装\"></a>Clang 安装</h2><p>接下来就不细说CentOS了应为基本上大部分库都是要源码安装。。。<br>首先<code>clang --version</code>看看版本是不是自己想要，多半都不是然后直接删了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get autoremove clang</span><br></pre></td></tr></table></figure></p>\n<p>然后搞一下软件源<code>/etc/apt/sources.list</code>不然各种依赖包各种找不到让你爽歪歪<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#deb cdrom:[Ubuntu 16.04.2 LTS _Xenial Xerus_ - Release amd64 (20170215.2)]/ xenial main restricted</span><br><span class=\"line\"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span><br><span class=\"line\"># newer versions of the distribution.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class=\"line\">## Major bug fix updates produced after the final release of the</span><br><span class=\"line\">## distribution.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><br><span class=\"line\">## team. Also, please note that software in universe WILL NOT receive any</span><br><span class=\"line\">## review or updates from the Ubuntu security team.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial universe</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial universe</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu </span><br><span class=\"line\">## team, and may not be under a free licence. Please satisfy yourself as to </span><br><span class=\"line\">## your rights to use the software. Also, please note that software in </span><br><span class=\"line\">## multiverse WILL NOT receive any review or updates from the Ubuntu</span><br><span class=\"line\">## security team.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial multiverse</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial multiverse</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\">## N.B. software from this repository may not have been tested as</span><br><span class=\"line\">## extensively as that contained in the main release, although it includes</span><br><span class=\"line\">## newer versions of some applications which may provide useful features.</span><br><span class=\"line\">## Also, please note that software in backports WILL NOT receive any review</span><br><span class=\"line\">## or updates from the Ubuntu security team.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">## Uncomment the following two lines to add software from Canonical&apos;s</span><br><span class=\"line\">## &apos;partner&apos; repository.</span><br><span class=\"line\">## This software is not part of Ubuntu, but is offered by Canonical and the</span><br><span class=\"line\">## respective vendors as a service to Ubuntu users.</span><br><span class=\"line\"># deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\"># deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu xenial-security main restricted</span><br><span class=\"line\"># deb-src http://security.ubuntu.com/ubuntu xenial-security main restricted</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu xenial-security universe</span><br><span class=\"line\"># deb-src http://security.ubuntu.com/ubuntu xenial-security universe</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu xenial-security multiverse</span><br><span class=\"line\"># deb-src http://security.ubuntu.com/ubuntu xenial-security multiverse</span><br></pre></td></tr></table></figure></p>\n<p>下面大更新一波，安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git gcc cmake libssl-dev libtool autoconf automake clang-4.0</span><br></pre></td></tr></table></figure></p>\n<p>除了错误别找我，直接谷歌去找源<br>安装完<code>clang</code>看看位置如果不是<code>usr/bin</code><br>执行下面命令制作软链接，只为保险不是必需的。。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/bin/clang-4.0 /usr/bin/clang</span><br><span class=\"line\">sudo ln -s /usr/bin/clang++-4.0 /usr/bin/clang++</span><br></pre></td></tr></table></figure></p>\n<p>吐槽一波CentOS你更新了源也没用该没有的还是没有建议直接源码安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#下载llvm源码</span><br><span class=\"line\">wget http://llvm.org/releases/4.0.1/llvm-4.0.1.src.tar.xz</span><br><span class=\"line\">tar xf llvm-4.0.1.src.tar.xz</span><br><span class=\"line\">mv llvm-4.0.1.src llvm</span><br><span class=\"line\"></span><br><span class=\"line\">#下载clang源码</span><br><span class=\"line\">cd llvm/tools</span><br><span class=\"line\">wget http://llvm.org/releases/4.0.1/cfe-4.0.1.src.tar.xz</span><br><span class=\"line\">tar xf cfe-4.0.1.src.tar.xz</span><br><span class=\"line\">mv cfe-4.0.1.src clang</span><br><span class=\"line\">cd ../..</span><br><span class=\"line\"></span><br><span class=\"line\">#下载clang-tools-extra源码  可选</span><br><span class=\"line\">cd llvm/tools/clang/tools</span><br><span class=\"line\">wget http://llvm.org/releases/4.0.1/clang-tools-extra-4.0.1.src.tar.xz</span><br><span class=\"line\">tar xf clang-tools-extra-4.0.1.src.tar.xz</span><br><span class=\"line\">mv clang-tools-extra-4.0.1.src  extra</span><br><span class=\"line\">cd ../../../..</span><br><span class=\"line\"></span><br><span class=\"line\">#下载compiler-rt源码 可选</span><br><span class=\"line\">cd llvm/projects</span><br><span class=\"line\">wget http://llvm.org/releases/4.0.1/compiler-rt-4.0.1.src.tar.xz</span><br><span class=\"line\">tar xf compiler-rt-4.0.1.src.tar.xz</span><br><span class=\"line\">mv compiler-rt-4.0.1.src compiler-rt</span><br><span class=\"line\">cd ../..</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir llvmbuild</span><br><span class=\"line\">cd llvmbuild</span><br><span class=\"line\">#正常套路安装</span><br><span class=\"line\">#设置配置</span><br><span class=\"line\">#–prefix=directory — 设置llvm编译的安装路径(default/usr/local). </span><br><span class=\"line\">#–enable-optimized — 是否选择优化(defaultis NO)，yes是指安装一个Release版本. </span><br><span class=\"line\">#–enable-assertions — 是否断言检查(default is YES).</span><br><span class=\"line\">../llvm/configure --enable-optimized --enable-targets=host-only --prefix=/usr/bin</span><br><span class=\"line\">#构建</span><br><span class=\"line\">cmake ../llvm</span><br><span class=\"line\">make</span><br><span class=\"line\">#安装</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">#ninja套路安装</span><br><span class=\"line\">#设置配置</span><br><span class=\"line\">cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/bin -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_FFI=ON -DLLVM_BUILD_LLVM_DYLIB=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLLVM_TARGETS_TO_BUILD=&quot;host&quot; -Wno-dev ../llvm</span><br><span class=\"line\">#构建想几核自己根据配置设置</span><br><span class=\"line\">ninja -j4</span><br><span class=\"line\">#安装</span><br><span class=\"line\">ninja install</span><br></pre></td></tr></table></figure>\n<h2 id=\"Apple-Clang-安装\"><a href=\"#Apple-Clang-安装\" class=\"headerlink\" title=\"Apple Clang 安装\"></a>Apple Clang 安装</h2><p>步骤如上面CentOS源码安装Clang一样，只是把Clang地址改了下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm/tools</span><br><span class=\"line\">wget https://opensource.apple.com/tarballs/clang/clang-800.0.42.1.tar.gz</span><br><span class=\"line\">tar xf clang-800.0.42.1.tar.gz</span><br><span class=\"line\">mv clang-800.0.42.1 clang</span><br><span class=\"line\">cd ../..</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"cctools-port-制作ios-toolchain-的Clang\"><a href=\"#cctools-port-制作ios-toolchain-的Clang\" class=\"headerlink\" title=\"cctools-port 制作ios-toolchain 的Clang\"></a>cctools-port 制作ios-toolchain 的Clang</h2><h3 id=\"ios-sdk-打包\"><a href=\"#ios-sdk-打包\" class=\"headerlink\" title=\"ios sdk 打包\"></a>ios sdk 打包</h3><p>下载完Xcode直接执行下面命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SDK=$(ls -l Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs | grep &quot; -&gt; iPhoneOS.sdk&quot; | head -n1 | awk &apos;&#123;print $9&#125;&apos;)</span><br><span class=\"line\">cp -r Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk /tmp/$SDK 1&gt;/dev/null</span><br><span class=\"line\">cp -r Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1 /tmp/$SDK/usr/include/c++ 1&gt;/dev/null</span><br><span class=\"line\">pushd /tmp</span><br><span class=\"line\">tar -cvzf $SDK.tar.gz $SDK</span><br><span class=\"line\">rm -rf $SDK</span><br><span class=\"line\">mv $SDK.tar.gz ~</span><br><span class=\"line\">popd</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"制作-iOS-armv7-工具链\"><a href=\"#制作-iOS-armv7-工具链\" class=\"headerlink\" title=\"制作 iOS armv7 工具链\"></a>制作 iOS armv7 工具链</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd cctools-port</span><br><span class=\"line\">IPHONEOS_DEPLOYMENT_TARGET=5.0 usage_examples/ios_toolchain/build.sh ~/iPhoneOS10.0.sdk.tar.gz armv7</span><br></pre></td></tr></table></figure>\n<p>制作工具链成功后会提示<strong><em> all done </em></strong></p>\n<p>将生成的工具链移到 /usr/local/ 目录并更名为 ios-armv7<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv usage_examples/ios_toolchain/target /usr/local/ios-armv7</span><br></pre></td></tr></table></figure></p>\n<p>将库文件拷贝一份，放进公共库 /usr/lib<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /usr/local/ios-armv7/lib/libtapi.so /usr/lib</span><br></pre></td></tr></table></figure></p>\n<p>最后将工具链的 bin 目录加入PATH，方便调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/ios-armv7/bin</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"制作-iOS-arm64-工具链\"><a href=\"#制作-iOS-arm64-工具链\" class=\"headerlink\" title=\"制作 iOS arm64 工具链\"></a>制作 iOS arm64 工具链</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd cctools-port</span><br><span class=\"line\">IPHONEOS_DEPLOYMENT_TARGET=5.0 usage_examples/ios_toolchain/build.sh ~/iPhoneOS10.0.sdk.tar.gz arm64</span><br></pre></td></tr></table></figure>\n<p>制作工具链成功后会提示<strong><em> all done </em></strong></p>\n<p>将生成的工具链  /usr/local/ 目录并更名为 ios-arm64<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv usage_examples/ios_toolchain/target /usr/local/ios-arm64</span><br></pre></td></tr></table></figure></p>\n<p>使用 rename 命令重命名前缀以与 armv7 区分开来把 arm- 前缀改为 aarch64- 前缀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename &apos;s/arm-/aarch64-/&apos; /usr/local/ios-arm64/bin/*</span><br><span class=\"line\">sudo rm /usr/local/ios-arm64/aarch64-apple-darwin11-clang++</span><br><span class=\"line\">sudo ln -s /usr/local/ios-arm64/aarch64-apple-darwin11-clang /usr/local/ios-arm64/aarch64-apple-darwin11-clang++</span><br></pre></td></tr></table></figure></p>\n<p>将库文件拷贝一份，放进公共库 /usr/lib<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /usr/local/ios-arm64/lib/libtapi.so /usr/lib</span><br></pre></td></tr></table></figure></p>\n<p>最后将工具链的 bin 目录加入PATH，方便调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/ios-arm64/bin</span><br></pre></td></tr></table></figure></p>\n<p>其实到这基本完活了，单跑.m文件已经没问题了，下面只是为了更加方便的编译项目</p>\n<p>这里已经可以跑个测试程序编译试试了如<code>arrch-apple-darwin11-clang helloworld.c -o helloworld</code>或<code>arm-apple-darwin11-clang helloworld.c -o helloworld</code></p>\n<h3 id=\"合并-armv7-和-arm64-工具链-可选\"><a href=\"#合并-armv7-和-arm64-工具链-可选\" class=\"headerlink\" title=\"合并 armv7 和 arm64 工具链(可选)\"></a>合并 armv7 和 arm64 工具链(可选)</h3><p>一般用<code>ar</code>命令做合并不过容易出问题</p>\n<h3 id=\"替换xctoolchain\"><a href=\"#替换xctoolchain\" class=\"headerlink\" title=\"替换xctoolchain\"></a>替换xctoolchain</h3><p>把最后想要用的生成的工具链clang 和 clang++文件替换到<code>usr/bin</code>下（不替换也可以达成目的即可），相当于回头编译的时候走我们产出的这套clang环境。总之就是思路就是让<code>xcbuild</code>走我们的这套clang去打包编译程序即可。如果你用Apple Clang或直接Clang能打包编译也就不用自己手动做这个事了。</p>\n<h2 id=\"Ninja-安装\"><a href=\"#Ninja-安装\" class=\"headerlink\" title=\"Ninja 安装\"></a>Ninja 安装</h2><p>Ubuntu一行命令解决。。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install ninja-build</span><br></pre></td></tr></table></figure></p>\n<p>CentOS天坑模式开启不出意外先升级cmake<br>源码安装最新版<a href=\"https://gitlab.kitware.com/cmake/cmake.git\" target=\"_blank\" rel=\"noopener\">cmake</a>解压执行<code>./bootstrap &amp;&amp; make &amp;&amp; make install</code> 就ok了，3个命令合一。<br>然后下载ninja源码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/ninja-build/ninja.git &amp;&amp; cd ninja</span><br><span class=\"line\">git checkout release</span><br><span class=\"line\">./configure.py --bootstrap</span><br></pre></td></tr></table></figure></p>\n<p>最后把Path加一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/xxx/xxx/ninja</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"xcbuild-安装\"><a href=\"#xcbuild-安装\" class=\"headerlink\" title=\"xcbuild 安装\"></a>xcbuild 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/facebook/xcbuild</span><br><span class=\"line\">cd xcbuild</span><br><span class=\"line\">git submodule update --init</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>最后把Path加一下和DEVELOPER_DIR<br>DEVELOPER_DIR就是Xcode的目录，Xcode其实只需要有三个文件夹<code>Xcode.app/Contents/PlugIns</code>，<code>Xcode.app/Contents/Developer/Toolchains</code>,<code>Xcode.app/Contents/Developer/Platforms</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/xxx/xxx/xcbuild/build</span><br><span class=\"line\">export DEVELOPER_DIR=/xxx/xxx/Xcode.app</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>完全可以像在Mac下一样用没有任何区别，不过也就CocoaPods完全ok，xcbuild指令和xcodebuild用法完全一样直接用xcodebuild也没问题，只不过能不能编译成功就听天由命吧！坑很深，慎入！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>理论上这是一个很好的想法，但真正落实到实践，简直坑的不要不要的！笔者最终在CentOS上实在搞不动了，只在Ubuntu上弄了，关键CentOS是公司环境也不敢太造次。</p>\n<p>整个东西写出来主要是让自己记住坑太多，不是实在想不开没事干，千万不要再搞。</p>\n<p>思路来源<a href=\"https://github.com/facebook/xcbuild/issues/37\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/xcbuild/issues/37</a></p>\n<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>做这个事情起初只是因为我司不提供Mac机器来做自动打包，但又想要让我做自动打包，能提供的也只有CentOS系统，不过很快就发现打包其实完全不可能，因为证书问题很难解决，然后想着跑跑CI的test也不错才继续研究了一下。。。。毕竟我们Model都是自动生成的，git提交后跑一下CI确保能各端运行正常还是很有用的，另外版本归档打tag的时候跑一下CocoaPods把完整可执行代码构建好拉下来归档也是挺不错的！</p>\n<p>现实是恐怕就CocoaPods构建是比较稳定100%没问题，编译这个完全不敢说ok。。。所以有条件的话还是建议用有台Mac专门来干这些事，不然实在太麻烦，哪怕ssh到一台同事电脑悄悄开个账户搞都比在linux上搞靠谱！</p>\n<p>如图实现，没mac和有mac简直就是天壤之别的恶心差距！</p>\n<p><img src=\"/assets/blogImage/3994053-fad34baa2afc46ac.png\" alt=\"Untitled.png\"></p>\n<h1 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>ruby （为了支持CocoaPods）<br><a href=\"http://releases.llvm.org/download.html\" target=\"_blank\" rel=\"noopener\">clang</a> 4.0或以上（为了支持IOS10，如果你准备的sdk版本不高，那就无所谓了，关键是对应上）<br><a href=\"https://opensource.apple.com/tarballs/clang/\" target=\"_blank\" rel=\"noopener\">Apple clang</a>(用他的话妥妥的手动apt-get拯救不了你)<br><a href=\"https://github.com/tpoechtrager/cctools-port.git\" target=\"_blank\" rel=\"noopener\">cctools-port</a> 生成ios工具链（ios-toolchain）回头替换掉Xcode里的<br><a href=\"https://github.com/ninja-build/ninja.git\" target=\"_blank\" rel=\"noopener\">ninja</a><br><a href=\"https://github.com/facebook/xcbuild.git\" target=\"_blank\" rel=\"noopener\">xcbuild</a><br>Xcode（确切的说其实只要三个文件夹但我很不放心用了整个）<br>","more":"</p>\n<h2 id=\"CocoaPods-安装\"><a href=\"#CocoaPods-安装\" class=\"headerlink\" title=\"CocoaPods 安装\"></a>CocoaPods 安装</h2><p>这里不得不提CocoaPods兼容性真心不错<br>CentOS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install ruby</span><br><span class=\"line\">sudo gem install cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>Ubuntu<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ruby</span><br><span class=\"line\">sudo gem install cocoapods</span><br></pre></td></tr></table></figure></p>\n<p>就是如此简单！已经时可用状态了！</p>\n<h2 id=\"Clang-安装\"><a href=\"#Clang-安装\" class=\"headerlink\" title=\"Clang 安装\"></a>Clang 安装</h2><p>接下来就不细说CentOS了应为基本上大部分库都是要源码安装。。。<br>首先<code>clang --version</code>看看版本是不是自己想要，多半都不是然后直接删了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get autoremove clang</span><br></pre></td></tr></table></figure></p>\n<p>然后搞一下软件源<code>/etc/apt/sources.list</code>不然各种依赖包各种找不到让你爽歪歪<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#deb cdrom:[Ubuntu 16.04.2 LTS _Xenial Xerus_ - Release amd64 (20170215.2)]/ xenial main restricted</span><br><span class=\"line\"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span><br><span class=\"line\"># newer versions of the distribution.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class=\"line\">## Major bug fix updates produced after the final release of the</span><br><span class=\"line\">## distribution.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span><br><span class=\"line\">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><br><span class=\"line\">## team. Also, please note that software in universe WILL NOT receive any</span><br><span class=\"line\">## review or updates from the Ubuntu security team.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial universe</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial universe</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe</span><br><span class=\"line\">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu </span><br><span class=\"line\">## team, and may not be under a free licence. Please satisfy yourself as to </span><br><span class=\"line\">## your rights to use the software. Also, please note that software in </span><br><span class=\"line\">## multiverse WILL NOT receive any review or updates from the Ubuntu</span><br><span class=\"line\">## security team.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial multiverse</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial multiverse</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span><br><span class=\"line\">## N.B. software from this repository may not have been tested as</span><br><span class=\"line\">## extensively as that contained in the main release, although it includes</span><br><span class=\"line\">## newer versions of some applications which may provide useful features.</span><br><span class=\"line\">## Also, please note that software in backports WILL NOT receive any review</span><br><span class=\"line\">## or updates from the Ubuntu security team.</span><br><span class=\"line\">deb http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">## Uncomment the following two lines to add software from Canonical&apos;s</span><br><span class=\"line\">## &apos;partner&apos; repository.</span><br><span class=\"line\">## This software is not part of Ubuntu, but is offered by Canonical and the</span><br><span class=\"line\">## respective vendors as a service to Ubuntu users.</span><br><span class=\"line\"># deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\"># deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu xenial-security main restricted</span><br><span class=\"line\"># deb-src http://security.ubuntu.com/ubuntu xenial-security main restricted</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu xenial-security universe</span><br><span class=\"line\"># deb-src http://security.ubuntu.com/ubuntu xenial-security universe</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu xenial-security multiverse</span><br><span class=\"line\"># deb-src http://security.ubuntu.com/ubuntu xenial-security multiverse</span><br></pre></td></tr></table></figure></p>\n<p>下面大更新一波，安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git gcc cmake libssl-dev libtool autoconf automake clang-4.0</span><br></pre></td></tr></table></figure></p>\n<p>除了错误别找我，直接谷歌去找源<br>安装完<code>clang</code>看看位置如果不是<code>usr/bin</code><br>执行下面命令制作软链接，只为保险不是必需的。。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/bin/clang-4.0 /usr/bin/clang</span><br><span class=\"line\">sudo ln -s /usr/bin/clang++-4.0 /usr/bin/clang++</span><br></pre></td></tr></table></figure></p>\n<p>吐槽一波CentOS你更新了源也没用该没有的还是没有建议直接源码安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#下载llvm源码</span><br><span class=\"line\">wget http://llvm.org/releases/4.0.1/llvm-4.0.1.src.tar.xz</span><br><span class=\"line\">tar xf llvm-4.0.1.src.tar.xz</span><br><span class=\"line\">mv llvm-4.0.1.src llvm</span><br><span class=\"line\"></span><br><span class=\"line\">#下载clang源码</span><br><span class=\"line\">cd llvm/tools</span><br><span class=\"line\">wget http://llvm.org/releases/4.0.1/cfe-4.0.1.src.tar.xz</span><br><span class=\"line\">tar xf cfe-4.0.1.src.tar.xz</span><br><span class=\"line\">mv cfe-4.0.1.src clang</span><br><span class=\"line\">cd ../..</span><br><span class=\"line\"></span><br><span class=\"line\">#下载clang-tools-extra源码  可选</span><br><span class=\"line\">cd llvm/tools/clang/tools</span><br><span class=\"line\">wget http://llvm.org/releases/4.0.1/clang-tools-extra-4.0.1.src.tar.xz</span><br><span class=\"line\">tar xf clang-tools-extra-4.0.1.src.tar.xz</span><br><span class=\"line\">mv clang-tools-extra-4.0.1.src  extra</span><br><span class=\"line\">cd ../../../..</span><br><span class=\"line\"></span><br><span class=\"line\">#下载compiler-rt源码 可选</span><br><span class=\"line\">cd llvm/projects</span><br><span class=\"line\">wget http://llvm.org/releases/4.0.1/compiler-rt-4.0.1.src.tar.xz</span><br><span class=\"line\">tar xf compiler-rt-4.0.1.src.tar.xz</span><br><span class=\"line\">mv compiler-rt-4.0.1.src compiler-rt</span><br><span class=\"line\">cd ../..</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir llvmbuild</span><br><span class=\"line\">cd llvmbuild</span><br><span class=\"line\">#正常套路安装</span><br><span class=\"line\">#设置配置</span><br><span class=\"line\">#–prefix=directory — 设置llvm编译的安装路径(default/usr/local). </span><br><span class=\"line\">#–enable-optimized — 是否选择优化(defaultis NO)，yes是指安装一个Release版本. </span><br><span class=\"line\">#–enable-assertions — 是否断言检查(default is YES).</span><br><span class=\"line\">../llvm/configure --enable-optimized --enable-targets=host-only --prefix=/usr/bin</span><br><span class=\"line\">#构建</span><br><span class=\"line\">cmake ../llvm</span><br><span class=\"line\">make</span><br><span class=\"line\">#安装</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">#ninja套路安装</span><br><span class=\"line\">#设置配置</span><br><span class=\"line\">cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/bin -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_FFI=ON -DLLVM_BUILD_LLVM_DYLIB=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLLVM_TARGETS_TO_BUILD=&quot;host&quot; -Wno-dev ../llvm</span><br><span class=\"line\">#构建想几核自己根据配置设置</span><br><span class=\"line\">ninja -j4</span><br><span class=\"line\">#安装</span><br><span class=\"line\">ninja install</span><br></pre></td></tr></table></figure>\n<h2 id=\"Apple-Clang-安装\"><a href=\"#Apple-Clang-安装\" class=\"headerlink\" title=\"Apple Clang 安装\"></a>Apple Clang 安装</h2><p>步骤如上面CentOS源码安装Clang一样，只是把Clang地址改了下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd llvm/tools</span><br><span class=\"line\">wget https://opensource.apple.com/tarballs/clang/clang-800.0.42.1.tar.gz</span><br><span class=\"line\">tar xf clang-800.0.42.1.tar.gz</span><br><span class=\"line\">mv clang-800.0.42.1 clang</span><br><span class=\"line\">cd ../..</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"cctools-port-制作ios-toolchain-的Clang\"><a href=\"#cctools-port-制作ios-toolchain-的Clang\" class=\"headerlink\" title=\"cctools-port 制作ios-toolchain 的Clang\"></a>cctools-port 制作ios-toolchain 的Clang</h2><h3 id=\"ios-sdk-打包\"><a href=\"#ios-sdk-打包\" class=\"headerlink\" title=\"ios sdk 打包\"></a>ios sdk 打包</h3><p>下载完Xcode直接执行下面命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SDK=$(ls -l Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs | grep &quot; -&gt; iPhoneOS.sdk&quot; | head -n1 | awk &apos;&#123;print $9&#125;&apos;)</span><br><span class=\"line\">cp -r Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk /tmp/$SDK 1&gt;/dev/null</span><br><span class=\"line\">cp -r Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1 /tmp/$SDK/usr/include/c++ 1&gt;/dev/null</span><br><span class=\"line\">pushd /tmp</span><br><span class=\"line\">tar -cvzf $SDK.tar.gz $SDK</span><br><span class=\"line\">rm -rf $SDK</span><br><span class=\"line\">mv $SDK.tar.gz ~</span><br><span class=\"line\">popd</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"制作-iOS-armv7-工具链\"><a href=\"#制作-iOS-armv7-工具链\" class=\"headerlink\" title=\"制作 iOS armv7 工具链\"></a>制作 iOS armv7 工具链</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd cctools-port</span><br><span class=\"line\">IPHONEOS_DEPLOYMENT_TARGET=5.0 usage_examples/ios_toolchain/build.sh ~/iPhoneOS10.0.sdk.tar.gz armv7</span><br></pre></td></tr></table></figure>\n<p>制作工具链成功后会提示<strong><em> all done </em></strong></p>\n<p>将生成的工具链移到 /usr/local/ 目录并更名为 ios-armv7<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv usage_examples/ios_toolchain/target /usr/local/ios-armv7</span><br></pre></td></tr></table></figure></p>\n<p>将库文件拷贝一份，放进公共库 /usr/lib<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /usr/local/ios-armv7/lib/libtapi.so /usr/lib</span><br></pre></td></tr></table></figure></p>\n<p>最后将工具链的 bin 目录加入PATH，方便调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/ios-armv7/bin</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"制作-iOS-arm64-工具链\"><a href=\"#制作-iOS-arm64-工具链\" class=\"headerlink\" title=\"制作 iOS arm64 工具链\"></a>制作 iOS arm64 工具链</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd cctools-port</span><br><span class=\"line\">IPHONEOS_DEPLOYMENT_TARGET=5.0 usage_examples/ios_toolchain/build.sh ~/iPhoneOS10.0.sdk.tar.gz arm64</span><br></pre></td></tr></table></figure>\n<p>制作工具链成功后会提示<strong><em> all done </em></strong></p>\n<p>将生成的工具链  /usr/local/ 目录并更名为 ios-arm64<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv usage_examples/ios_toolchain/target /usr/local/ios-arm64</span><br></pre></td></tr></table></figure></p>\n<p>使用 rename 命令重命名前缀以与 armv7 区分开来把 arm- 前缀改为 aarch64- 前缀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename &apos;s/arm-/aarch64-/&apos; /usr/local/ios-arm64/bin/*</span><br><span class=\"line\">sudo rm /usr/local/ios-arm64/aarch64-apple-darwin11-clang++</span><br><span class=\"line\">sudo ln -s /usr/local/ios-arm64/aarch64-apple-darwin11-clang /usr/local/ios-arm64/aarch64-apple-darwin11-clang++</span><br></pre></td></tr></table></figure></p>\n<p>将库文件拷贝一份，放进公共库 /usr/lib<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /usr/local/ios-arm64/lib/libtapi.so /usr/lib</span><br></pre></td></tr></table></figure></p>\n<p>最后将工具链的 bin 目录加入PATH，方便调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/ios-arm64/bin</span><br></pre></td></tr></table></figure></p>\n<p>其实到这基本完活了，单跑.m文件已经没问题了，下面只是为了更加方便的编译项目</p>\n<p>这里已经可以跑个测试程序编译试试了如<code>arrch-apple-darwin11-clang helloworld.c -o helloworld</code>或<code>arm-apple-darwin11-clang helloworld.c -o helloworld</code></p>\n<h3 id=\"合并-armv7-和-arm64-工具链-可选\"><a href=\"#合并-armv7-和-arm64-工具链-可选\" class=\"headerlink\" title=\"合并 armv7 和 arm64 工具链(可选)\"></a>合并 armv7 和 arm64 工具链(可选)</h3><p>一般用<code>ar</code>命令做合并不过容易出问题</p>\n<h3 id=\"替换xctoolchain\"><a href=\"#替换xctoolchain\" class=\"headerlink\" title=\"替换xctoolchain\"></a>替换xctoolchain</h3><p>把最后想要用的生成的工具链clang 和 clang++文件替换到<code>usr/bin</code>下（不替换也可以达成目的即可），相当于回头编译的时候走我们产出的这套clang环境。总之就是思路就是让<code>xcbuild</code>走我们的这套clang去打包编译程序即可。如果你用Apple Clang或直接Clang能打包编译也就不用自己手动做这个事了。</p>\n<h2 id=\"Ninja-安装\"><a href=\"#Ninja-安装\" class=\"headerlink\" title=\"Ninja 安装\"></a>Ninja 安装</h2><p>Ubuntu一行命令解决。。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install ninja-build</span><br></pre></td></tr></table></figure></p>\n<p>CentOS天坑模式开启不出意外先升级cmake<br>源码安装最新版<a href=\"https://gitlab.kitware.com/cmake/cmake.git\" target=\"_blank\" rel=\"noopener\">cmake</a>解压执行<code>./bootstrap &amp;&amp; make &amp;&amp; make install</code> 就ok了，3个命令合一。<br>然后下载ninja源码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/ninja-build/ninja.git &amp;&amp; cd ninja</span><br><span class=\"line\">git checkout release</span><br><span class=\"line\">./configure.py --bootstrap</span><br></pre></td></tr></table></figure></p>\n<p>最后把Path加一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/xxx/xxx/ninja</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"xcbuild-安装\"><a href=\"#xcbuild-安装\" class=\"headerlink\" title=\"xcbuild 安装\"></a>xcbuild 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/facebook/xcbuild</span><br><span class=\"line\">cd xcbuild</span><br><span class=\"line\">git submodule update --init</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>最后把Path加一下和DEVELOPER_DIR<br>DEVELOPER_DIR就是Xcode的目录，Xcode其实只需要有三个文件夹<code>Xcode.app/Contents/PlugIns</code>，<code>Xcode.app/Contents/Developer/Toolchains</code>,<code>Xcode.app/Contents/Developer/Platforms</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/xxx/xxx/xcbuild/build</span><br><span class=\"line\">export DEVELOPER_DIR=/xxx/xxx/Xcode.app</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>完全可以像在Mac下一样用没有任何区别，不过也就CocoaPods完全ok，xcbuild指令和xcodebuild用法完全一样直接用xcodebuild也没问题，只不过能不能编译成功就听天由命吧！坑很深，慎入！</p>"},{"title":"Mesh组网与智能路由器系统","date":"2021-12-05T17:09:05.000Z","typora-root-url":"../","_content":"\n# Mesh路由系统\n\n这里首先记录下当时调研的一些路由器系统，这方面的资料再网上比较少。\n\n开源的智能路由系统其实挺多不少这个后面再说，比较偏向专业Mesh组网的智能路由系统比较少下面就列一下我了解到的几个还不错的。\n\n![image.png](/assets/blogImage/83356518.png)\n\n1.libremesh\n\nhttp://libremesh.org/\n支持各种漫游协议，各种连接方法，固件支持常见路由，但7620系统无线有bug，mini系统有简易配置页面，全系统可设置更改全面协议，理论上只要设备足，覆盖一个城都没有问题，而且最牛逼的是持续更新开发者都很活跃，参与人较多，文档较全，而且有每月互动email可以演习。我们当时户外版就是采用的这个系统，这倒是跟区块链很配绝对去中心，而且是完全自治独立于现有互联网的平行网络。\n\n<!-- more -->\n\n2.qMp,quik mesh project \n\nhttp://qmp.cat/Home\n基本属于傻瓜式设置，只需要配置一下无线频道及无线属性就能连接，信息页面较少，无法全面了解连接情况，固件支持常见路由，test版本基本向libremesh靠拢，但似乎和老版本不兼容。\n\n3.openwisp\nhttp://openwisp.org/\n这个看名字就能看出是干什么的，基于olsr协议，固件支持ramips、ar71xx以及x86，固件支持8M以上，太大了。\n\n4.gluon\n\n https://github.com/freifunk-gluon/gluon\n\n这个是我在github上推荐看见的也是个主攻mesh的智能路由系统，而且里面还提供了MeshVPN,而且也是一直有更新，看样子很厉害由于是后来发现的所以没深入了解，但看起来这算是一个不错的新选择，再有空搞Mesh相关的肯定会首选这个。\n\n# [OpenWRT](https://github.com/openwrt/openwrt)\n\nOpenWRT不同于其他许多用于路由器的发行版，它是一个从零开始编写的、功能齐全的、容易修改的路由器操作系统。实际上，这意味着您能够使用您想要的功能而不加进其他的累赘，而支持这些功能工作的linux kernel又远比绝大多数发行版来得新。\n\nOpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。 其多达3000多种软件包，囊括从工具链(toolchain)，到内核(linux kernel)，到软件包(packages)，再到根文件系统(rootfs)整个体系，使得用户只需简单的一个make命令即可方便快速地定制一个具有特定功能的嵌入式系统来制作固件。\n一般嵌入式 Linux 的开发过程, 无论是 ARM, PowerPC 或 MIPS 的处理器, 都必需经过以下的开发过程：\n\n1. 创建 Linux 交叉编译环境；\n2. 建立 Bootloader；\n3. 移植 Linux 内核；\n4. 建立 Rootfs (根文件系统)；\n5. 安装驱动程序；\n6. 安装软件；\n\n熟悉这些嵌入式 Linux 的基本开发流程后，不再局限于 MIPS 处理器和无线路由器, 可以尝试在其它处理器, 或者非无线路由器的系统移植嵌入式 Linux, 定制合适自己的应用软件, 并建立一个完整的嵌入式产品。\n\n现在还把各种分支版本吸收了进去可以说智能路由器系统的大成之作。\n\n### Mesh组网\n\nOpenWRT上提供了多种Mesh组网的方式，官网介绍了非常详细的三种，主要有[OLSR](https://openwrt.org/docs/guide-user/network/wifi/mesh/olsr)，[batman-adv](https://openwrt.org/docs/guide-user/network/wifi/mesh/batman)，[802.11s](https://openwrt.org/docs/guide-user/network/wifi/mesh/80211s)，除了这三种还有[BMX6](https://github.com/bmx-routing/bmx6)，[BMX7](https://github.com/bmx-routing/bmx7)也是比较有名好用的。到这里算是比较常见的组网方式，并且适配也比较广泛，还是开头提到的系统的前身，但不能在互联网中远程与其他设备Mesh组网。\n\n### 异地组网\n\n首先有要看看有没有真实IP，没有的话要先解决透传问题。[frp](https://github.com/fatedier/frp)是个不错的选择，配合[OpenVPN](https://github.com/OpenVPN/openvpn)可以比较简单的实现异地组网，但这种组网很明显有着一个弊端就是中心化，首先是frp依赖着1台拥有公网真实IP的机器要部署frp server在上面，使用者则要部署frp client，其次OpenVPN也是要分OpenVPN server和client。简单的说就是这个方案缺少Mesh的特性。\n\n后来也就是最近本来找了人投了钱我们想结合区块链做一个这种带有异地Mesh组网功能的系统，怎奈币圈大涨投资人觉得项目再好也不让买币好久就行了资金，在这就简单说一下这项目对标的就是filecoin，frp server通过区块链记录配置信息，用二层网络从链上同步可用的frp配置到client上，至于OpenVPN我们则设计了MeshVPN,有点[peervpn](https://github.com/peervpn/peervpn)的意思，而VPN的配置信息也是二层网络从链上同步，配置上就可以加入对应的网络中，这样就实现了异地Mesh组网，而提供服务的人也都能自然而然的收到奖励，相当于挖矿但这种矿机要比传统没有任何实际贡献的矿机有意义的多，它促使Mesh网络的部署。\n\n\n\n\n\n","source":"_posts/Mesh组网与智能路由器系统.md","raw":"---\ntitle: Mesh组网与智能路由器系统\ndate: 2021-12-06 01:09:05\ntags:\n    - Mesh组网\n    - 异地组网\n    - OpenWRT\n    - Libremesh\n    - batman\n    - bmx\n    - OpenVPN\n    - frp\ntypora-root-url: ../\n---\n\n# Mesh路由系统\n\n这里首先记录下当时调研的一些路由器系统，这方面的资料再网上比较少。\n\n开源的智能路由系统其实挺多不少这个后面再说，比较偏向专业Mesh组网的智能路由系统比较少下面就列一下我了解到的几个还不错的。\n\n![image.png](/assets/blogImage/83356518.png)\n\n1.libremesh\n\nhttp://libremesh.org/\n支持各种漫游协议，各种连接方法，固件支持常见路由，但7620系统无线有bug，mini系统有简易配置页面，全系统可设置更改全面协议，理论上只要设备足，覆盖一个城都没有问题，而且最牛逼的是持续更新开发者都很活跃，参与人较多，文档较全，而且有每月互动email可以演习。我们当时户外版就是采用的这个系统，这倒是跟区块链很配绝对去中心，而且是完全自治独立于现有互联网的平行网络。\n\n<!-- more -->\n\n2.qMp,quik mesh project \n\nhttp://qmp.cat/Home\n基本属于傻瓜式设置，只需要配置一下无线频道及无线属性就能连接，信息页面较少，无法全面了解连接情况，固件支持常见路由，test版本基本向libremesh靠拢，但似乎和老版本不兼容。\n\n3.openwisp\nhttp://openwisp.org/\n这个看名字就能看出是干什么的，基于olsr协议，固件支持ramips、ar71xx以及x86，固件支持8M以上，太大了。\n\n4.gluon\n\n https://github.com/freifunk-gluon/gluon\n\n这个是我在github上推荐看见的也是个主攻mesh的智能路由系统，而且里面还提供了MeshVPN,而且也是一直有更新，看样子很厉害由于是后来发现的所以没深入了解，但看起来这算是一个不错的新选择，再有空搞Mesh相关的肯定会首选这个。\n\n# [OpenWRT](https://github.com/openwrt/openwrt)\n\nOpenWRT不同于其他许多用于路由器的发行版，它是一个从零开始编写的、功能齐全的、容易修改的路由器操作系统。实际上，这意味着您能够使用您想要的功能而不加进其他的累赘，而支持这些功能工作的linux kernel又远比绝大多数发行版来得新。\n\nOpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。 其多达3000多种软件包，囊括从工具链(toolchain)，到内核(linux kernel)，到软件包(packages)，再到根文件系统(rootfs)整个体系，使得用户只需简单的一个make命令即可方便快速地定制一个具有特定功能的嵌入式系统来制作固件。\n一般嵌入式 Linux 的开发过程, 无论是 ARM, PowerPC 或 MIPS 的处理器, 都必需经过以下的开发过程：\n\n1. 创建 Linux 交叉编译环境；\n2. 建立 Bootloader；\n3. 移植 Linux 内核；\n4. 建立 Rootfs (根文件系统)；\n5. 安装驱动程序；\n6. 安装软件；\n\n熟悉这些嵌入式 Linux 的基本开发流程后，不再局限于 MIPS 处理器和无线路由器, 可以尝试在其它处理器, 或者非无线路由器的系统移植嵌入式 Linux, 定制合适自己的应用软件, 并建立一个完整的嵌入式产品。\n\n现在还把各种分支版本吸收了进去可以说智能路由器系统的大成之作。\n\n### Mesh组网\n\nOpenWRT上提供了多种Mesh组网的方式，官网介绍了非常详细的三种，主要有[OLSR](https://openwrt.org/docs/guide-user/network/wifi/mesh/olsr)，[batman-adv](https://openwrt.org/docs/guide-user/network/wifi/mesh/batman)，[802.11s](https://openwrt.org/docs/guide-user/network/wifi/mesh/80211s)，除了这三种还有[BMX6](https://github.com/bmx-routing/bmx6)，[BMX7](https://github.com/bmx-routing/bmx7)也是比较有名好用的。到这里算是比较常见的组网方式，并且适配也比较广泛，还是开头提到的系统的前身，但不能在互联网中远程与其他设备Mesh组网。\n\n### 异地组网\n\n首先有要看看有没有真实IP，没有的话要先解决透传问题。[frp](https://github.com/fatedier/frp)是个不错的选择，配合[OpenVPN](https://github.com/OpenVPN/openvpn)可以比较简单的实现异地组网，但这种组网很明显有着一个弊端就是中心化，首先是frp依赖着1台拥有公网真实IP的机器要部署frp server在上面，使用者则要部署frp client，其次OpenVPN也是要分OpenVPN server和client。简单的说就是这个方案缺少Mesh的特性。\n\n后来也就是最近本来找了人投了钱我们想结合区块链做一个这种带有异地Mesh组网功能的系统，怎奈币圈大涨投资人觉得项目再好也不让买币好久就行了资金，在这就简单说一下这项目对标的就是filecoin，frp server通过区块链记录配置信息，用二层网络从链上同步可用的frp配置到client上，至于OpenVPN我们则设计了MeshVPN,有点[peervpn](https://github.com/peervpn/peervpn)的意思，而VPN的配置信息也是二层网络从链上同步，配置上就可以加入对应的网络中，这样就实现了异地Mesh组网，而提供服务的人也都能自然而然的收到奖励，相当于挖矿但这种矿机要比传统没有任何实际贡献的矿机有意义的多，它促使Mesh网络的部署。\n\n\n\n\n\n","slug":"Mesh组网与智能路由器系统","published":1,"updated":"2021-12-07T17:52:57.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqw000hnhs6uajvcixi","content":"<h1 id=\"Mesh路由系统\"><a href=\"#Mesh路由系统\" class=\"headerlink\" title=\"Mesh路由系统\"></a>Mesh路由系统</h1><p>这里首先记录下当时调研的一些路由器系统，这方面的资料再网上比较少。</p>\n<p>开源的智能路由系统其实挺多不少这个后面再说，比较偏向专业Mesh组网的智能路由系统比较少下面就列一下我了解到的几个还不错的。</p>\n<p><img src=\"/assets/blogImage/83356518.png\" alt=\"image.png\"></p>\n<p>1.libremesh</p>\n<p><a href=\"http://libremesh.org/\" target=\"_blank\" rel=\"noopener\">http://libremesh.org/</a><br>支持各种漫游协议，各种连接方法，固件支持常见路由，但7620系统无线有bug，mini系统有简易配置页面，全系统可设置更改全面协议，理论上只要设备足，覆盖一个城都没有问题，而且最牛逼的是持续更新开发者都很活跃，参与人较多，文档较全，而且有每月互动email可以演习。我们当时户外版就是采用的这个系统，这倒是跟区块链很配绝对去中心，而且是完全自治独立于现有互联网的平行网络。</p>\n<a id=\"more\"></a>\n<p>2.qMp,quik mesh project </p>\n<p><a href=\"http://qmp.cat/Home\" target=\"_blank\" rel=\"noopener\">http://qmp.cat/Home</a><br>基本属于傻瓜式设置，只需要配置一下无线频道及无线属性就能连接，信息页面较少，无法全面了解连接情况，固件支持常见路由，test版本基本向libremesh靠拢，但似乎和老版本不兼容。</p>\n<p>3.openwisp<br><a href=\"http://openwisp.org/\" target=\"_blank\" rel=\"noopener\">http://openwisp.org/</a><br>这个看名字就能看出是干什么的，基于olsr协议，固件支持ramips、ar71xx以及x86，固件支持8M以上，太大了。</p>\n<p>4.gluon</p>\n<p> <a href=\"https://github.com/freifunk-gluon/gluon\" target=\"_blank\" rel=\"noopener\">https://github.com/freifunk-gluon/gluon</a></p>\n<p>这个是我在github上推荐看见的也是个主攻mesh的智能路由系统，而且里面还提供了MeshVPN,而且也是一直有更新，看样子很厉害由于是后来发现的所以没深入了解，但看起来这算是一个不错的新选择，再有空搞Mesh相关的肯定会首选这个。</p>\n<h1 id=\"OpenWRT\"><a href=\"#OpenWRT\" class=\"headerlink\" title=\"OpenWRT\"></a><a href=\"https://github.com/openwrt/openwrt\" target=\"_blank\" rel=\"noopener\">OpenWRT</a></h1><p>OpenWRT不同于其他许多用于路由器的发行版，它是一个从零开始编写的、功能齐全的、容易修改的路由器操作系统。实际上，这意味着您能够使用您想要的功能而不加进其他的累赘，而支持这些功能工作的linux kernel又远比绝大多数发行版来得新。</p>\n<p>OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。 其多达3000多种软件包，囊括从工具链(toolchain)，到内核(linux kernel)，到软件包(packages)，再到根文件系统(rootfs)整个体系，使得用户只需简单的一个make命令即可方便快速地定制一个具有特定功能的嵌入式系统来制作固件。<br>一般嵌入式 Linux 的开发过程, 无论是 ARM, PowerPC 或 MIPS 的处理器, 都必需经过以下的开发过程：</p>\n<ol>\n<li>创建 Linux 交叉编译环境；</li>\n<li>建立 Bootloader；</li>\n<li>移植 Linux 内核；</li>\n<li>建立 Rootfs (根文件系统)；</li>\n<li>安装驱动程序；</li>\n<li>安装软件；</li>\n</ol>\n<p>熟悉这些嵌入式 Linux 的基本开发流程后，不再局限于 MIPS 处理器和无线路由器, 可以尝试在其它处理器, 或者非无线路由器的系统移植嵌入式 Linux, 定制合适自己的应用软件, 并建立一个完整的嵌入式产品。</p>\n<p>现在还把各种分支版本吸收了进去可以说智能路由器系统的大成之作。</p>\n<h3 id=\"Mesh组网\"><a href=\"#Mesh组网\" class=\"headerlink\" title=\"Mesh组网\"></a>Mesh组网</h3><p>OpenWRT上提供了多种Mesh组网的方式，官网介绍了非常详细的三种，主要有<a href=\"https://openwrt.org/docs/guide-user/network/wifi/mesh/olsr\" target=\"_blank\" rel=\"noopener\">OLSR</a>，<a href=\"https://openwrt.org/docs/guide-user/network/wifi/mesh/batman\" target=\"_blank\" rel=\"noopener\">batman-adv</a>，<a href=\"https://openwrt.org/docs/guide-user/network/wifi/mesh/80211s\" target=\"_blank\" rel=\"noopener\">802.11s</a>，除了这三种还有<a href=\"https://github.com/bmx-routing/bmx6\" target=\"_blank\" rel=\"noopener\">BMX6</a>，<a href=\"https://github.com/bmx-routing/bmx7\" target=\"_blank\" rel=\"noopener\">BMX7</a>也是比较有名好用的。到这里算是比较常见的组网方式，并且适配也比较广泛，还是开头提到的系统的前身，但不能在互联网中远程与其他设备Mesh组网。</p>\n<h3 id=\"异地组网\"><a href=\"#异地组网\" class=\"headerlink\" title=\"异地组网\"></a>异地组网</h3><p>首先有要看看有没有真实IP，没有的话要先解决透传问题。<a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"noopener\">frp</a>是个不错的选择，配合<a href=\"https://github.com/OpenVPN/openvpn\" target=\"_blank\" rel=\"noopener\">OpenVPN</a>可以比较简单的实现异地组网，但这种组网很明显有着一个弊端就是中心化，首先是frp依赖着1台拥有公网真实IP的机器要部署frp server在上面，使用者则要部署frp client，其次OpenVPN也是要分OpenVPN server和client。简单的说就是这个方案缺少Mesh的特性。</p>\n<p>后来也就是最近本来找了人投了钱我们想结合区块链做一个这种带有异地Mesh组网功能的系统，怎奈币圈大涨投资人觉得项目再好也不让买币好久就行了资金，在这就简单说一下这项目对标的就是filecoin，frp server通过区块链记录配置信息，用二层网络从链上同步可用的frp配置到client上，至于OpenVPN我们则设计了MeshVPN,有点<a href=\"https://github.com/peervpn/peervpn\" target=\"_blank\" rel=\"noopener\">peervpn</a>的意思，而VPN的配置信息也是二层网络从链上同步，配置上就可以加入对应的网络中，这样就实现了异地Mesh组网，而提供服务的人也都能自然而然的收到奖励，相当于挖矿但这种矿机要比传统没有任何实际贡献的矿机有意义的多，它促使Mesh网络的部署。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Mesh路由系统\"><a href=\"#Mesh路由系统\" class=\"headerlink\" title=\"Mesh路由系统\"></a>Mesh路由系统</h1><p>这里首先记录下当时调研的一些路由器系统，这方面的资料再网上比较少。</p>\n<p>开源的智能路由系统其实挺多不少这个后面再说，比较偏向专业Mesh组网的智能路由系统比较少下面就列一下我了解到的几个还不错的。</p>\n<p><img src=\"/assets/blogImage/83356518.png\" alt=\"image.png\"></p>\n<p>1.libremesh</p>\n<p><a href=\"http://libremesh.org/\" target=\"_blank\" rel=\"noopener\">http://libremesh.org/</a><br>支持各种漫游协议，各种连接方法，固件支持常见路由，但7620系统无线有bug，mini系统有简易配置页面，全系统可设置更改全面协议，理论上只要设备足，覆盖一个城都没有问题，而且最牛逼的是持续更新开发者都很活跃，参与人较多，文档较全，而且有每月互动email可以演习。我们当时户外版就是采用的这个系统，这倒是跟区块链很配绝对去中心，而且是完全自治独立于现有互联网的平行网络。</p>","more":"<p>2.qMp,quik mesh project </p>\n<p><a href=\"http://qmp.cat/Home\" target=\"_blank\" rel=\"noopener\">http://qmp.cat/Home</a><br>基本属于傻瓜式设置，只需要配置一下无线频道及无线属性就能连接，信息页面较少，无法全面了解连接情况，固件支持常见路由，test版本基本向libremesh靠拢，但似乎和老版本不兼容。</p>\n<p>3.openwisp<br><a href=\"http://openwisp.org/\" target=\"_blank\" rel=\"noopener\">http://openwisp.org/</a><br>这个看名字就能看出是干什么的，基于olsr协议，固件支持ramips、ar71xx以及x86，固件支持8M以上，太大了。</p>\n<p>4.gluon</p>\n<p> <a href=\"https://github.com/freifunk-gluon/gluon\" target=\"_blank\" rel=\"noopener\">https://github.com/freifunk-gluon/gluon</a></p>\n<p>这个是我在github上推荐看见的也是个主攻mesh的智能路由系统，而且里面还提供了MeshVPN,而且也是一直有更新，看样子很厉害由于是后来发现的所以没深入了解，但看起来这算是一个不错的新选择，再有空搞Mesh相关的肯定会首选这个。</p>\n<h1 id=\"OpenWRT\"><a href=\"#OpenWRT\" class=\"headerlink\" title=\"OpenWRT\"></a><a href=\"https://github.com/openwrt/openwrt\" target=\"_blank\" rel=\"noopener\">OpenWRT</a></h1><p>OpenWRT不同于其他许多用于路由器的发行版，它是一个从零开始编写的、功能齐全的、容易修改的路由器操作系统。实际上，这意味着您能够使用您想要的功能而不加进其他的累赘，而支持这些功能工作的linux kernel又远比绝大多数发行版来得新。</p>\n<p>OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。 其多达3000多种软件包，囊括从工具链(toolchain)，到内核(linux kernel)，到软件包(packages)，再到根文件系统(rootfs)整个体系，使得用户只需简单的一个make命令即可方便快速地定制一个具有特定功能的嵌入式系统来制作固件。<br>一般嵌入式 Linux 的开发过程, 无论是 ARM, PowerPC 或 MIPS 的处理器, 都必需经过以下的开发过程：</p>\n<ol>\n<li>创建 Linux 交叉编译环境；</li>\n<li>建立 Bootloader；</li>\n<li>移植 Linux 内核；</li>\n<li>建立 Rootfs (根文件系统)；</li>\n<li>安装驱动程序；</li>\n<li>安装软件；</li>\n</ol>\n<p>熟悉这些嵌入式 Linux 的基本开发流程后，不再局限于 MIPS 处理器和无线路由器, 可以尝试在其它处理器, 或者非无线路由器的系统移植嵌入式 Linux, 定制合适自己的应用软件, 并建立一个完整的嵌入式产品。</p>\n<p>现在还把各种分支版本吸收了进去可以说智能路由器系统的大成之作。</p>\n<h3 id=\"Mesh组网\"><a href=\"#Mesh组网\" class=\"headerlink\" title=\"Mesh组网\"></a>Mesh组网</h3><p>OpenWRT上提供了多种Mesh组网的方式，官网介绍了非常详细的三种，主要有<a href=\"https://openwrt.org/docs/guide-user/network/wifi/mesh/olsr\" target=\"_blank\" rel=\"noopener\">OLSR</a>，<a href=\"https://openwrt.org/docs/guide-user/network/wifi/mesh/batman\" target=\"_blank\" rel=\"noopener\">batman-adv</a>，<a href=\"https://openwrt.org/docs/guide-user/network/wifi/mesh/80211s\" target=\"_blank\" rel=\"noopener\">802.11s</a>，除了这三种还有<a href=\"https://github.com/bmx-routing/bmx6\" target=\"_blank\" rel=\"noopener\">BMX6</a>，<a href=\"https://github.com/bmx-routing/bmx7\" target=\"_blank\" rel=\"noopener\">BMX7</a>也是比较有名好用的。到这里算是比较常见的组网方式，并且适配也比较广泛，还是开头提到的系统的前身，但不能在互联网中远程与其他设备Mesh组网。</p>\n<h3 id=\"异地组网\"><a href=\"#异地组网\" class=\"headerlink\" title=\"异地组网\"></a>异地组网</h3><p>首先有要看看有没有真实IP，没有的话要先解决透传问题。<a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"noopener\">frp</a>是个不错的选择，配合<a href=\"https://github.com/OpenVPN/openvpn\" target=\"_blank\" rel=\"noopener\">OpenVPN</a>可以比较简单的实现异地组网，但这种组网很明显有着一个弊端就是中心化，首先是frp依赖着1台拥有公网真实IP的机器要部署frp server在上面，使用者则要部署frp client，其次OpenVPN也是要分OpenVPN server和client。简单的说就是这个方案缺少Mesh的特性。</p>\n<p>后来也就是最近本来找了人投了钱我们想结合区块链做一个这种带有异地Mesh组网功能的系统，怎奈币圈大涨投资人觉得项目再好也不让买币好久就行了资金，在这就简单说一下这项目对标的就是filecoin，frp server通过区块链记录配置信息，用二层网络从链上同步可用的frp配置到client上，至于OpenVPN我们则设计了MeshVPN,有点<a href=\"https://github.com/peervpn/peervpn\" target=\"_blank\" rel=\"noopener\">peervpn</a>的意思，而VPN的配置信息也是二层网络从链上同步，配置上就可以加入对应的网络中，这样就实现了异地Mesh组网，而提供服务的人也都能自然而然的收到奖励，相当于挖矿但这种矿机要比传统没有任何实际贡献的矿机有意义的多，它促使Mesh网络的部署。</p>"},{"title":"IOS组件化与工程管理","date":"2017-02-04T18:09:05.000Z","_content":"\n谈及组件化其实网上也有不少文章了，但我个人认为不结合工程管理去单讲组件化恐怕很难让人理解概念，而去实践的时候也只是照猫画虎。\n# 工程管理\n组件化的实现很重要的一个组成部分应该是工程拆分，这里我的方案是采取git管理项目pod管理依赖很常见很普通的方法。\n理想的状态每一个模块都是独立的，可以单独拿出来测试，发布，也就是每一个子模块其实都是一个git仓库，这里紧接着就是子仓库和主项目的关系问题，上边说到了git和pod，还有一个submodule我喜欢用这个来做子仓库的管理上边为啥没提它呢？\n因为submodule本身就是git自带的就是git的一部分，常用命令有\n``` \n# 添加子仓库\ngit submodule add 仓库地址 路径\n#初始化所有子仓库\ngit submodule init\n# 更新子仓库\ngit submodule update\n\n# 也可以初始化更新一起\ngit submodule update --init\n```\n\npod只是帮我把依赖关系理清直接本地pod，因为坑爹的开发阶段难免有互相block的情况，那边东西弄完了，但还没有做发布还不稳定，但另一边已经急着要看一眼整体调用的效果了。。。\n当然这时候也可以让对面先打个beta的tag，那样可想而知最后会有多少没用的tag，另一方面就是bug联调恢复节点排查的时候，另一方估计只有一个方案就是回滚上一个tag中间哪的问题一点点打tag联调。\n上边说的打tag也只是个例子，当然你可以改Podfile对应不同branch，但那也是要每次调都要改一下的，但我这种模式由于是本地pod所以podfile不用动了每次都去指向对应的项目，剩下的就是对子仓库随意切换branch甚至commit节点都可以，调ok了直接commit一下submodule指向的更改即可。然后另一方更新一下再pod update把依赖关系重新建立一下（如果没有添加或删除，甚至这步都不需要，本地pod引用目录我们submodule的本地文件夹里面有什么变化这边自动会变，添加删除是因为依赖关系发生变化了所以跟着需要重新建立）,当然理想情况回头有空单独整合一套submodule和pod的命令，submodule更新时判断有增删操作执行pod update其他情况不处理。\n\n这里紧接着就是公共库的处理以及怎么去建立主仓库与子仓库的依赖，我这里把基本思路给出，具体情况还是自己再改动，这里首先就是建立podspec来提供依赖建立\n```\nPod::Spec.new do |s|\ns.name                  = 'MainWorkSpaceDemo'\ns.version               = '1.0.0'\ns.summary               = 'A new container controller to slide  '\ns.homepage              = 'github.com'\ns.license               = { :type => 'MIT', :file => 'README.md' }\ns.author                = { 'heroims' => 'heroims@163.com' }\ns.source                = { :git => '', :tag => \"#{s.version}\" }\ns.platform              = :ios, '5.0'\ns.source_files          = 'ZYQRouter/*.{h,m}'\ns.requires_arc          = true\n#公共仓库\ns.subspec 'BaseTool' do |ss|\nss.source_files = 'ZYQRouter/*.{h,m}'\nend\n#模块1\ns.subspec 'Module1' do |sss|\nsss.source_files = 'Module1/Module1Lib/*.{h,m}'\nend\n#模块2\ns.subspec 'Module2' do |ssss|\nssss.source_files = 'Module2/Module2Lib/*.{h,m}'\nend\n\nend\n```\n看见上边相比就明白了把，开发的时候最好要作为模块给人的东西放在一个目录下，当然不放也可以，这里就是为了方便\n然后就是引用了,下面是module1工程的，只引用了一个公共库，真正开发的时候则会引用很多，然后build测试模块的app给测试，提供给主仓库的东西放在事先约定的目录下，其他的随便看心情，反正对别人没影响就是自己爽不爽\n```\ntarget 'Module1' do\n# Uncomment the next line if you're using Swift or would like to use dynamic frameworks\n# use_frameworks!\n\n# Pods for Module1\npod 'MainWorkSpaceDemo/BaseTool', :path => '../MainWorkSpaceDemo.podspec'\n\ntarget 'Module1Tests' do\ninherit! :search_paths\n# Pods for testing\nend\n\ntarget 'Module1UITests' do\ninherit! :search_paths\n# Pods for testing\nend\n\nend\n```\n<!-- more -->\n就此基本的项目依赖思路构建就算讲完了，剩下的就是调用了，其实上边的东西你掌握好了，组件化就已经可以单用这种工程管理模式解决了\n下面的就是大家能经常搜到的一些组件化的东西，在我看来剩下的只是锦上添花，工程管理好组件化才有真正意义。从开发的角度上不论开发什么用什么语言，组件化或者说模块化通用思路就是分离多个仓库然后自动化建立依赖关系，项目工程里互相调用适当的用反射的方法实现调用，基本上每一个小仓库就都能独立的运行了。\n顺便放一下我的ZYQRouter：https://github.com/heroims/ZYQRouter\n里面的demo虽然没用submodule但基本可以阐述完整这套东西。\n正式开始讲代码里的架构，ZYQRouter主要是方便各个模块之间的互相调用。之所以重复造轮子，其实只是自己项目需要，另外就是想完善这套组件化的实现。\n这里ZYQRouter分为页面路由和方法路由，页面路由负责根据URL做各页面跳转甚至远程调度方法路由，方法路由则是提供target-action实例方法调用和invokeSelectorObjects反射调用静态方法，目的就是让各个模块开发过程中不引用对方的情况下也可独立按约定调用对方模块运行调试自己的相关内容，大家都开发完各个单元测试ok，集成到主项目里就可以基本跑通，当然现实是联调还是会通常出些小问题，但没什么大碍。\n# 页面路由\n关于页面路由如下，用过蘑菇街Router的看这个会很亲切，我只是在它的基础上添加了重定向这个功能，这重定向的由来一个是动态更新页面跳转逻辑方便，另一个就是我们自己的需求客服系统里。。。。你会发现一个订单链接地址由客服发来，网页上用这链接用户打开的就是网页自己订单，客服打开就是客服系统该用户的订单，app上用户打开就是用户订单页面，于是救星就是重定向，把xxx.xxx.xxx/crm-order/orderid和xxx.xxx.xxx/order/orderid都重定向到applink://order/orderid，还有就是订单有大改动的时候\n则是xxx.xxx.xxx/crm-order/orderid和applink://order/orderid重定向到xxx.xxx.xxx/order/orderid直接开网页用户订单，还有很多奇葩需求全靠重定向这救命稻草，所以这个重定向真的很实用。\n\n顺便再说下注册的事，因为我的Router里提供了target-action的调用所以上面说的远程调度target-action可以用一个url如applink://target-action/:target/:action?xxx=xxx完成，只用注册applink://target-action/:target/:action内部调用target-action方法。\n而让所有部门全依照这一个逻辑规则产出链接简直天方夜谭，前端放在网页上的链接按这样估计一堆人吐槽，但仅仅ios部门之间按照这一规则跑还是可以的。\n但当然有比较折中的方法，毕竟注册太多url也占地啊，这时候神奇的重定向就又可以上线救援了，如xxx.xxx.xxx/order?xxx=xxx这类直接重定向xxx.xxx.xxx/order到applink://target-action/ordertarget/orderaction这就好了，你注册的就可以少点但前提是你的target-action里处理的情况多。\n另外写页面路由最好根据模块单独创建相应的类，比如Module1里可以单独的建个Module1PageFactory，有个方法-(void)openModule1VC1WithO1:(id)o1 o2:(id)o2 o3:(id)o3类似方法然后+(void)load里注册Router调用open的方法，这样开发阶段用方法路由，而在需要从外部进入时采用页面路由方式也就是URL方式\n\n\n```Objective-C\n/**\n重定向 URLPattern 到对应的 newURLPattern \n@param URLPattern 原scheme\n@param newURLPattern 新scheme\n*/\n+ (void)redirectURLPattern:(NSString *)URLPattern toURLPattern:(NSString*)newURLPattern;\n\n/**\n*  注册 URLPattern 对应的 Handler，在 handler 中可以初始化 VC，然后对 VC 做各种操作\n*\n*  @param URLPattern 带上 scheme，如 applink://beauty/:id\n*  @param handler    该 block 会传一个字典，包含了注册的 URL 中对应的变量。\n*                    假如注册的 URL 为 applink://beauty/:id 那么，就会传一个 @{@\"id\": 4} 这样的字典过来\n*/\n+ (void)registerURLPattern:(NSString *)URLPattern toHandler:(ZYQRouterHandler)handler;\n\n/**\n*  注册 URLPattern 对应的 ObjectHandler，需要返回一个 object 给调用方\n*\n*  @param URLPattern 带上 scheme，如 applink://beauty/:id\n*  @param handler    该 block 会传一个字典，包含了注册的 URL 中对应的变量。\n*                    假如注册的 URL 为 applink://beauty/:id 那么，就会传一个 @{@\"id\": 4} 这样的字典过来\n*                    自带的 key 为 @\"url\" 和 @\"completion\" (如果有的话)\n*/\n+ (void)registerURLPattern:(NSString *)URLPattern toObjectHandler:(ZYQRouterObjectHandler)handler;\n\n/**\n*  取消注册某个 URL Pattern\n*\n*  @param URLPattern\n*/\n+ (void)deregisterURLPattern:(NSString *)URLPattern;\n\n/**\n*  打开此 URL\n*  会在已注册的 URL -> Handler 中寻找，如果找到，则执行 Handler\n*\n*  @param URL 带 Scheme，如 applink://beauty/3\n*/\n+ (void)openURL:(NSString *)URL;\n\n/**\n*  打开此 URL，同时当操作完成时，执行额外的代码\n*\n*  @param URL        带 Scheme 的 URL，如 applink://beauty/4\n*  @param completion URL 处理完成后的 callback，完成的判定跟具体的业务相关\n*/\n+ (void)openURL:(NSString *)URL completion:(void (^)(id result))completion;\n\n/**\n*  打开此 URL，带上附加信息，同时当操作完成时，执行额外的代码\n*\n*  @param URL        带 Scheme 的 URL，如 applink://beauty/4\n*  @param parameters 附加参数\n*  @param completion URL 处理完成后的 callback，完成的判定跟具体的业务相关\n*/\n+ (void)openURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo completion:(void (^)(id result))completion;\n\n/**\n* 查找谁对某个 URL 感兴趣，如果有的话，返回一个 object\n*\n*  @param URL\n*/\n+ (id)objectForURL:(NSString *)URL;\n\n/**\n* 查找谁对某个 URL 感兴趣，如果有的话，返回一个 object\n*\n*  @param URL\n*  @param userInfo\n*/\n+ (id)objectForURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo;\n\n/**\n*  是否可以打开URL\n*\n*  @param URL\n*\n*  @return\n*/\n+ (BOOL)canOpenURL:(NSString *)URL;\n\n/**\n*  调用此方法来拼接 urlpattern 和 parameters\n*\n*  #define ROUTE_BEAUTY @\"beauty/:id\"\n*  [ZYQRouter generateURLWithPattern:ROUTE_BEAUTY, @[@13]];\n*\n*\n*  @param pattern    url pattern 比如 @\"beauty/:id\"\n*  @param parameters 一个数组，数量要跟 pattern 里的变量一致\n*\n*  @return\n*/\n+ (NSString *)generateURLWithPattern:(NSString *)pattern parameters:(NSArray *)parameters;\n```\n\n# 方法路由\n关于方法路由如下,target-action模式就是自动根据class来alloc init初始化完target对象，然后@selector把那action方法调用了返回，而静态方法则是runtime搞定，日常需求基本满足，但还有点缺陷注释里已说明，由于invokeSelectorObjects根据className和selectorName调用静态方法所以封装成了C方法，另外就是这个不常用算是尝试。\n```Objective-C\n/**\n*\n*  调度工程内的组件方法\n*  [ZYQRouter performTarget:@\"xxxClass\" action:@\"xxxxActionWithObj1:obj2:obj3\" objects:obj1,obj2,obj3,nil]\n*  内部自动 alloc init 初始化对象\n*\n*  @param targetName    执行方法的类\n*  @param actionName    方法名\n*  @param object1,... 不定参数 不支持C基本类型\n*\n*  @return 方法回参\n*/\n+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName objects:(id)object1,...;\n\n/**\n*\n*  调度工程内的组件方法\n*  [ZYQRouter performTarget:@\"xxxClass\" action:@\"xxxxActionWithObj1:obj2:obj3\" shouldCacheTaget:YES objects:obj1,obj2,obj3,nil]\n*  内部自动 alloc init 初始化对象\n*\n*  @param targetName    执行方法的类\n*  @param actionName    方法名\n*  @param shouldCacheTaget   设置target缓存\n*  @param object1,... 不定参数 不支持C基本类型\n*\n*  @return 方法回参\n*/\n+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName shouldCacheTaget:(BOOL)shouldCacheTaget objects:(id)object1,...;\n\n/**\n*\n*  调度工程内的组件方法\n*  [ZYQRouter performTarget:@\"xxxClass\" action:@\"xxxxActionWithObj1:obj2:obj3\" shouldCacheTaget:YES objects:obj1,obj2,obj3,nil]\n*  内部自动 alloc init 初始化对象\n*\n*  @param targetName    执行方法的类\n*  @param actionName    方法名\n*  @param shouldCacheTaget   设置target缓存\n*  @param objectsArr   参数数组 不支持C基本类型\n*\n*  @return 方法回参\n*/\n+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName shouldCacheTaget:(BOOL)shouldCacheTaget objectsArr:(NSArray*)objectsArr;\n\n/**\n*\n*  添加未找到Target 或 Action 逻辑\n*\n*  @param notFoundHandler    未找到方法回调\n*  @param targetName    类名\n*\n*  @return\n*/\n+ (void)addNotFoundHandler:(ZYQNotFoundTargetActionHandler)notFoundHandler targetName:(NSString*)targetName;\n\n/**\n*  删除Target缓存\n*\n*  @return\n*/\n+ (void)removeTargetsCacheWithTargetName:(NSString*)targetName;\n+ (void)removeTargetsCacheWithTargetNames:(NSArray*)targetNames;\n+ (void)removeAllTargetsCache;\n\n/**\n不定参静态方法调用 （最多支持7个，原因不定参方法传给不定参方法实在没啥好办法。。。。暂时如此）\nid result=(__bridge id)zyq_invokeSelectorObjects(@\"Class\", @\"actionWithObj1:obj2:obj3\",obj1,obj2,obj3,nil);\n\nc类型转换配合__bridge_transfer __bridge\n利用IMP返回值只是指针，不支持C基本类型\n\n@param className 类名\n@param selectorName,... 方法名，不定参数\n@return 返回值\n*/\nvoid * zyq_invokeSelectorObjects(NSString *className,NSString* selectorName,...);\n```\n最后就是页面路由和方法路由遇到找不到的处理方案了，主要思路就是不crash、好判断，页面路由就判断一下是网页的就跳转url不是就报个提示算了，方法路由return nil吧。。这里仁者见仁智者见智，反正可以自己定制，差不多就讲到这吧。\n\n# 事件链路由\n``` Objective-C\n/**\n响应链传递路由\n\n用于解决多级嵌套UI对象的上级事件响应，省去delegate protocol逐级传递，跨级传递\n\n@param eventName 事件名\n@param userInfo 扩展信息\n*/\n-(void)zyq_routerEventWithName:(NSString *)eventName userInfo:(id)userInfo;\n```\n这个主要解决多层级UI对象嵌套的时候，事件传递繁琐，通过Event完成对事件定义，一级级传递到响应者的过程在开发中就可以省略了。\n只需要如下使用的时候在发起和接受地方写好处理即可！\n\n``` Objective-C\n//调用\n[self.nextResponder zyq_routerEventWithName:eventName userInfo:userInfo];\n\n//承接\n- (void)zyq_routerEventWithName:(NSString *)eventName userInfo:(NSDictionary *)userInfo {\n//判断eventName做出对应逻辑\n}\n```\n","source":"_posts/IOS组件化与工程管理.md","raw":"---\ntitle: IOS组件化与工程管理\ndate: 2017-02-05 02:09:05\ntags:\n    - IOS\n    - 组件化\n    - 工程管理\n    - 架构设计\n---\n\n谈及组件化其实网上也有不少文章了，但我个人认为不结合工程管理去单讲组件化恐怕很难让人理解概念，而去实践的时候也只是照猫画虎。\n# 工程管理\n组件化的实现很重要的一个组成部分应该是工程拆分，这里我的方案是采取git管理项目pod管理依赖很常见很普通的方法。\n理想的状态每一个模块都是独立的，可以单独拿出来测试，发布，也就是每一个子模块其实都是一个git仓库，这里紧接着就是子仓库和主项目的关系问题，上边说到了git和pod，还有一个submodule我喜欢用这个来做子仓库的管理上边为啥没提它呢？\n因为submodule本身就是git自带的就是git的一部分，常用命令有\n``` \n# 添加子仓库\ngit submodule add 仓库地址 路径\n#初始化所有子仓库\ngit submodule init\n# 更新子仓库\ngit submodule update\n\n# 也可以初始化更新一起\ngit submodule update --init\n```\n\npod只是帮我把依赖关系理清直接本地pod，因为坑爹的开发阶段难免有互相block的情况，那边东西弄完了，但还没有做发布还不稳定，但另一边已经急着要看一眼整体调用的效果了。。。\n当然这时候也可以让对面先打个beta的tag，那样可想而知最后会有多少没用的tag，另一方面就是bug联调恢复节点排查的时候，另一方估计只有一个方案就是回滚上一个tag中间哪的问题一点点打tag联调。\n上边说的打tag也只是个例子，当然你可以改Podfile对应不同branch，但那也是要每次调都要改一下的，但我这种模式由于是本地pod所以podfile不用动了每次都去指向对应的项目，剩下的就是对子仓库随意切换branch甚至commit节点都可以，调ok了直接commit一下submodule指向的更改即可。然后另一方更新一下再pod update把依赖关系重新建立一下（如果没有添加或删除，甚至这步都不需要，本地pod引用目录我们submodule的本地文件夹里面有什么变化这边自动会变，添加删除是因为依赖关系发生变化了所以跟着需要重新建立）,当然理想情况回头有空单独整合一套submodule和pod的命令，submodule更新时判断有增删操作执行pod update其他情况不处理。\n\n这里紧接着就是公共库的处理以及怎么去建立主仓库与子仓库的依赖，我这里把基本思路给出，具体情况还是自己再改动，这里首先就是建立podspec来提供依赖建立\n```\nPod::Spec.new do |s|\ns.name                  = 'MainWorkSpaceDemo'\ns.version               = '1.0.0'\ns.summary               = 'A new container controller to slide  '\ns.homepage              = 'github.com'\ns.license               = { :type => 'MIT', :file => 'README.md' }\ns.author                = { 'heroims' => 'heroims@163.com' }\ns.source                = { :git => '', :tag => \"#{s.version}\" }\ns.platform              = :ios, '5.0'\ns.source_files          = 'ZYQRouter/*.{h,m}'\ns.requires_arc          = true\n#公共仓库\ns.subspec 'BaseTool' do |ss|\nss.source_files = 'ZYQRouter/*.{h,m}'\nend\n#模块1\ns.subspec 'Module1' do |sss|\nsss.source_files = 'Module1/Module1Lib/*.{h,m}'\nend\n#模块2\ns.subspec 'Module2' do |ssss|\nssss.source_files = 'Module2/Module2Lib/*.{h,m}'\nend\n\nend\n```\n看见上边相比就明白了把，开发的时候最好要作为模块给人的东西放在一个目录下，当然不放也可以，这里就是为了方便\n然后就是引用了,下面是module1工程的，只引用了一个公共库，真正开发的时候则会引用很多，然后build测试模块的app给测试，提供给主仓库的东西放在事先约定的目录下，其他的随便看心情，反正对别人没影响就是自己爽不爽\n```\ntarget 'Module1' do\n# Uncomment the next line if you're using Swift or would like to use dynamic frameworks\n# use_frameworks!\n\n# Pods for Module1\npod 'MainWorkSpaceDemo/BaseTool', :path => '../MainWorkSpaceDemo.podspec'\n\ntarget 'Module1Tests' do\ninherit! :search_paths\n# Pods for testing\nend\n\ntarget 'Module1UITests' do\ninherit! :search_paths\n# Pods for testing\nend\n\nend\n```\n<!-- more -->\n就此基本的项目依赖思路构建就算讲完了，剩下的就是调用了，其实上边的东西你掌握好了，组件化就已经可以单用这种工程管理模式解决了\n下面的就是大家能经常搜到的一些组件化的东西，在我看来剩下的只是锦上添花，工程管理好组件化才有真正意义。从开发的角度上不论开发什么用什么语言，组件化或者说模块化通用思路就是分离多个仓库然后自动化建立依赖关系，项目工程里互相调用适当的用反射的方法实现调用，基本上每一个小仓库就都能独立的运行了。\n顺便放一下我的ZYQRouter：https://github.com/heroims/ZYQRouter\n里面的demo虽然没用submodule但基本可以阐述完整这套东西。\n正式开始讲代码里的架构，ZYQRouter主要是方便各个模块之间的互相调用。之所以重复造轮子，其实只是自己项目需要，另外就是想完善这套组件化的实现。\n这里ZYQRouter分为页面路由和方法路由，页面路由负责根据URL做各页面跳转甚至远程调度方法路由，方法路由则是提供target-action实例方法调用和invokeSelectorObjects反射调用静态方法，目的就是让各个模块开发过程中不引用对方的情况下也可独立按约定调用对方模块运行调试自己的相关内容，大家都开发完各个单元测试ok，集成到主项目里就可以基本跑通，当然现实是联调还是会通常出些小问题，但没什么大碍。\n# 页面路由\n关于页面路由如下，用过蘑菇街Router的看这个会很亲切，我只是在它的基础上添加了重定向这个功能，这重定向的由来一个是动态更新页面跳转逻辑方便，另一个就是我们自己的需求客服系统里。。。。你会发现一个订单链接地址由客服发来，网页上用这链接用户打开的就是网页自己订单，客服打开就是客服系统该用户的订单，app上用户打开就是用户订单页面，于是救星就是重定向，把xxx.xxx.xxx/crm-order/orderid和xxx.xxx.xxx/order/orderid都重定向到applink://order/orderid，还有就是订单有大改动的时候\n则是xxx.xxx.xxx/crm-order/orderid和applink://order/orderid重定向到xxx.xxx.xxx/order/orderid直接开网页用户订单，还有很多奇葩需求全靠重定向这救命稻草，所以这个重定向真的很实用。\n\n顺便再说下注册的事，因为我的Router里提供了target-action的调用所以上面说的远程调度target-action可以用一个url如applink://target-action/:target/:action?xxx=xxx完成，只用注册applink://target-action/:target/:action内部调用target-action方法。\n而让所有部门全依照这一个逻辑规则产出链接简直天方夜谭，前端放在网页上的链接按这样估计一堆人吐槽，但仅仅ios部门之间按照这一规则跑还是可以的。\n但当然有比较折中的方法，毕竟注册太多url也占地啊，这时候神奇的重定向就又可以上线救援了，如xxx.xxx.xxx/order?xxx=xxx这类直接重定向xxx.xxx.xxx/order到applink://target-action/ordertarget/orderaction这就好了，你注册的就可以少点但前提是你的target-action里处理的情况多。\n另外写页面路由最好根据模块单独创建相应的类，比如Module1里可以单独的建个Module1PageFactory，有个方法-(void)openModule1VC1WithO1:(id)o1 o2:(id)o2 o3:(id)o3类似方法然后+(void)load里注册Router调用open的方法，这样开发阶段用方法路由，而在需要从外部进入时采用页面路由方式也就是URL方式\n\n\n```Objective-C\n/**\n重定向 URLPattern 到对应的 newURLPattern \n@param URLPattern 原scheme\n@param newURLPattern 新scheme\n*/\n+ (void)redirectURLPattern:(NSString *)URLPattern toURLPattern:(NSString*)newURLPattern;\n\n/**\n*  注册 URLPattern 对应的 Handler，在 handler 中可以初始化 VC，然后对 VC 做各种操作\n*\n*  @param URLPattern 带上 scheme，如 applink://beauty/:id\n*  @param handler    该 block 会传一个字典，包含了注册的 URL 中对应的变量。\n*                    假如注册的 URL 为 applink://beauty/:id 那么，就会传一个 @{@\"id\": 4} 这样的字典过来\n*/\n+ (void)registerURLPattern:(NSString *)URLPattern toHandler:(ZYQRouterHandler)handler;\n\n/**\n*  注册 URLPattern 对应的 ObjectHandler，需要返回一个 object 给调用方\n*\n*  @param URLPattern 带上 scheme，如 applink://beauty/:id\n*  @param handler    该 block 会传一个字典，包含了注册的 URL 中对应的变量。\n*                    假如注册的 URL 为 applink://beauty/:id 那么，就会传一个 @{@\"id\": 4} 这样的字典过来\n*                    自带的 key 为 @\"url\" 和 @\"completion\" (如果有的话)\n*/\n+ (void)registerURLPattern:(NSString *)URLPattern toObjectHandler:(ZYQRouterObjectHandler)handler;\n\n/**\n*  取消注册某个 URL Pattern\n*\n*  @param URLPattern\n*/\n+ (void)deregisterURLPattern:(NSString *)URLPattern;\n\n/**\n*  打开此 URL\n*  会在已注册的 URL -> Handler 中寻找，如果找到，则执行 Handler\n*\n*  @param URL 带 Scheme，如 applink://beauty/3\n*/\n+ (void)openURL:(NSString *)URL;\n\n/**\n*  打开此 URL，同时当操作完成时，执行额外的代码\n*\n*  @param URL        带 Scheme 的 URL，如 applink://beauty/4\n*  @param completion URL 处理完成后的 callback，完成的判定跟具体的业务相关\n*/\n+ (void)openURL:(NSString *)URL completion:(void (^)(id result))completion;\n\n/**\n*  打开此 URL，带上附加信息，同时当操作完成时，执行额外的代码\n*\n*  @param URL        带 Scheme 的 URL，如 applink://beauty/4\n*  @param parameters 附加参数\n*  @param completion URL 处理完成后的 callback，完成的判定跟具体的业务相关\n*/\n+ (void)openURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo completion:(void (^)(id result))completion;\n\n/**\n* 查找谁对某个 URL 感兴趣，如果有的话，返回一个 object\n*\n*  @param URL\n*/\n+ (id)objectForURL:(NSString *)URL;\n\n/**\n* 查找谁对某个 URL 感兴趣，如果有的话，返回一个 object\n*\n*  @param URL\n*  @param userInfo\n*/\n+ (id)objectForURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo;\n\n/**\n*  是否可以打开URL\n*\n*  @param URL\n*\n*  @return\n*/\n+ (BOOL)canOpenURL:(NSString *)URL;\n\n/**\n*  调用此方法来拼接 urlpattern 和 parameters\n*\n*  #define ROUTE_BEAUTY @\"beauty/:id\"\n*  [ZYQRouter generateURLWithPattern:ROUTE_BEAUTY, @[@13]];\n*\n*\n*  @param pattern    url pattern 比如 @\"beauty/:id\"\n*  @param parameters 一个数组，数量要跟 pattern 里的变量一致\n*\n*  @return\n*/\n+ (NSString *)generateURLWithPattern:(NSString *)pattern parameters:(NSArray *)parameters;\n```\n\n# 方法路由\n关于方法路由如下,target-action模式就是自动根据class来alloc init初始化完target对象，然后@selector把那action方法调用了返回，而静态方法则是runtime搞定，日常需求基本满足，但还有点缺陷注释里已说明，由于invokeSelectorObjects根据className和selectorName调用静态方法所以封装成了C方法，另外就是这个不常用算是尝试。\n```Objective-C\n/**\n*\n*  调度工程内的组件方法\n*  [ZYQRouter performTarget:@\"xxxClass\" action:@\"xxxxActionWithObj1:obj2:obj3\" objects:obj1,obj2,obj3,nil]\n*  内部自动 alloc init 初始化对象\n*\n*  @param targetName    执行方法的类\n*  @param actionName    方法名\n*  @param object1,... 不定参数 不支持C基本类型\n*\n*  @return 方法回参\n*/\n+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName objects:(id)object1,...;\n\n/**\n*\n*  调度工程内的组件方法\n*  [ZYQRouter performTarget:@\"xxxClass\" action:@\"xxxxActionWithObj1:obj2:obj3\" shouldCacheTaget:YES objects:obj1,obj2,obj3,nil]\n*  内部自动 alloc init 初始化对象\n*\n*  @param targetName    执行方法的类\n*  @param actionName    方法名\n*  @param shouldCacheTaget   设置target缓存\n*  @param object1,... 不定参数 不支持C基本类型\n*\n*  @return 方法回参\n*/\n+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName shouldCacheTaget:(BOOL)shouldCacheTaget objects:(id)object1,...;\n\n/**\n*\n*  调度工程内的组件方法\n*  [ZYQRouter performTarget:@\"xxxClass\" action:@\"xxxxActionWithObj1:obj2:obj3\" shouldCacheTaget:YES objects:obj1,obj2,obj3,nil]\n*  内部自动 alloc init 初始化对象\n*\n*  @param targetName    执行方法的类\n*  @param actionName    方法名\n*  @param shouldCacheTaget   设置target缓存\n*  @param objectsArr   参数数组 不支持C基本类型\n*\n*  @return 方法回参\n*/\n+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName shouldCacheTaget:(BOOL)shouldCacheTaget objectsArr:(NSArray*)objectsArr;\n\n/**\n*\n*  添加未找到Target 或 Action 逻辑\n*\n*  @param notFoundHandler    未找到方法回调\n*  @param targetName    类名\n*\n*  @return\n*/\n+ (void)addNotFoundHandler:(ZYQNotFoundTargetActionHandler)notFoundHandler targetName:(NSString*)targetName;\n\n/**\n*  删除Target缓存\n*\n*  @return\n*/\n+ (void)removeTargetsCacheWithTargetName:(NSString*)targetName;\n+ (void)removeTargetsCacheWithTargetNames:(NSArray*)targetNames;\n+ (void)removeAllTargetsCache;\n\n/**\n不定参静态方法调用 （最多支持7个，原因不定参方法传给不定参方法实在没啥好办法。。。。暂时如此）\nid result=(__bridge id)zyq_invokeSelectorObjects(@\"Class\", @\"actionWithObj1:obj2:obj3\",obj1,obj2,obj3,nil);\n\nc类型转换配合__bridge_transfer __bridge\n利用IMP返回值只是指针，不支持C基本类型\n\n@param className 类名\n@param selectorName,... 方法名，不定参数\n@return 返回值\n*/\nvoid * zyq_invokeSelectorObjects(NSString *className,NSString* selectorName,...);\n```\n最后就是页面路由和方法路由遇到找不到的处理方案了，主要思路就是不crash、好判断，页面路由就判断一下是网页的就跳转url不是就报个提示算了，方法路由return nil吧。。这里仁者见仁智者见智，反正可以自己定制，差不多就讲到这吧。\n\n# 事件链路由\n``` Objective-C\n/**\n响应链传递路由\n\n用于解决多级嵌套UI对象的上级事件响应，省去delegate protocol逐级传递，跨级传递\n\n@param eventName 事件名\n@param userInfo 扩展信息\n*/\n-(void)zyq_routerEventWithName:(NSString *)eventName userInfo:(id)userInfo;\n```\n这个主要解决多层级UI对象嵌套的时候，事件传递繁琐，通过Event完成对事件定义，一级级传递到响应者的过程在开发中就可以省略了。\n只需要如下使用的时候在发起和接受地方写好处理即可！\n\n``` Objective-C\n//调用\n[self.nextResponder zyq_routerEventWithName:eventName userInfo:userInfo];\n\n//承接\n- (void)zyq_routerEventWithName:(NSString *)eventName userInfo:(NSDictionary *)userInfo {\n//判断eventName做出对应逻辑\n}\n```\n","slug":"IOS组件化与工程管理","published":1,"updated":"2021-07-08T09:20:31.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqx000inhs6ksee95e5","content":"<p>谈及组件化其实网上也有不少文章了，但我个人认为不结合工程管理去单讲组件化恐怕很难让人理解概念，而去实践的时候也只是照猫画虎。</p>\n<h1 id=\"工程管理\"><a href=\"#工程管理\" class=\"headerlink\" title=\"工程管理\"></a>工程管理</h1><p>组件化的实现很重要的一个组成部分应该是工程拆分，这里我的方案是采取git管理项目pod管理依赖很常见很普通的方法。<br>理想的状态每一个模块都是独立的，可以单独拿出来测试，发布，也就是每一个子模块其实都是一个git仓库，这里紧接着就是子仓库和主项目的关系问题，上边说到了git和pod，还有一个submodule我喜欢用这个来做子仓库的管理上边为啥没提它呢？<br>因为submodule本身就是git自带的就是git的一部分，常用命令有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加子仓库</span><br><span class=\"line\">git submodule add 仓库地址 路径</span><br><span class=\"line\">#初始化所有子仓库</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\"># 更新子仓库</span><br><span class=\"line\">git submodule update</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以初始化更新一起</span><br><span class=\"line\">git submodule update --init</span><br></pre></td></tr></table></figure></p>\n<p>pod只是帮我把依赖关系理清直接本地pod，因为坑爹的开发阶段难免有互相block的情况，那边东西弄完了，但还没有做发布还不稳定，但另一边已经急着要看一眼整体调用的效果了。。。<br>当然这时候也可以让对面先打个beta的tag，那样可想而知最后会有多少没用的tag，另一方面就是bug联调恢复节点排查的时候，另一方估计只有一个方案就是回滚上一个tag中间哪的问题一点点打tag联调。<br>上边说的打tag也只是个例子，当然你可以改Podfile对应不同branch，但那也是要每次调都要改一下的，但我这种模式由于是本地pod所以podfile不用动了每次都去指向对应的项目，剩下的就是对子仓库随意切换branch甚至commit节点都可以，调ok了直接commit一下submodule指向的更改即可。然后另一方更新一下再pod update把依赖关系重新建立一下（如果没有添加或删除，甚至这步都不需要，本地pod引用目录我们submodule的本地文件夹里面有什么变化这边自动会变，添加删除是因为依赖关系发生变化了所以跟着需要重新建立）,当然理想情况回头有空单独整合一套submodule和pod的命令，submodule更新时判断有增删操作执行pod update其他情况不处理。</p>\n<p>这里紧接着就是公共库的处理以及怎么去建立主仓库与子仓库的依赖，我这里把基本思路给出，具体情况还是自己再改动，这里首先就是建立podspec来提供依赖建立<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new do |s|</span><br><span class=\"line\">s.name                  = &apos;MainWorkSpaceDemo&apos;</span><br><span class=\"line\">s.version               = &apos;1.0.0&apos;</span><br><span class=\"line\">s.summary               = &apos;A new container controller to slide  &apos;</span><br><span class=\"line\">s.homepage              = &apos;github.com&apos;</span><br><span class=\"line\">s.license               = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;README.md&apos; &#125;</span><br><span class=\"line\">s.author                = &#123; &apos;heroims&apos; =&gt; &apos;heroims@163.com&apos; &#125;</span><br><span class=\"line\">s.source                = &#123; :git =&gt; &apos;&apos;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class=\"line\">s.platform              = :ios, &apos;5.0&apos;</span><br><span class=\"line\">s.source_files          = &apos;ZYQRouter/*.&#123;h,m&#125;&apos;</span><br><span class=\"line\">s.requires_arc          = true</span><br><span class=\"line\">#公共仓库</span><br><span class=\"line\">s.subspec &apos;BaseTool&apos; do |ss|</span><br><span class=\"line\">ss.source_files = &apos;ZYQRouter/*.&#123;h,m&#125;&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">#模块1</span><br><span class=\"line\">s.subspec &apos;Module1&apos; do |sss|</span><br><span class=\"line\">sss.source_files = &apos;Module1/Module1Lib/*.&#123;h,m&#125;&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">#模块2</span><br><span class=\"line\">s.subspec &apos;Module2&apos; do |ssss|</span><br><span class=\"line\">ssss.source_files = &apos;Module2/Module2Lib/*.&#123;h,m&#125;&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>看见上边相比就明白了把，开发的时候最好要作为模块给人的东西放在一个目录下，当然不放也可以，这里就是为了方便<br>然后就是引用了,下面是module1工程的，只引用了一个公共库，真正开发的时候则会引用很多，然后build测试模块的app给测试，提供给主仓库的东西放在事先约定的目录下，其他的随便看心情，反正对别人没影响就是自己爽不爽<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target &apos;Module1&apos; do</span><br><span class=\"line\"># Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks</span><br><span class=\"line\"># use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\"># Pods for Module1</span><br><span class=\"line\">pod &apos;MainWorkSpaceDemo/BaseTool&apos;, :path =&gt; &apos;../MainWorkSpaceDemo.podspec&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">target &apos;Module1Tests&apos; do</span><br><span class=\"line\">inherit! :search_paths</span><br><span class=\"line\"># Pods for testing</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">target &apos;Module1UITests&apos; do</span><br><span class=\"line\">inherit! :search_paths</span><br><span class=\"line\"># Pods for testing</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>就此基本的项目依赖思路构建就算讲完了，剩下的就是调用了，其实上边的东西你掌握好了，组件化就已经可以单用这种工程管理模式解决了<br>下面的就是大家能经常搜到的一些组件化的东西，在我看来剩下的只是锦上添花，工程管理好组件化才有真正意义。从开发的角度上不论开发什么用什么语言，组件化或者说模块化通用思路就是分离多个仓库然后自动化建立依赖关系，项目工程里互相调用适当的用反射的方法实现调用，基本上每一个小仓库就都能独立的运行了。<br>顺便放一下我的ZYQRouter：<a href=\"https://github.com/heroims/ZYQRouter\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/ZYQRouter</a><br>里面的demo虽然没用submodule但基本可以阐述完整这套东西。<br>正式开始讲代码里的架构，ZYQRouter主要是方便各个模块之间的互相调用。之所以重复造轮子，其实只是自己项目需要，另外就是想完善这套组件化的实现。<br>这里ZYQRouter分为页面路由和方法路由，页面路由负责根据URL做各页面跳转甚至远程调度方法路由，方法路由则是提供target-action实例方法调用和invokeSelectorObjects反射调用静态方法，目的就是让各个模块开发过程中不引用对方的情况下也可独立按约定调用对方模块运行调试自己的相关内容，大家都开发完各个单元测试ok，集成到主项目里就可以基本跑通，当然现实是联调还是会通常出些小问题，但没什么大碍。</p>\n<h1 id=\"页面路由\"><a href=\"#页面路由\" class=\"headerlink\" title=\"页面路由\"></a>页面路由</h1><p>关于页面路由如下，用过蘑菇街Router的看这个会很亲切，我只是在它的基础上添加了重定向这个功能，这重定向的由来一个是动态更新页面跳转逻辑方便，另一个就是我们自己的需求客服系统里。。。。你会发现一个订单链接地址由客服发来，网页上用这链接用户打开的就是网页自己订单，客服打开就是客服系统该用户的订单，app上用户打开就是用户订单页面，于是救星就是重定向，把xxx.xxx.xxx/crm-order/orderid和xxx.xxx.xxx/order/orderid都重定向到applink://order/orderid，还有就是订单有大改动的时候<br>则是xxx.xxx.xxx/crm-order/orderid和applink://order/orderid重定向到xxx.xxx.xxx/order/orderid直接开网页用户订单，还有很多奇葩需求全靠重定向这救命稻草，所以这个重定向真的很实用。</p>\n<p>顺便再说下注册的事，因为我的Router里提供了target-action的调用所以上面说的远程调度target-action可以用一个url如applink://target-action/:target/:action?xxx=xxx完成，只用注册applink://target-action/:target/:action内部调用target-action方法。<br>而让所有部门全依照这一个逻辑规则产出链接简直天方夜谭，前端放在网页上的链接按这样估计一堆人吐槽，但仅仅ios部门之间按照这一规则跑还是可以的。<br>但当然有比较折中的方法，毕竟注册太多url也占地啊，这时候神奇的重定向就又可以上线救援了，如xxx.xxx.xxx/order?xxx=xxx这类直接重定向xxx.xxx.xxx/order到applink://target-action/ordertarget/orderaction这就好了，你注册的就可以少点但前提是你的target-action里处理的情况多。<br>另外写页面路由最好根据模块单独创建相应的类，比如Module1里可以单独的建个Module1PageFactory，有个方法-(void)openModule1VC1WithO1:(id)o1 o2:(id)o2 o3:(id)o3类似方法然后+(void)load里注册Router调用open的方法，这样开发阶段用方法路由，而在需要从外部进入时采用页面路由方式也就是URL方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">重定向 URLPattern 到对应的 newURLPattern </span><br><span class=\"line\">@param URLPattern 原scheme</span><br><span class=\"line\">@param newURLPattern 新scheme</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)redirectURLPattern:(NSString *)URLPattern toURLPattern:(NSString*)newURLPattern;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  注册 URLPattern 对应的 Handler，在 handler 中可以初始化 VC，然后对 VC 做各种操作</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URLPattern 带上 scheme，如 applink://beauty/:id</span><br><span class=\"line\">*  @param handler    该 block 会传一个字典，包含了注册的 URL 中对应的变量。</span><br><span class=\"line\">*                    假如注册的 URL 为 applink://beauty/:id 那么，就会传一个 @&#123;@&quot;id&quot;: 4&#125; 这样的字典过来</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)registerURLPattern:(NSString *)URLPattern toHandler:(ZYQRouterHandler)handler;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  注册 URLPattern 对应的 ObjectHandler，需要返回一个 object 给调用方</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URLPattern 带上 scheme，如 applink://beauty/:id</span><br><span class=\"line\">*  @param handler    该 block 会传一个字典，包含了注册的 URL 中对应的变量。</span><br><span class=\"line\">*                    假如注册的 URL 为 applink://beauty/:id 那么，就会传一个 @&#123;@&quot;id&quot;: 4&#125; 这样的字典过来</span><br><span class=\"line\">*                    自带的 key 为 @&quot;url&quot; 和 @&quot;completion&quot; (如果有的话)</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)registerURLPattern:(NSString *)URLPattern toObjectHandler:(ZYQRouterObjectHandler)handler;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  取消注册某个 URL Pattern</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URLPattern</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)deregisterURLPattern:(NSString *)URLPattern;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  打开此 URL</span><br><span class=\"line\">*  会在已注册的 URL -&gt; Handler 中寻找，如果找到，则执行 Handler</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL 带 Scheme，如 applink://beauty/3</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)openURL:(NSString *)URL;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  打开此 URL，同时当操作完成时，执行额外的代码</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL        带 Scheme 的 URL，如 applink://beauty/4</span><br><span class=\"line\">*  @param completion URL 处理完成后的 callback，完成的判定跟具体的业务相关</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)openURL:(NSString *)URL completion:(void (^)(id result))completion;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  打开此 URL，带上附加信息，同时当操作完成时，执行额外的代码</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL        带 Scheme 的 URL，如 applink://beauty/4</span><br><span class=\"line\">*  @param parameters 附加参数</span><br><span class=\"line\">*  @param completion URL 处理完成后的 callback，完成的判定跟具体的业务相关</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)openURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo completion:(void (^)(id result))completion;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 查找谁对某个 URL 感兴趣，如果有的话，返回一个 object</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)objectForURL:(NSString *)URL;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 查找谁对某个 URL 感兴趣，如果有的话，返回一个 object</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL</span><br><span class=\"line\">*  @param userInfo</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)objectForURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  是否可以打开URL</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (BOOL)canOpenURL:(NSString *)URL;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  调用此方法来拼接 urlpattern 和 parameters</span><br><span class=\"line\">*</span><br><span class=\"line\">*  #define ROUTE_BEAUTY @&quot;beauty/:id&quot;</span><br><span class=\"line\">*  [ZYQRouter generateURLWithPattern:ROUTE_BEAUTY, @[@13]];</span><br><span class=\"line\">*</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param pattern    url pattern 比如 @&quot;beauty/:id&quot;</span><br><span class=\"line\">*  @param parameters 一个数组，数量要跟 pattern 里的变量一致</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (NSString *)generateURLWithPattern:(NSString *)pattern parameters:(NSArray *)parameters;</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法路由\"><a href=\"#方法路由\" class=\"headerlink\" title=\"方法路由\"></a>方法路由</h1><p>关于方法路由如下,target-action模式就是自动根据class来alloc init初始化完target对象，然后@selector把那action方法调用了返回，而静态方法则是runtime搞定，日常需求基本满足，但还有点缺陷注释里已说明，由于invokeSelectorObjects根据className和selectorName调用静态方法所以封装成了C方法，另外就是这个不常用算是尝试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">*</span><br><span class=\"line\">*  调度工程内的组件方法</span><br><span class=\"line\">*  [ZYQRouter performTarget:@&quot;xxxClass&quot; action:@&quot;xxxxActionWithObj1:obj2:obj3&quot; objects:obj1,obj2,obj3,nil]</span><br><span class=\"line\">*  内部自动 alloc init 初始化对象</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param targetName    执行方法的类</span><br><span class=\"line\">*  @param actionName    方法名</span><br><span class=\"line\">*  @param object1,... 不定参数 不支持C基本类型</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return 方法回参</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName objects:(id)object1,...;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*</span><br><span class=\"line\">*  调度工程内的组件方法</span><br><span class=\"line\">*  [ZYQRouter performTarget:@&quot;xxxClass&quot; action:@&quot;xxxxActionWithObj1:obj2:obj3&quot; shouldCacheTaget:YES objects:obj1,obj2,obj3,nil]</span><br><span class=\"line\">*  内部自动 alloc init 初始化对象</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param targetName    执行方法的类</span><br><span class=\"line\">*  @param actionName    方法名</span><br><span class=\"line\">*  @param shouldCacheTaget   设置target缓存</span><br><span class=\"line\">*  @param object1,... 不定参数 不支持C基本类型</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return 方法回参</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName shouldCacheTaget:(BOOL)shouldCacheTaget objects:(id)object1,...;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*</span><br><span class=\"line\">*  调度工程内的组件方法</span><br><span class=\"line\">*  [ZYQRouter performTarget:@&quot;xxxClass&quot; action:@&quot;xxxxActionWithObj1:obj2:obj3&quot; shouldCacheTaget:YES objects:obj1,obj2,obj3,nil]</span><br><span class=\"line\">*  内部自动 alloc init 初始化对象</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param targetName    执行方法的类</span><br><span class=\"line\">*  @param actionName    方法名</span><br><span class=\"line\">*  @param shouldCacheTaget   设置target缓存</span><br><span class=\"line\">*  @param objectsArr   参数数组 不支持C基本类型</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return 方法回参</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName shouldCacheTaget:(BOOL)shouldCacheTaget objectsArr:(NSArray*)objectsArr;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*</span><br><span class=\"line\">*  添加未找到Target 或 Action 逻辑</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param notFoundHandler    未找到方法回调</span><br><span class=\"line\">*  @param targetName    类名</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)addNotFoundHandler:(ZYQNotFoundTargetActionHandler)notFoundHandler targetName:(NSString*)targetName;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  删除Target缓存</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)removeTargetsCacheWithTargetName:(NSString*)targetName;</span><br><span class=\"line\">+ (void)removeTargetsCacheWithTargetNames:(NSArray*)targetNames;</span><br><span class=\"line\">+ (void)removeAllTargetsCache;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">不定参静态方法调用 （最多支持7个，原因不定参方法传给不定参方法实在没啥好办法。。。。暂时如此）</span><br><span class=\"line\">id result=(__bridge id)zyq_invokeSelectorObjects(@&quot;Class&quot;, @&quot;actionWithObj1:obj2:obj3&quot;,obj1,obj2,obj3,nil);</span><br><span class=\"line\"></span><br><span class=\"line\">c类型转换配合__bridge_transfer __bridge</span><br><span class=\"line\">利用IMP返回值只是指针，不支持C基本类型</span><br><span class=\"line\"></span><br><span class=\"line\">@param className 类名</span><br><span class=\"line\">@param selectorName,... 方法名，不定参数</span><br><span class=\"line\">@return 返回值</span><br><span class=\"line\">*/</span><br><span class=\"line\">void * zyq_invokeSelectorObjects(NSString *className,NSString* selectorName,...);</span><br></pre></td></tr></table></figure></p>\n<p>最后就是页面路由和方法路由遇到找不到的处理方案了，主要思路就是不crash、好判断，页面路由就判断一下是网页的就跳转url不是就报个提示算了，方法路由return nil吧。。这里仁者见仁智者见智，反正可以自己定制，差不多就讲到这吧。</p>\n<h1 id=\"事件链路由\"><a href=\"#事件链路由\" class=\"headerlink\" title=\"事件链路由\"></a>事件链路由</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">响应链传递路由</span><br><span class=\"line\"></span><br><span class=\"line\">用于解决多级嵌套UI对象的上级事件响应，省去delegate protocol逐级传递，跨级传递</span><br><span class=\"line\"></span><br><span class=\"line\">@param eventName 事件名</span><br><span class=\"line\">@param userInfo 扩展信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)zyq_routerEventWithName:(NSString *)eventName userInfo:(id)userInfo;</span><br></pre></td></tr></table></figure>\n<p>这个主要解决多层级UI对象嵌套的时候，事件传递繁琐，通过Event完成对事件定义，一级级传递到响应者的过程在开发中就可以省略了。<br>只需要如下使用的时候在发起和接受地方写好处理即可！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//调用</span><br><span class=\"line\">[self.nextResponder zyq_routerEventWithName:eventName userInfo:userInfo];</span><br><span class=\"line\"></span><br><span class=\"line\">//承接</span><br><span class=\"line\">- (void)zyq_routerEventWithName:(NSString *)eventName userInfo:(NSDictionary *)userInfo &#123;</span><br><span class=\"line\">//判断eventName做出对应逻辑</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>谈及组件化其实网上也有不少文章了，但我个人认为不结合工程管理去单讲组件化恐怕很难让人理解概念，而去实践的时候也只是照猫画虎。</p>\n<h1 id=\"工程管理\"><a href=\"#工程管理\" class=\"headerlink\" title=\"工程管理\"></a>工程管理</h1><p>组件化的实现很重要的一个组成部分应该是工程拆分，这里我的方案是采取git管理项目pod管理依赖很常见很普通的方法。<br>理想的状态每一个模块都是独立的，可以单独拿出来测试，发布，也就是每一个子模块其实都是一个git仓库，这里紧接着就是子仓库和主项目的关系问题，上边说到了git和pod，还有一个submodule我喜欢用这个来做子仓库的管理上边为啥没提它呢？<br>因为submodule本身就是git自带的就是git的一部分，常用命令有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加子仓库</span><br><span class=\"line\">git submodule add 仓库地址 路径</span><br><span class=\"line\">#初始化所有子仓库</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\"># 更新子仓库</span><br><span class=\"line\">git submodule update</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以初始化更新一起</span><br><span class=\"line\">git submodule update --init</span><br></pre></td></tr></table></figure></p>\n<p>pod只是帮我把依赖关系理清直接本地pod，因为坑爹的开发阶段难免有互相block的情况，那边东西弄完了，但还没有做发布还不稳定，但另一边已经急着要看一眼整体调用的效果了。。。<br>当然这时候也可以让对面先打个beta的tag，那样可想而知最后会有多少没用的tag，另一方面就是bug联调恢复节点排查的时候，另一方估计只有一个方案就是回滚上一个tag中间哪的问题一点点打tag联调。<br>上边说的打tag也只是个例子，当然你可以改Podfile对应不同branch，但那也是要每次调都要改一下的，但我这种模式由于是本地pod所以podfile不用动了每次都去指向对应的项目，剩下的就是对子仓库随意切换branch甚至commit节点都可以，调ok了直接commit一下submodule指向的更改即可。然后另一方更新一下再pod update把依赖关系重新建立一下（如果没有添加或删除，甚至这步都不需要，本地pod引用目录我们submodule的本地文件夹里面有什么变化这边自动会变，添加删除是因为依赖关系发生变化了所以跟着需要重新建立）,当然理想情况回头有空单独整合一套submodule和pod的命令，submodule更新时判断有增删操作执行pod update其他情况不处理。</p>\n<p>这里紧接着就是公共库的处理以及怎么去建立主仓库与子仓库的依赖，我这里把基本思路给出，具体情况还是自己再改动，这里首先就是建立podspec来提供依赖建立<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new do |s|</span><br><span class=\"line\">s.name                  = &apos;MainWorkSpaceDemo&apos;</span><br><span class=\"line\">s.version               = &apos;1.0.0&apos;</span><br><span class=\"line\">s.summary               = &apos;A new container controller to slide  &apos;</span><br><span class=\"line\">s.homepage              = &apos;github.com&apos;</span><br><span class=\"line\">s.license               = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;README.md&apos; &#125;</span><br><span class=\"line\">s.author                = &#123; &apos;heroims&apos; =&gt; &apos;heroims@163.com&apos; &#125;</span><br><span class=\"line\">s.source                = &#123; :git =&gt; &apos;&apos;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class=\"line\">s.platform              = :ios, &apos;5.0&apos;</span><br><span class=\"line\">s.source_files          = &apos;ZYQRouter/*.&#123;h,m&#125;&apos;</span><br><span class=\"line\">s.requires_arc          = true</span><br><span class=\"line\">#公共仓库</span><br><span class=\"line\">s.subspec &apos;BaseTool&apos; do |ss|</span><br><span class=\"line\">ss.source_files = &apos;ZYQRouter/*.&#123;h,m&#125;&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">#模块1</span><br><span class=\"line\">s.subspec &apos;Module1&apos; do |sss|</span><br><span class=\"line\">sss.source_files = &apos;Module1/Module1Lib/*.&#123;h,m&#125;&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">#模块2</span><br><span class=\"line\">s.subspec &apos;Module2&apos; do |ssss|</span><br><span class=\"line\">ssss.source_files = &apos;Module2/Module2Lib/*.&#123;h,m&#125;&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>看见上边相比就明白了把，开发的时候最好要作为模块给人的东西放在一个目录下，当然不放也可以，这里就是为了方便<br>然后就是引用了,下面是module1工程的，只引用了一个公共库，真正开发的时候则会引用很多，然后build测试模块的app给测试，提供给主仓库的东西放在事先约定的目录下，其他的随便看心情，反正对别人没影响就是自己爽不爽<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target &apos;Module1&apos; do</span><br><span class=\"line\"># Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks</span><br><span class=\"line\"># use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\"># Pods for Module1</span><br><span class=\"line\">pod &apos;MainWorkSpaceDemo/BaseTool&apos;, :path =&gt; &apos;../MainWorkSpaceDemo.podspec&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">target &apos;Module1Tests&apos; do</span><br><span class=\"line\">inherit! :search_paths</span><br><span class=\"line\"># Pods for testing</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">target &apos;Module1UITests&apos; do</span><br><span class=\"line\">inherit! :search_paths</span><br><span class=\"line\"># Pods for testing</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>","more":"<p>就此基本的项目依赖思路构建就算讲完了，剩下的就是调用了，其实上边的东西你掌握好了，组件化就已经可以单用这种工程管理模式解决了<br>下面的就是大家能经常搜到的一些组件化的东西，在我看来剩下的只是锦上添花，工程管理好组件化才有真正意义。从开发的角度上不论开发什么用什么语言，组件化或者说模块化通用思路就是分离多个仓库然后自动化建立依赖关系，项目工程里互相调用适当的用反射的方法实现调用，基本上每一个小仓库就都能独立的运行了。<br>顺便放一下我的ZYQRouter：<a href=\"https://github.com/heroims/ZYQRouter\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/ZYQRouter</a><br>里面的demo虽然没用submodule但基本可以阐述完整这套东西。<br>正式开始讲代码里的架构，ZYQRouter主要是方便各个模块之间的互相调用。之所以重复造轮子，其实只是自己项目需要，另外就是想完善这套组件化的实现。<br>这里ZYQRouter分为页面路由和方法路由，页面路由负责根据URL做各页面跳转甚至远程调度方法路由，方法路由则是提供target-action实例方法调用和invokeSelectorObjects反射调用静态方法，目的就是让各个模块开发过程中不引用对方的情况下也可独立按约定调用对方模块运行调试自己的相关内容，大家都开发完各个单元测试ok，集成到主项目里就可以基本跑通，当然现实是联调还是会通常出些小问题，但没什么大碍。</p>\n<h1 id=\"页面路由\"><a href=\"#页面路由\" class=\"headerlink\" title=\"页面路由\"></a>页面路由</h1><p>关于页面路由如下，用过蘑菇街Router的看这个会很亲切，我只是在它的基础上添加了重定向这个功能，这重定向的由来一个是动态更新页面跳转逻辑方便，另一个就是我们自己的需求客服系统里。。。。你会发现一个订单链接地址由客服发来，网页上用这链接用户打开的就是网页自己订单，客服打开就是客服系统该用户的订单，app上用户打开就是用户订单页面，于是救星就是重定向，把xxx.xxx.xxx/crm-order/orderid和xxx.xxx.xxx/order/orderid都重定向到applink://order/orderid，还有就是订单有大改动的时候<br>则是xxx.xxx.xxx/crm-order/orderid和applink://order/orderid重定向到xxx.xxx.xxx/order/orderid直接开网页用户订单，还有很多奇葩需求全靠重定向这救命稻草，所以这个重定向真的很实用。</p>\n<p>顺便再说下注册的事，因为我的Router里提供了target-action的调用所以上面说的远程调度target-action可以用一个url如applink://target-action/:target/:action?xxx=xxx完成，只用注册applink://target-action/:target/:action内部调用target-action方法。<br>而让所有部门全依照这一个逻辑规则产出链接简直天方夜谭，前端放在网页上的链接按这样估计一堆人吐槽，但仅仅ios部门之间按照这一规则跑还是可以的。<br>但当然有比较折中的方法，毕竟注册太多url也占地啊，这时候神奇的重定向就又可以上线救援了，如xxx.xxx.xxx/order?xxx=xxx这类直接重定向xxx.xxx.xxx/order到applink://target-action/ordertarget/orderaction这就好了，你注册的就可以少点但前提是你的target-action里处理的情况多。<br>另外写页面路由最好根据模块单独创建相应的类，比如Module1里可以单独的建个Module1PageFactory，有个方法-(void)openModule1VC1WithO1:(id)o1 o2:(id)o2 o3:(id)o3类似方法然后+(void)load里注册Router调用open的方法，这样开发阶段用方法路由，而在需要从外部进入时采用页面路由方式也就是URL方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">重定向 URLPattern 到对应的 newURLPattern </span><br><span class=\"line\">@param URLPattern 原scheme</span><br><span class=\"line\">@param newURLPattern 新scheme</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)redirectURLPattern:(NSString *)URLPattern toURLPattern:(NSString*)newURLPattern;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  注册 URLPattern 对应的 Handler，在 handler 中可以初始化 VC，然后对 VC 做各种操作</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URLPattern 带上 scheme，如 applink://beauty/:id</span><br><span class=\"line\">*  @param handler    该 block 会传一个字典，包含了注册的 URL 中对应的变量。</span><br><span class=\"line\">*                    假如注册的 URL 为 applink://beauty/:id 那么，就会传一个 @&#123;@&quot;id&quot;: 4&#125; 这样的字典过来</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)registerURLPattern:(NSString *)URLPattern toHandler:(ZYQRouterHandler)handler;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  注册 URLPattern 对应的 ObjectHandler，需要返回一个 object 给调用方</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URLPattern 带上 scheme，如 applink://beauty/:id</span><br><span class=\"line\">*  @param handler    该 block 会传一个字典，包含了注册的 URL 中对应的变量。</span><br><span class=\"line\">*                    假如注册的 URL 为 applink://beauty/:id 那么，就会传一个 @&#123;@&quot;id&quot;: 4&#125; 这样的字典过来</span><br><span class=\"line\">*                    自带的 key 为 @&quot;url&quot; 和 @&quot;completion&quot; (如果有的话)</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)registerURLPattern:(NSString *)URLPattern toObjectHandler:(ZYQRouterObjectHandler)handler;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  取消注册某个 URL Pattern</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URLPattern</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)deregisterURLPattern:(NSString *)URLPattern;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  打开此 URL</span><br><span class=\"line\">*  会在已注册的 URL -&gt; Handler 中寻找，如果找到，则执行 Handler</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL 带 Scheme，如 applink://beauty/3</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)openURL:(NSString *)URL;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  打开此 URL，同时当操作完成时，执行额外的代码</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL        带 Scheme 的 URL，如 applink://beauty/4</span><br><span class=\"line\">*  @param completion URL 处理完成后的 callback，完成的判定跟具体的业务相关</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)openURL:(NSString *)URL completion:(void (^)(id result))completion;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  打开此 URL，带上附加信息，同时当操作完成时，执行额外的代码</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL        带 Scheme 的 URL，如 applink://beauty/4</span><br><span class=\"line\">*  @param parameters 附加参数</span><br><span class=\"line\">*  @param completion URL 处理完成后的 callback，完成的判定跟具体的业务相关</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)openURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo completion:(void (^)(id result))completion;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 查找谁对某个 URL 感兴趣，如果有的话，返回一个 object</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)objectForURL:(NSString *)URL;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 查找谁对某个 URL 感兴趣，如果有的话，返回一个 object</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL</span><br><span class=\"line\">*  @param userInfo</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)objectForURL:(NSString *)URL withUserInfo:(NSDictionary *)userInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  是否可以打开URL</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param URL</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (BOOL)canOpenURL:(NSString *)URL;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  调用此方法来拼接 urlpattern 和 parameters</span><br><span class=\"line\">*</span><br><span class=\"line\">*  #define ROUTE_BEAUTY @&quot;beauty/:id&quot;</span><br><span class=\"line\">*  [ZYQRouter generateURLWithPattern:ROUTE_BEAUTY, @[@13]];</span><br><span class=\"line\">*</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param pattern    url pattern 比如 @&quot;beauty/:id&quot;</span><br><span class=\"line\">*  @param parameters 一个数组，数量要跟 pattern 里的变量一致</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (NSString *)generateURLWithPattern:(NSString *)pattern parameters:(NSArray *)parameters;</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法路由\"><a href=\"#方法路由\" class=\"headerlink\" title=\"方法路由\"></a>方法路由</h1><p>关于方法路由如下,target-action模式就是自动根据class来alloc init初始化完target对象，然后@selector把那action方法调用了返回，而静态方法则是runtime搞定，日常需求基本满足，但还有点缺陷注释里已说明，由于invokeSelectorObjects根据className和selectorName调用静态方法所以封装成了C方法，另外就是这个不常用算是尝试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">*</span><br><span class=\"line\">*  调度工程内的组件方法</span><br><span class=\"line\">*  [ZYQRouter performTarget:@&quot;xxxClass&quot; action:@&quot;xxxxActionWithObj1:obj2:obj3&quot; objects:obj1,obj2,obj3,nil]</span><br><span class=\"line\">*  内部自动 alloc init 初始化对象</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param targetName    执行方法的类</span><br><span class=\"line\">*  @param actionName    方法名</span><br><span class=\"line\">*  @param object1,... 不定参数 不支持C基本类型</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return 方法回参</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName objects:(id)object1,...;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*</span><br><span class=\"line\">*  调度工程内的组件方法</span><br><span class=\"line\">*  [ZYQRouter performTarget:@&quot;xxxClass&quot; action:@&quot;xxxxActionWithObj1:obj2:obj3&quot; shouldCacheTaget:YES objects:obj1,obj2,obj3,nil]</span><br><span class=\"line\">*  内部自动 alloc init 初始化对象</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param targetName    执行方法的类</span><br><span class=\"line\">*  @param actionName    方法名</span><br><span class=\"line\">*  @param shouldCacheTaget   设置target缓存</span><br><span class=\"line\">*  @param object1,... 不定参数 不支持C基本类型</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return 方法回参</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName shouldCacheTaget:(BOOL)shouldCacheTaget objects:(id)object1,...;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*</span><br><span class=\"line\">*  调度工程内的组件方法</span><br><span class=\"line\">*  [ZYQRouter performTarget:@&quot;xxxClass&quot; action:@&quot;xxxxActionWithObj1:obj2:obj3&quot; shouldCacheTaget:YES objects:obj1,obj2,obj3,nil]</span><br><span class=\"line\">*  内部自动 alloc init 初始化对象</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param targetName    执行方法的类</span><br><span class=\"line\">*  @param actionName    方法名</span><br><span class=\"line\">*  @param shouldCacheTaget   设置target缓存</span><br><span class=\"line\">*  @param objectsArr   参数数组 不支持C基本类型</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return 方法回参</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (id)performTarget:(NSString*)targetName action:(NSString*)actionName shouldCacheTaget:(BOOL)shouldCacheTaget objectsArr:(NSArray*)objectsArr;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*</span><br><span class=\"line\">*  添加未找到Target 或 Action 逻辑</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @param notFoundHandler    未找到方法回调</span><br><span class=\"line\">*  @param targetName    类名</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)addNotFoundHandler:(ZYQNotFoundTargetActionHandler)notFoundHandler targetName:(NSString*)targetName;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">*  删除Target缓存</span><br><span class=\"line\">*</span><br><span class=\"line\">*  @return</span><br><span class=\"line\">*/</span><br><span class=\"line\">+ (void)removeTargetsCacheWithTargetName:(NSString*)targetName;</span><br><span class=\"line\">+ (void)removeTargetsCacheWithTargetNames:(NSArray*)targetNames;</span><br><span class=\"line\">+ (void)removeAllTargetsCache;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">不定参静态方法调用 （最多支持7个，原因不定参方法传给不定参方法实在没啥好办法。。。。暂时如此）</span><br><span class=\"line\">id result=(__bridge id)zyq_invokeSelectorObjects(@&quot;Class&quot;, @&quot;actionWithObj1:obj2:obj3&quot;,obj1,obj2,obj3,nil);</span><br><span class=\"line\"></span><br><span class=\"line\">c类型转换配合__bridge_transfer __bridge</span><br><span class=\"line\">利用IMP返回值只是指针，不支持C基本类型</span><br><span class=\"line\"></span><br><span class=\"line\">@param className 类名</span><br><span class=\"line\">@param selectorName,... 方法名，不定参数</span><br><span class=\"line\">@return 返回值</span><br><span class=\"line\">*/</span><br><span class=\"line\">void * zyq_invokeSelectorObjects(NSString *className,NSString* selectorName,...);</span><br></pre></td></tr></table></figure></p>\n<p>最后就是页面路由和方法路由遇到找不到的处理方案了，主要思路就是不crash、好判断，页面路由就判断一下是网页的就跳转url不是就报个提示算了，方法路由return nil吧。。这里仁者见仁智者见智，反正可以自己定制，差不多就讲到这吧。</p>\n<h1 id=\"事件链路由\"><a href=\"#事件链路由\" class=\"headerlink\" title=\"事件链路由\"></a>事件链路由</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">响应链传递路由</span><br><span class=\"line\"></span><br><span class=\"line\">用于解决多级嵌套UI对象的上级事件响应，省去delegate protocol逐级传递，跨级传递</span><br><span class=\"line\"></span><br><span class=\"line\">@param eventName 事件名</span><br><span class=\"line\">@param userInfo 扩展信息</span><br><span class=\"line\">*/</span><br><span class=\"line\">-(void)zyq_routerEventWithName:(NSString *)eventName userInfo:(id)userInfo;</span><br></pre></td></tr></table></figure>\n<p>这个主要解决多层级UI对象嵌套的时候，事件传递繁琐，通过Event完成对事件定义，一级级传递到响应者的过程在开发中就可以省略了。<br>只需要如下使用的时候在发起和接受地方写好处理即可！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//调用</span><br><span class=\"line\">[self.nextResponder zyq_routerEventWithName:eventName userInfo:userInfo];</span><br><span class=\"line\"></span><br><span class=\"line\">//承接</span><br><span class=\"line\">- (void)zyq_routerEventWithName:(NSString *)eventName userInfo:(NSDictionary *)userInfo &#123;</span><br><span class=\"line\">//判断eventName做出对应逻辑</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"OLLVM代码混淆移植与使用(续)","date":"2021-11-09T15:09:05.000Z","typora-root-url":"../","_content":"\n# 现状\n\n随着时间时间推移，类似库都基本不维护了，毕竟LLVM新版本改动多还好说，再多只要看看关键位置就大差不差知道怎么改怎么兼容，最难的就是编译，每次编译调试不知不觉没干啥就能耗人一天，另外就是以前的人现在都不知道还在不在业内，回归正题，其实修改的地方并不多，下面我就整理了一下关键位置，主要就是类型和调用顺序变了一下，了解以后去修改类似的项目也是手到擒来。\n\n# 关键修改 \n### 9.0以后的修改\n这里类型写法更加标准一步一步转\n![image.png](/assets/blogImage/3994053-8d78f46f6c1acb2c.webp)\n这里是9以后不在调用这个方法了，导致fla不生效，也可以在`Flattening.cpp`里面修改添加\n![image.png](/assets/blogImage/3994053-8354e86d99016a71.webp)\n\n<!-- more -->\n\n### 10.0以后的修改\n\n首先`Obfuscation/CMakeLists.txt` 里 `add_llvm_library`改`add_llvm_component_library`\n\n\n\n这里是LoadInst初始化多加了个类型参数，类似地方全改一遍\n![image.png](/assets/blogImage/3994053-f4eded6ede7d355f.webp)\n![image.png](/assets/blogImage/3994053-179bfa5cc5cac5ad.webp)\n这里传入类型修改一下\n![image.png](/assets/blogImage/3994053-2793ebe6fce228a3.webp)\n再然后`CryptoUtils.h`里有一些宏定义是非常短的名称代表方法，这里再全局里容易有歧义，可以批量移到`CryptoUtils.cpp`里，因为只有这个类再用，其他地方也没有用这些短名称的宏方法\n![image.png](/assets/blogImage/3994053-233a4ab906d1dad8.webp)\n其他地方和原来一样不变。\n\n### 11.0以后的修改\n这里开始严格区分一元运算符和二元运算符了\n\n![image.png](/assets/blogImage/3994053-05536c4e64d907eb.png)\n\n![image.png](/assets/blogImage/3994053-b7202d3e94f22e28.png)\n\n### XCode12 以后\n\n首先编译要多加几个项目，根据自己需要可以多填几个\n```\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DLLVM_CREATE_XCODE_TOOLCHAIN=ON -DLLVM_ENABLE_PROJECTS=\"clang;libcxx;libcxxabi\" ../obfuscator/\nmake -j7\nsudo make install-xcode-toolchain\nmv /usr/local/Toolchains  /Library/Developer/\n```\n然后在Build Settings里找到`C++ Language Dialect` 和 `C++ Standard Library`使用默认是为了直接走编译链构建的版本，如果你还加了其他的也需要注意一下别的确保都走你编译的版本\n![build3.png](/assets/blogImage/3994053-11c43091e54007da.webp)\n\n### Android Studio4.x以后\n\nNDK都改为了默认CMake项目，直接复制`Android/sdk/ndk/xx.x.xxxxxx`文件夹修改一下名称,替换bin和lib64\n\n在build.gradle里添加个人修改的版本\n\n```\nandroid {\n    ndkVersion \"major.minor.build\" // e.g.,  ndkVersion \"21.3.6528147\"\n}\n```\n\n![build3.png](/assets/blogImage/WX20211228-021611@2x.png)\n","source":"_posts/OLLVM代码混淆移植与使用(续).md","raw":"---\ntitle: OLLVM代码混淆移植与使用(续)\ndate: 2021-11-09 23:09:05\ntags:\n    - LLVM\n    - OLLVM\n    - Clang\n    - 混淆\n    - XCode\n    - NDK\n    - Visual Studio\ntypora-root-url: ../\n---\n\n# 现状\n\n随着时间时间推移，类似库都基本不维护了，毕竟LLVM新版本改动多还好说，再多只要看看关键位置就大差不差知道怎么改怎么兼容，最难的就是编译，每次编译调试不知不觉没干啥就能耗人一天，另外就是以前的人现在都不知道还在不在业内，回归正题，其实修改的地方并不多，下面我就整理了一下关键位置，主要就是类型和调用顺序变了一下，了解以后去修改类似的项目也是手到擒来。\n\n# 关键修改 \n### 9.0以后的修改\n这里类型写法更加标准一步一步转\n![image.png](/assets/blogImage/3994053-8d78f46f6c1acb2c.webp)\n这里是9以后不在调用这个方法了，导致fla不生效，也可以在`Flattening.cpp`里面修改添加\n![image.png](/assets/blogImage/3994053-8354e86d99016a71.webp)\n\n<!-- more -->\n\n### 10.0以后的修改\n\n首先`Obfuscation/CMakeLists.txt` 里 `add_llvm_library`改`add_llvm_component_library`\n\n\n\n这里是LoadInst初始化多加了个类型参数，类似地方全改一遍\n![image.png](/assets/blogImage/3994053-f4eded6ede7d355f.webp)\n![image.png](/assets/blogImage/3994053-179bfa5cc5cac5ad.webp)\n这里传入类型修改一下\n![image.png](/assets/blogImage/3994053-2793ebe6fce228a3.webp)\n再然后`CryptoUtils.h`里有一些宏定义是非常短的名称代表方法，这里再全局里容易有歧义，可以批量移到`CryptoUtils.cpp`里，因为只有这个类再用，其他地方也没有用这些短名称的宏方法\n![image.png](/assets/blogImage/3994053-233a4ab906d1dad8.webp)\n其他地方和原来一样不变。\n\n### 11.0以后的修改\n这里开始严格区分一元运算符和二元运算符了\n\n![image.png](/assets/blogImage/3994053-05536c4e64d907eb.png)\n\n![image.png](/assets/blogImage/3994053-b7202d3e94f22e28.png)\n\n### XCode12 以后\n\n首先编译要多加几个项目，根据自己需要可以多填几个\n```\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DLLVM_CREATE_XCODE_TOOLCHAIN=ON -DLLVM_ENABLE_PROJECTS=\"clang;libcxx;libcxxabi\" ../obfuscator/\nmake -j7\nsudo make install-xcode-toolchain\nmv /usr/local/Toolchains  /Library/Developer/\n```\n然后在Build Settings里找到`C++ Language Dialect` 和 `C++ Standard Library`使用默认是为了直接走编译链构建的版本，如果你还加了其他的也需要注意一下别的确保都走你编译的版本\n![build3.png](/assets/blogImage/3994053-11c43091e54007da.webp)\n\n### Android Studio4.x以后\n\nNDK都改为了默认CMake项目，直接复制`Android/sdk/ndk/xx.x.xxxxxx`文件夹修改一下名称,替换bin和lib64\n\n在build.gradle里添加个人修改的版本\n\n```\nandroid {\n    ndkVersion \"major.minor.build\" // e.g.,  ndkVersion \"21.3.6528147\"\n}\n```\n\n![build3.png](/assets/blogImage/WX20211228-021611@2x.png)\n","slug":"OLLVM代码混淆移植与使用(续)","published":1,"updated":"2021-12-27T18:17:25.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqy000knhs6gau3l5oy","content":"<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h1><p>随着时间时间推移，类似库都基本不维护了，毕竟LLVM新版本改动多还好说，再多只要看看关键位置就大差不差知道怎么改怎么兼容，最难的就是编译，每次编译调试不知不觉没干啥就能耗人一天，另外就是以前的人现在都不知道还在不在业内，回归正题，其实修改的地方并不多，下面我就整理了一下关键位置，主要就是类型和调用顺序变了一下，了解以后去修改类似的项目也是手到擒来。</p>\n<h1 id=\"关键修改\"><a href=\"#关键修改\" class=\"headerlink\" title=\"关键修改\"></a>关键修改</h1><h3 id=\"9-0以后的修改\"><a href=\"#9-0以后的修改\" class=\"headerlink\" title=\"9.0以后的修改\"></a>9.0以后的修改</h3><p>这里类型写法更加标准一步一步转<br><img src=\"/assets/blogImage/3994053-8d78f46f6c1acb2c.webp\" alt=\"image.png\"><br>这里是9以后不在调用这个方法了，导致fla不生效，也可以在<code>Flattening.cpp</code>里面修改添加<br><img src=\"/assets/blogImage/3994053-8354e86d99016a71.webp\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n<h3 id=\"10-0以后的修改\"><a href=\"#10-0以后的修改\" class=\"headerlink\" title=\"10.0以后的修改\"></a>10.0以后的修改</h3><p>首先<code>Obfuscation/CMakeLists.txt</code> 里 <code>add_llvm_library</code>改<code>add_llvm_component_library</code></p>\n<p>这里是LoadInst初始化多加了个类型参数，类似地方全改一遍<br><img src=\"/assets/blogImage/3994053-f4eded6ede7d355f.webp\" alt=\"image.png\"><br><img src=\"/assets/blogImage/3994053-179bfa5cc5cac5ad.webp\" alt=\"image.png\"><br>这里传入类型修改一下<br><img src=\"/assets/blogImage/3994053-2793ebe6fce228a3.webp\" alt=\"image.png\"><br>再然后<code>CryptoUtils.h</code>里有一些宏定义是非常短的名称代表方法，这里再全局里容易有歧义，可以批量移到<code>CryptoUtils.cpp</code>里，因为只有这个类再用，其他地方也没有用这些短名称的宏方法<br><img src=\"/assets/blogImage/3994053-233a4ab906d1dad8.webp\" alt=\"image.png\"><br>其他地方和原来一样不变。</p>\n<h3 id=\"11-0以后的修改\"><a href=\"#11-0以后的修改\" class=\"headerlink\" title=\"11.0以后的修改\"></a>11.0以后的修改</h3><p>这里开始严格区分一元运算符和二元运算符了</p>\n<p><img src=\"/assets/blogImage/3994053-05536c4e64d907eb.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-b7202d3e94f22e28.png\" alt=\"image.png\"></p>\n<h3 id=\"XCode12-以后\"><a href=\"#XCode12-以后\" class=\"headerlink\" title=\"XCode12 以后\"></a>XCode12 以后</h3><p>首先编译要多加几个项目，根据自己需要可以多填几个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd build</span><br><span class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_CREATE_XCODE_TOOLCHAIN=ON -DLLVM_ENABLE_PROJECTS=&quot;clang;libcxx;libcxxabi&quot; ../obfuscator/</span><br><span class=\"line\">make -j7</span><br><span class=\"line\">sudo make install-xcode-toolchain</span><br><span class=\"line\">mv /usr/local/Toolchains  /Library/Developer/</span><br></pre></td></tr></table></figure></p>\n<p>然后在Build Settings里找到<code>C++ Language Dialect</code> 和 <code>C++ Standard Library</code>使用默认是为了直接走编译链构建的版本，如果你还加了其他的也需要注意一下别的确保都走你编译的版本<br><img src=\"/assets/blogImage/3994053-11c43091e54007da.webp\" alt=\"build3.png\"></p>\n<h3 id=\"Android-Studio4-x以后\"><a href=\"#Android-Studio4-x以后\" class=\"headerlink\" title=\"Android Studio4.x以后\"></a>Android Studio4.x以后</h3><p>NDK都改为了默认CMake项目，直接复制<code>Android/sdk/ndk/xx.x.xxxxxx</code>文件夹修改一下名称,替换bin和lib64</p>\n<p>在build.gradle里添加个人修改的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ndkVersion &quot;major.minor.build&quot; // e.g.,  ndkVersion &quot;21.3.6528147&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/blogImage/WX20211228-021611@2x.png\" alt=\"build3.png\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h1><p>随着时间时间推移，类似库都基本不维护了，毕竟LLVM新版本改动多还好说，再多只要看看关键位置就大差不差知道怎么改怎么兼容，最难的就是编译，每次编译调试不知不觉没干啥就能耗人一天，另外就是以前的人现在都不知道还在不在业内，回归正题，其实修改的地方并不多，下面我就整理了一下关键位置，主要就是类型和调用顺序变了一下，了解以后去修改类似的项目也是手到擒来。</p>\n<h1 id=\"关键修改\"><a href=\"#关键修改\" class=\"headerlink\" title=\"关键修改\"></a>关键修改</h1><h3 id=\"9-0以后的修改\"><a href=\"#9-0以后的修改\" class=\"headerlink\" title=\"9.0以后的修改\"></a>9.0以后的修改</h3><p>这里类型写法更加标准一步一步转<br><img src=\"/assets/blogImage/3994053-8d78f46f6c1acb2c.webp\" alt=\"image.png\"><br>这里是9以后不在调用这个方法了，导致fla不生效，也可以在<code>Flattening.cpp</code>里面修改添加<br><img src=\"/assets/blogImage/3994053-8354e86d99016a71.webp\" alt=\"image.png\"></p>","more":"<h3 id=\"10-0以后的修改\"><a href=\"#10-0以后的修改\" class=\"headerlink\" title=\"10.0以后的修改\"></a>10.0以后的修改</h3><p>首先<code>Obfuscation/CMakeLists.txt</code> 里 <code>add_llvm_library</code>改<code>add_llvm_component_library</code></p>\n<p>这里是LoadInst初始化多加了个类型参数，类似地方全改一遍<br><img src=\"/assets/blogImage/3994053-f4eded6ede7d355f.webp\" alt=\"image.png\"><br><img src=\"/assets/blogImage/3994053-179bfa5cc5cac5ad.webp\" alt=\"image.png\"><br>这里传入类型修改一下<br><img src=\"/assets/blogImage/3994053-2793ebe6fce228a3.webp\" alt=\"image.png\"><br>再然后<code>CryptoUtils.h</code>里有一些宏定义是非常短的名称代表方法，这里再全局里容易有歧义，可以批量移到<code>CryptoUtils.cpp</code>里，因为只有这个类再用，其他地方也没有用这些短名称的宏方法<br><img src=\"/assets/blogImage/3994053-233a4ab906d1dad8.webp\" alt=\"image.png\"><br>其他地方和原来一样不变。</p>\n<h3 id=\"11-0以后的修改\"><a href=\"#11-0以后的修改\" class=\"headerlink\" title=\"11.0以后的修改\"></a>11.0以后的修改</h3><p>这里开始严格区分一元运算符和二元运算符了</p>\n<p><img src=\"/assets/blogImage/3994053-05536c4e64d907eb.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-b7202d3e94f22e28.png\" alt=\"image.png\"></p>\n<h3 id=\"XCode12-以后\"><a href=\"#XCode12-以后\" class=\"headerlink\" title=\"XCode12 以后\"></a>XCode12 以后</h3><p>首先编译要多加几个项目，根据自己需要可以多填几个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd build</span><br><span class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_CREATE_XCODE_TOOLCHAIN=ON -DLLVM_ENABLE_PROJECTS=&quot;clang;libcxx;libcxxabi&quot; ../obfuscator/</span><br><span class=\"line\">make -j7</span><br><span class=\"line\">sudo make install-xcode-toolchain</span><br><span class=\"line\">mv /usr/local/Toolchains  /Library/Developer/</span><br></pre></td></tr></table></figure></p>\n<p>然后在Build Settings里找到<code>C++ Language Dialect</code> 和 <code>C++ Standard Library</code>使用默认是为了直接走编译链构建的版本，如果你还加了其他的也需要注意一下别的确保都走你编译的版本<br><img src=\"/assets/blogImage/3994053-11c43091e54007da.webp\" alt=\"build3.png\"></p>\n<h3 id=\"Android-Studio4-x以后\"><a href=\"#Android-Studio4-x以后\" class=\"headerlink\" title=\"Android Studio4.x以后\"></a>Android Studio4.x以后</h3><p>NDK都改为了默认CMake项目，直接复制<code>Android/sdk/ndk/xx.x.xxxxxx</code>文件夹修改一下名称,替换bin和lib64</p>\n<p>在build.gradle里添加个人修改的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ndkVersion &quot;major.minor.build&quot; // e.g.,  ndkVersion &quot;21.3.6528147&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/assets/blogImage/WX20211228-021611@2x.png\" alt=\"build3.png\"></p>"},{"title":"OLLVM代码混淆移植与使用","date":"2019-01-05T18:09:05.000Z","typora-root-url":"../","_content":"# 简介\nOLLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个项目,该项目旨在提供一套开源的针对LLVM的代码混淆工具,以增加对逆向工程的难度。github上地址是https://github.com/obfuscator-llvm/obfuscator ，只不过仅更新到llvm的4.0，2017年开始就没在更新。\n# 移植\nOLLVM如果自己想拿最新版的LLVM和Clang进行移植功能其实也并不是很难，整理一下其实改动很小，接下来将会讲一下移植的方法。\n\n## 个人整理\n先放一下个人移植好的版本地址https://github.com/heroims/obfuscator.git ，个人fork原版后又加入了llvm5.0，6.0，7.0以及swift-llvm5.0的版本，应该能满足大部分需求了，如果有新版本下面的讲解，各位也可以自己动手去下载自己需要的llvm和clang进行移植。git上的提交每次都很独立如下图，方便各位cherry-pick。\n<!-- more -->\n![image.png](/assets/blogImage/3994053-1d4286b24563a1db.png)\n\n\n## 下载LLVM\nllvm地址：https://github.com/llvm-mirror\nswift-llvm地址：https://github.com/apple\n大家可以从上面的地址下载最新的自己需要的llvm和clang\n\n``` shell\n#下载llvm源码\nwget https://codeload.github.com/llvm-mirror/llvm/zip/release_70\nunzip llvm-release_70.zip\nmv llvm-release_70 llvm\n\n\n#下载clang源码\nwget https://codeload.github.com/llvm-mirror/clang/zip/release_70\nunzip clang-release_70.zip\nmv clang-release_70 llvm/tools/clang\n\n```\n##  添加混淆代码\n如果用git的话只需要执行`git cherry-pick xxxx`把xxxx换成对应的我的版本上的提交哈希填上即可。极度推荐用git搞定。\n\n如果手动一点点加的话，第一步就是把我改过的OLLVM文件夹里`/include/llvm/Transforms/Obfuscation`和`/lib/Transforms/Obfuscation`移动到刚才下载好的llvm源码文件夹相同的位置。\n``` shell\ngit clone https://github.com/heroims/obfuscator.git\ncd obfuscator\ngit checkout llvm-7.0\ncp include/llvm/Transforms/Obfuscation llvm/include/llvm/Transforms/Obfuscation\ncp lib/Transforms/Obfuscation llvm/lib/Transforms/Obfuscation\n```\n然后手动修改8个文件如下：\n\n![image.png](/assets/blogImage/3994053-3d3054a05c96b72a.png)\n\n![image.png](/assets/blogImage/3994053-e76e7039112a47c8.png)\n\n![image.png](/assets/blogImage/3994053-d3c16047c368349d.png)\n\n![image.png](/assets/blogImage/3994053-79683114fe1a73c7.png)\n\n![image.png](/assets/blogImage/3994053-358e0b85dec95f1a.png)\n\n![image.png](/assets/blogImage/3994053-e117da8394ea0169.png)\n\n![image.png](/assets/blogImage/3994053-b6703baf65c2858c.png)\n\n![image.png](/assets/blogImage/3994053-0e44f460d8fc63fa.png)\n\n# 编译\n```\nmkdir build\ncd build\n#如果不想跑测试用例加上-DLLVM_INCLUDE_TESTS=OFF \ncmake -DCMAKE_BUILD_TYPE=Release -DLLVM_CREATE_XCODE_TOOLCHAIN=ON ../obfuscator/\nmake -j7\n```\n# 使用\n\n这里原版提供了3种混淆方式分别是控制流扁平化,指令替换,虚假控制流程,用起来都是加cflags的方式。下面简单说下这几种模式。\n### 控制流扁平化\n这个模式主要是把一些if-else语句，嵌套成do-while语句\n\n-mllvm -fla：激活控制流扁平化\n-mllvm -split：激活基本块分割。在一起使用时改善展平。\n-mllvm -split_num=3：如果激活了传递，则在每个基本块上应用3次。默认值：1\n\n### 指令替换\n这个模式主要用功能上等效但更复杂的指令序列替换标准二元运算符(+ , – , & , | 和 ^)\n\n-mllvm -sub：激活指令替换\n-mllvm -sub_loop=3：如果激活了传递，则在函数上应用3次。默认值：1\n### 虚假控制流程\n这个模式主要嵌套几层判断逻辑，一个简单的运算都会在外面包几层if-else，所以这个模式加上编译速度会慢很多因为要做几层假的逻辑包裹真正有用的代码。\n\n另外说一下这个模式编译的时候要浪费相当长时间包哪几层不是闹得！\n\n-mllvm -bcf：激活虚假控制流程\n-mllvm -bcf_loop=3：如果激活了传递，则在函数上应用3次。默认值：1\n-mllvm -bcf_prob=40：如果激活了传递，基本块将以40％的概率进行模糊处理。默认值：30\n***\n上面说完模式下面讲一下几种使用方式\n### 直接用二进制文件\n直接使用编译的二进制文件`build/bin/clang test.c -o test -mllvm -sub -mllvm -fla -mllvm -bcf`\n### NDK集成\n这里分为工具链的制作和项目里的配置。\n#### 制作Toolchains\n这里以修改最新的ndk r18为例，老的ndk版本比这更容易都在ndk-bundle/toolchains里放着需要修改的文件。\n``` shell\n#复制ndk的toolschain里的llvm\ncp -r Android/sdk/ndk/xx.x.xxxxxx/toolchains/llvm Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm\n#删除prebuilt文件夹下的文件夹的bin和lib64，prebuilt文件夹下根据系统不同命名也不同\nrm -rf Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/bin\nrm -rf Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/lib64\n#把我们之前编译好的ollvm下的bin和lib移到我们刚才删除bin和lib64的目录下\nmv build/bin Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/bin\nmv build/lib Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/lib64\n#复制ndk-bundle⁩/⁨build⁩/⁨core⁩/⁨toolchains的文件夹，这里根据自己对CPU架构的需求自己复制然后修改\ncp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/aarch64-linux-android-clang Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/aarch64-linux-android-clang-ollvm\n\ncp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/arm-linux-androideabi-clang⁩ Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/arm-linux-androideabi-clang-ollvm\n\ncp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/x86_64-clang Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/x86_64-clang-ollvm\n\ncp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/x86-clang-clang⁩ Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/x86-clang-ollvm\n\n```\n最后把xxxxxx-ollvm里的setup.mk文件进行修改\n\n```\nTOOLCHAIN_NAME := ollvm\nTOOLCHAIN_ROOT := $(call get-toolchain-root,$(TOOLCHAIN_NAME))\nTOOLCHAIN_PREFIX := $(TOOLCHAIN_ROOT)/bin\n```\nconfig.mk里是CPU架构,刚才是复制出来的所以不用修改，但如果要添加其他的自定义架构需要严格按照格式规范命名最初的文件夹，如mips的需要添加文件夹mipsel-linux-android-clang-ollvm，setup.mk和刚才的修改一样即可。\n\n修改Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/setup-toolchain.mk里\n\n```\n \t\tifneq ($(words $(TARGET_TOOLCHAIN_LIST)),1)\n        $(call __ndk_error,Expected two items in TARGET_TOOLCHAIN_LIST, \\\n            found \"$(TARGET_TOOLCHAIN_LIST)\")\n    endif\n```\n\n改为\n\n \t\t\tifneq ($(words $(TARGET_TOOLCHAIN_LIST)),2)\n \t    \t\t$(call __ndk_error,Expected two items in TARGET_TOOLCHAIN_LIST, \\\n \t        \t\tfound \"$(TARGET_TOOLCHAIN_LIST)\")\n \t\t\tendif\n\n#### 项目中配置\n\n到了项目里还需要修改两个文件：\n在Android.mk 中添加混淆编译参数\n```\nLOCAL_CFLAGS += -mllvm -sub -mllvm -bcf -mllvm -fla\n```\nApplication.mk中配置NDK_TOOLCHAIN_VERSION\n```\n#根据需要添加\nAPP_ABI := x86 armeabi-v7a x86_64 arm64-v8a mips armeabi mips64\n#使用刚才我们做好的编译链\nNDK_TOOLCHAIN_VERSION := ollvm\n```\n\n### Visual Studio集成\n编译ollvm的时候，使用cmake-gui选择Visual Studio2015或者命令行选择`cmake -G \"Visual Studio 14 2015\" -DCMAKE_BUILD_TYPE=Release ../obfuscator/`\n然后cmake会产生一个visual studio工程，用vs编译即可！\n至于将Visual Studio的默认编译器换成clang编译，参考https://www.ishani.org/projects/ClangVSX/\n\nVisual Studio2015起官方开始支持Clang，具体做法：\n文件->新建->项目->已安装->Visual C++->跨平台->安装Clang with Microsoft CodeGen\nClang是一个完全不同的命令行工具链，这时候可以在工程配置中，平台工具集选项里找到Clang，然后使用ollvm的clang替换该clang即可。\n\n### XCode集成\nXCode里集成需要看版本，XCode10之前和之后是一个分水岭，XCode9之前和之后有一个小配置不同。\n#### XCode10以前\n```\n$ cd /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/SharedSupport/Developer/Library/Xcode/Plug-ins/\n$ sudo cp -r Clang\\ LLVM\\ 1.0.xcplugin/ Obfuscator.xcplugin\n$ cd Obfuscator.xcplugin/Contents/\n$ sudo plutil -convert xml1 Info.plist\n$ sudo vim Info.plist\n```\n修改:\n```\n<string>com.apple.compilers.clang</string> -> <string>com.apple.compilers.obfuscator</string>\n<string>Clang LLVM 1.0 Compiler Xcode Plug-in</string> -> <string>Obfuscator Xcode Plug-in</string>\n```\n执行:\n```\n$ sudo plutil -convert binary1 Info.plist\n$ cd Resources/\n$ sudo mv Clang\\ LLVM\\ 1.0.xcspec Obfuscator.xcspec\n$ sudo vim Obfuscator.xcspec\n```\n修改:\n```\n<key>Description</key>\n<string>Apple LLVM 8.0 compiler</string> -> <string>Obfuscator 4.0 compiler</string>\n<key>ExecPath</key>\n<string>clang</string> -> <string>/path/to/obfuscator_bin/clang</string>\n<key>Identifier</key>\n<string>com.apple.compilers.llvm.clang.1_0</string> -> <string>com.apple.compilers.llvm.obfuscator.4_0</string>\n<key>Name</key>\n<string>Apple LLVM 8.0</string> -> <string>Obfuscator 4.0</string>\n<key>Vendor</key>\n<string>Apple</string> -> <string>HEIG-VD</string>\n<key>Version</key>\n<string>7.0</string> -> <string>4.0</string>\n```\n执行:\n```\n$ cd English.lproj/\n$ sudo mv Apple\\ LLVM\\ 5.1.strings \"Obfuscator 3.4.strings\"\n$ sudo plutil -convert xml1 Obfuscator\\ 3.4.strings\n$ sudo vim Obfuscator\\ 3.4.strings \n```\n修改:\n```\n<key>Description</key>\n<string>Apple LLVM 8.0 compiler</string> -> <string>Obfuscator 4.0 compiler</string>\n<key>Name</key>\n<string>Apple LLVM 8.0</string> -> <string>Obfuscator 4.0</string>\n<key>Vendor</key>\n<string>Apple</string> -> <string>HEIG-VD</string>\n<key>Version</key>\n<string>7.0</string> -> <string>4.0</string>\n```\n执行:\n```\n$ sudo plutil -convert binary1 Obfuscator\\ 3.4.strings\n```\nXCode9之后要设置`Enable Index-While-Building`成`NO`\n\n![image.png](/assets/blogImage/3994053-07f0d5802141a7ae.png)\n\n![image.png](/assets/blogImage/3994053-25ee66acdb89e0d2.png)\n\n#### XCode10之后\nxcode10之后无法使用添加ideplugin的方法，但添加编译链跑的依然可行，另外网上一些人说不能开bitcode，不能提交AppStore，用原版llvm改的ollvm的确有可能出现上述情况，所以我用苹果的swift-llvm改了一版暂时没去试着提交，或许可以，有兴趣的也可以自己下载使用试试[obfuscator](https://github.com/heroims/obfuscator/tree/swift-llvm-5.0)这版，特别备注由于修改没有针对swift部分所以用swift写的代码没混淆，回头有空的话再弄。\n\n创建XCode的toolchain然后把生成的文件夹放到`/Library/Developer/`下\n```\ncd build\nsudo make install-xcode-toolchain\nmv /usr/local/Toolchains  /Library/Developer/\n```\nToolchains下的.xctoolchain文件就是一个文件夹，进去修改info.plist\n```\n<key>CFBundleIdentifier</key>\n<string>org.llvm.7.0.0svn</string> -> <string>org.ollvm-swift.5.0</string>\n```\n修改完在XCode的Toolchains下就会显示相应的名称\n\n然后如图打开XCode选择Toolchaiins\n\n![image.png](/assets/blogImage/3994053-110e3d513c3b7a6a.png)\n\n![image.png](/assets/blogImage/3994053-9d09b7f7d4badfed.png)\n\n![image.png](/assets/blogImage/3994053-b615d4cd5618c465.png)\n\n按这些配置好后就算是可以用了。\n\n# 最后\n简单展示一下混淆后的成果\n\n源码\n![image.png](/assets/blogImage/3994053-09985d3c5f1764f0.png)\n\n反编译未混淆代码\n![image.png](/assets/blogImage/3994053-2624d222fb298087.png)\n\n反编译混淆后代码\n![image.png](/assets/blogImage/3994053-7137938cc9101b7c.png)\n\n\n\n## 扩展：字符串混淆\n原版是没有这功能的本来,[Armariris](https://github.com/GoSSIP-SJTU/Armariris) 提供了这个功能，我这也移植过来了，毕竟不难。\n首先把`StringObfuscation`的.h,.cpp文件放到对应的`Obfuscation`文件夹下，然后分别修改下面的文件。\n![image.png](/assets/blogImage/3994053-49e94a40169f202f.png)\n### 用法\n-mllvm -sobf：编译时候添加选项开启字符串加密\n-mllvm -seed=0xdeadbeaf：指定随机数生成器种子\n### 效果\n看个添加了`-mllvm -sub -mllvm -sobf -mllvm -fla -mllvm -bcf`这么一串的效果。\n\n源码\n\n![image.png](/assets/blogImage/3994053-9d9e6f40bfb9aff4.png)\n\n反编译未混淆代码\n![image.png](/assets/blogImage/3994053-b86496d5219b2efd.png)\n\n反编译混淆后代码\n\n![image.png](/assets/blogImage/3994053-7851701440866c65.png)\n\n\n\n\n\n","source":"_posts/OLLVM代码混淆移植与使用.md","raw":"---\ntitle: OLLVM代码混淆移植与使用\ndate: 2019-01-06 02:09:05\ntags:\n    - LLVM\n    - OLLVM\n    - Clang\n    - 混淆\n    - XCode\n    - NDK\n    - Visual Studio\ntypora-root-url: ../\n---\n# 简介\nOLLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个项目,该项目旨在提供一套开源的针对LLVM的代码混淆工具,以增加对逆向工程的难度。github上地址是https://github.com/obfuscator-llvm/obfuscator ，只不过仅更新到llvm的4.0，2017年开始就没在更新。\n# 移植\nOLLVM如果自己想拿最新版的LLVM和Clang进行移植功能其实也并不是很难，整理一下其实改动很小，接下来将会讲一下移植的方法。\n\n## 个人整理\n先放一下个人移植好的版本地址https://github.com/heroims/obfuscator.git ，个人fork原版后又加入了llvm5.0，6.0，7.0以及swift-llvm5.0的版本，应该能满足大部分需求了，如果有新版本下面的讲解，各位也可以自己动手去下载自己需要的llvm和clang进行移植。git上的提交每次都很独立如下图，方便各位cherry-pick。\n<!-- more -->\n![image.png](/assets/blogImage/3994053-1d4286b24563a1db.png)\n\n\n## 下载LLVM\nllvm地址：https://github.com/llvm-mirror\nswift-llvm地址：https://github.com/apple\n大家可以从上面的地址下载最新的自己需要的llvm和clang\n\n``` shell\n#下载llvm源码\nwget https://codeload.github.com/llvm-mirror/llvm/zip/release_70\nunzip llvm-release_70.zip\nmv llvm-release_70 llvm\n\n\n#下载clang源码\nwget https://codeload.github.com/llvm-mirror/clang/zip/release_70\nunzip clang-release_70.zip\nmv clang-release_70 llvm/tools/clang\n\n```\n##  添加混淆代码\n如果用git的话只需要执行`git cherry-pick xxxx`把xxxx换成对应的我的版本上的提交哈希填上即可。极度推荐用git搞定。\n\n如果手动一点点加的话，第一步就是把我改过的OLLVM文件夹里`/include/llvm/Transforms/Obfuscation`和`/lib/Transforms/Obfuscation`移动到刚才下载好的llvm源码文件夹相同的位置。\n``` shell\ngit clone https://github.com/heroims/obfuscator.git\ncd obfuscator\ngit checkout llvm-7.0\ncp include/llvm/Transforms/Obfuscation llvm/include/llvm/Transforms/Obfuscation\ncp lib/Transforms/Obfuscation llvm/lib/Transforms/Obfuscation\n```\n然后手动修改8个文件如下：\n\n![image.png](/assets/blogImage/3994053-3d3054a05c96b72a.png)\n\n![image.png](/assets/blogImage/3994053-e76e7039112a47c8.png)\n\n![image.png](/assets/blogImage/3994053-d3c16047c368349d.png)\n\n![image.png](/assets/blogImage/3994053-79683114fe1a73c7.png)\n\n![image.png](/assets/blogImage/3994053-358e0b85dec95f1a.png)\n\n![image.png](/assets/blogImage/3994053-e117da8394ea0169.png)\n\n![image.png](/assets/blogImage/3994053-b6703baf65c2858c.png)\n\n![image.png](/assets/blogImage/3994053-0e44f460d8fc63fa.png)\n\n# 编译\n```\nmkdir build\ncd build\n#如果不想跑测试用例加上-DLLVM_INCLUDE_TESTS=OFF \ncmake -DCMAKE_BUILD_TYPE=Release -DLLVM_CREATE_XCODE_TOOLCHAIN=ON ../obfuscator/\nmake -j7\n```\n# 使用\n\n这里原版提供了3种混淆方式分别是控制流扁平化,指令替换,虚假控制流程,用起来都是加cflags的方式。下面简单说下这几种模式。\n### 控制流扁平化\n这个模式主要是把一些if-else语句，嵌套成do-while语句\n\n-mllvm -fla：激活控制流扁平化\n-mllvm -split：激活基本块分割。在一起使用时改善展平。\n-mllvm -split_num=3：如果激活了传递，则在每个基本块上应用3次。默认值：1\n\n### 指令替换\n这个模式主要用功能上等效但更复杂的指令序列替换标准二元运算符(+ , – , & , | 和 ^)\n\n-mllvm -sub：激活指令替换\n-mllvm -sub_loop=3：如果激活了传递，则在函数上应用3次。默认值：1\n### 虚假控制流程\n这个模式主要嵌套几层判断逻辑，一个简单的运算都会在外面包几层if-else，所以这个模式加上编译速度会慢很多因为要做几层假的逻辑包裹真正有用的代码。\n\n另外说一下这个模式编译的时候要浪费相当长时间包哪几层不是闹得！\n\n-mllvm -bcf：激活虚假控制流程\n-mllvm -bcf_loop=3：如果激活了传递，则在函数上应用3次。默认值：1\n-mllvm -bcf_prob=40：如果激活了传递，基本块将以40％的概率进行模糊处理。默认值：30\n***\n上面说完模式下面讲一下几种使用方式\n### 直接用二进制文件\n直接使用编译的二进制文件`build/bin/clang test.c -o test -mllvm -sub -mllvm -fla -mllvm -bcf`\n### NDK集成\n这里分为工具链的制作和项目里的配置。\n#### 制作Toolchains\n这里以修改最新的ndk r18为例，老的ndk版本比这更容易都在ndk-bundle/toolchains里放着需要修改的文件。\n``` shell\n#复制ndk的toolschain里的llvm\ncp -r Android/sdk/ndk/xx.x.xxxxxx/toolchains/llvm Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm\n#删除prebuilt文件夹下的文件夹的bin和lib64，prebuilt文件夹下根据系统不同命名也不同\nrm -rf Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/bin\nrm -rf Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/lib64\n#把我们之前编译好的ollvm下的bin和lib移到我们刚才删除bin和lib64的目录下\nmv build/bin Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/bin\nmv build/lib Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/lib64\n#复制ndk-bundle⁩/⁨build⁩/⁨core⁩/⁨toolchains的文件夹，这里根据自己对CPU架构的需求自己复制然后修改\ncp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/aarch64-linux-android-clang Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/aarch64-linux-android-clang-ollvm\n\ncp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/arm-linux-androideabi-clang⁩ Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/arm-linux-androideabi-clang-ollvm\n\ncp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/x86_64-clang Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/x86_64-clang-ollvm\n\ncp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/x86-clang-clang⁩ Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/x86-clang-ollvm\n\n```\n最后把xxxxxx-ollvm里的setup.mk文件进行修改\n\n```\nTOOLCHAIN_NAME := ollvm\nTOOLCHAIN_ROOT := $(call get-toolchain-root,$(TOOLCHAIN_NAME))\nTOOLCHAIN_PREFIX := $(TOOLCHAIN_ROOT)/bin\n```\nconfig.mk里是CPU架构,刚才是复制出来的所以不用修改，但如果要添加其他的自定义架构需要严格按照格式规范命名最初的文件夹，如mips的需要添加文件夹mipsel-linux-android-clang-ollvm，setup.mk和刚才的修改一样即可。\n\n修改Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/setup-toolchain.mk里\n\n```\n \t\tifneq ($(words $(TARGET_TOOLCHAIN_LIST)),1)\n        $(call __ndk_error,Expected two items in TARGET_TOOLCHAIN_LIST, \\\n            found \"$(TARGET_TOOLCHAIN_LIST)\")\n    endif\n```\n\n改为\n\n \t\t\tifneq ($(words $(TARGET_TOOLCHAIN_LIST)),2)\n \t    \t\t$(call __ndk_error,Expected two items in TARGET_TOOLCHAIN_LIST, \\\n \t        \t\tfound \"$(TARGET_TOOLCHAIN_LIST)\")\n \t\t\tendif\n\n#### 项目中配置\n\n到了项目里还需要修改两个文件：\n在Android.mk 中添加混淆编译参数\n```\nLOCAL_CFLAGS += -mllvm -sub -mllvm -bcf -mllvm -fla\n```\nApplication.mk中配置NDK_TOOLCHAIN_VERSION\n```\n#根据需要添加\nAPP_ABI := x86 armeabi-v7a x86_64 arm64-v8a mips armeabi mips64\n#使用刚才我们做好的编译链\nNDK_TOOLCHAIN_VERSION := ollvm\n```\n\n### Visual Studio集成\n编译ollvm的时候，使用cmake-gui选择Visual Studio2015或者命令行选择`cmake -G \"Visual Studio 14 2015\" -DCMAKE_BUILD_TYPE=Release ../obfuscator/`\n然后cmake会产生一个visual studio工程，用vs编译即可！\n至于将Visual Studio的默认编译器换成clang编译，参考https://www.ishani.org/projects/ClangVSX/\n\nVisual Studio2015起官方开始支持Clang，具体做法：\n文件->新建->项目->已安装->Visual C++->跨平台->安装Clang with Microsoft CodeGen\nClang是一个完全不同的命令行工具链，这时候可以在工程配置中，平台工具集选项里找到Clang，然后使用ollvm的clang替换该clang即可。\n\n### XCode集成\nXCode里集成需要看版本，XCode10之前和之后是一个分水岭，XCode9之前和之后有一个小配置不同。\n#### XCode10以前\n```\n$ cd /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/SharedSupport/Developer/Library/Xcode/Plug-ins/\n$ sudo cp -r Clang\\ LLVM\\ 1.0.xcplugin/ Obfuscator.xcplugin\n$ cd Obfuscator.xcplugin/Contents/\n$ sudo plutil -convert xml1 Info.plist\n$ sudo vim Info.plist\n```\n修改:\n```\n<string>com.apple.compilers.clang</string> -> <string>com.apple.compilers.obfuscator</string>\n<string>Clang LLVM 1.0 Compiler Xcode Plug-in</string> -> <string>Obfuscator Xcode Plug-in</string>\n```\n执行:\n```\n$ sudo plutil -convert binary1 Info.plist\n$ cd Resources/\n$ sudo mv Clang\\ LLVM\\ 1.0.xcspec Obfuscator.xcspec\n$ sudo vim Obfuscator.xcspec\n```\n修改:\n```\n<key>Description</key>\n<string>Apple LLVM 8.0 compiler</string> -> <string>Obfuscator 4.0 compiler</string>\n<key>ExecPath</key>\n<string>clang</string> -> <string>/path/to/obfuscator_bin/clang</string>\n<key>Identifier</key>\n<string>com.apple.compilers.llvm.clang.1_0</string> -> <string>com.apple.compilers.llvm.obfuscator.4_0</string>\n<key>Name</key>\n<string>Apple LLVM 8.0</string> -> <string>Obfuscator 4.0</string>\n<key>Vendor</key>\n<string>Apple</string> -> <string>HEIG-VD</string>\n<key>Version</key>\n<string>7.0</string> -> <string>4.0</string>\n```\n执行:\n```\n$ cd English.lproj/\n$ sudo mv Apple\\ LLVM\\ 5.1.strings \"Obfuscator 3.4.strings\"\n$ sudo plutil -convert xml1 Obfuscator\\ 3.4.strings\n$ sudo vim Obfuscator\\ 3.4.strings \n```\n修改:\n```\n<key>Description</key>\n<string>Apple LLVM 8.0 compiler</string> -> <string>Obfuscator 4.0 compiler</string>\n<key>Name</key>\n<string>Apple LLVM 8.0</string> -> <string>Obfuscator 4.0</string>\n<key>Vendor</key>\n<string>Apple</string> -> <string>HEIG-VD</string>\n<key>Version</key>\n<string>7.0</string> -> <string>4.0</string>\n```\n执行:\n```\n$ sudo plutil -convert binary1 Obfuscator\\ 3.4.strings\n```\nXCode9之后要设置`Enable Index-While-Building`成`NO`\n\n![image.png](/assets/blogImage/3994053-07f0d5802141a7ae.png)\n\n![image.png](/assets/blogImage/3994053-25ee66acdb89e0d2.png)\n\n#### XCode10之后\nxcode10之后无法使用添加ideplugin的方法，但添加编译链跑的依然可行，另外网上一些人说不能开bitcode，不能提交AppStore，用原版llvm改的ollvm的确有可能出现上述情况，所以我用苹果的swift-llvm改了一版暂时没去试着提交，或许可以，有兴趣的也可以自己下载使用试试[obfuscator](https://github.com/heroims/obfuscator/tree/swift-llvm-5.0)这版，特别备注由于修改没有针对swift部分所以用swift写的代码没混淆，回头有空的话再弄。\n\n创建XCode的toolchain然后把生成的文件夹放到`/Library/Developer/`下\n```\ncd build\nsudo make install-xcode-toolchain\nmv /usr/local/Toolchains  /Library/Developer/\n```\nToolchains下的.xctoolchain文件就是一个文件夹，进去修改info.plist\n```\n<key>CFBundleIdentifier</key>\n<string>org.llvm.7.0.0svn</string> -> <string>org.ollvm-swift.5.0</string>\n```\n修改完在XCode的Toolchains下就会显示相应的名称\n\n然后如图打开XCode选择Toolchaiins\n\n![image.png](/assets/blogImage/3994053-110e3d513c3b7a6a.png)\n\n![image.png](/assets/blogImage/3994053-9d09b7f7d4badfed.png)\n\n![image.png](/assets/blogImage/3994053-b615d4cd5618c465.png)\n\n按这些配置好后就算是可以用了。\n\n# 最后\n简单展示一下混淆后的成果\n\n源码\n![image.png](/assets/blogImage/3994053-09985d3c5f1764f0.png)\n\n反编译未混淆代码\n![image.png](/assets/blogImage/3994053-2624d222fb298087.png)\n\n反编译混淆后代码\n![image.png](/assets/blogImage/3994053-7137938cc9101b7c.png)\n\n\n\n## 扩展：字符串混淆\n原版是没有这功能的本来,[Armariris](https://github.com/GoSSIP-SJTU/Armariris) 提供了这个功能，我这也移植过来了，毕竟不难。\n首先把`StringObfuscation`的.h,.cpp文件放到对应的`Obfuscation`文件夹下，然后分别修改下面的文件。\n![image.png](/assets/blogImage/3994053-49e94a40169f202f.png)\n### 用法\n-mllvm -sobf：编译时候添加选项开启字符串加密\n-mllvm -seed=0xdeadbeaf：指定随机数生成器种子\n### 效果\n看个添加了`-mllvm -sub -mllvm -sobf -mllvm -fla -mllvm -bcf`这么一串的效果。\n\n源码\n\n![image.png](/assets/blogImage/3994053-9d9e6f40bfb9aff4.png)\n\n反编译未混淆代码\n![image.png](/assets/blogImage/3994053-b86496d5219b2efd.png)\n\n反编译混淆后代码\n\n![image.png](/assets/blogImage/3994053-7851701440866c65.png)\n\n\n\n\n\n","slug":"OLLVM代码混淆移植与使用","published":1,"updated":"2021-12-27T18:23:12.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfqz000lnhs6o2fpfa8a","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>OLLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个项目,该项目旨在提供一套开源的针对LLVM的代码混淆工具,以增加对逆向工程的难度。github上地址是<a href=\"https://github.com/obfuscator-llvm/obfuscator\" target=\"_blank\" rel=\"noopener\">https://github.com/obfuscator-llvm/obfuscator</a> ，只不过仅更新到llvm的4.0，2017年开始就没在更新。</p>\n<h1 id=\"移植\"><a href=\"#移植\" class=\"headerlink\" title=\"移植\"></a>移植</h1><p>OLLVM如果自己想拿最新版的LLVM和Clang进行移植功能其实也并不是很难，整理一下其实改动很小，接下来将会讲一下移植的方法。</p>\n<h2 id=\"个人整理\"><a href=\"#个人整理\" class=\"headerlink\" title=\"个人整理\"></a>个人整理</h2><p>先放一下个人移植好的版本地址<a href=\"https://github.com/heroims/obfuscator.git\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/obfuscator.git</a> ，个人fork原版后又加入了llvm5.0，6.0，7.0以及swift-llvm5.0的版本，应该能满足大部分需求了，如果有新版本下面的讲解，各位也可以自己动手去下载自己需要的llvm和clang进行移植。git上的提交每次都很独立如下图，方便各位cherry-pick。<br><a id=\"more\"></a><br><img src=\"/assets/blogImage/3994053-1d4286b24563a1db.png\" alt=\"image.png\"></p>\n<h2 id=\"下载LLVM\"><a href=\"#下载LLVM\" class=\"headerlink\" title=\"下载LLVM\"></a>下载LLVM</h2><p>llvm地址：<a href=\"https://github.com/llvm-mirror\" target=\"_blank\" rel=\"noopener\">https://github.com/llvm-mirror</a><br>swift-llvm地址：<a href=\"https://github.com/apple\" target=\"_blank\" rel=\"noopener\">https://github.com/apple</a><br>大家可以从上面的地址下载最新的自己需要的llvm和clang</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>下载llvm源码</span><br><span class=\"line\">wget https://codeload.github.com/llvm-mirror/llvm/zip/release_70</span><br><span class=\"line\">unzip llvm-release_70.zip</span><br><span class=\"line\">mv llvm-release_70 llvm</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>下载clang源码</span><br><span class=\"line\">wget https://codeload.github.com/llvm-mirror/clang/zip/release_70</span><br><span class=\"line\">unzip clang-release_70.zip</span><br><span class=\"line\">mv clang-release_70 llvm/tools/clang</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加混淆代码\"><a href=\"#添加混淆代码\" class=\"headerlink\" title=\"添加混淆代码\"></a>添加混淆代码</h2><p>如果用git的话只需要执行<code>git cherry-pick xxxx</code>把xxxx换成对应的我的版本上的提交哈希填上即可。极度推荐用git搞定。</p>\n<p>如果手动一点点加的话，第一步就是把我改过的OLLVM文件夹里<code>/include/llvm/Transforms/Obfuscation</code>和<code>/lib/Transforms/Obfuscation</code>移动到刚才下载好的llvm源码文件夹相同的位置。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/heroims/obfuscator.git</span><br><span class=\"line\">cd obfuscator</span><br><span class=\"line\">git checkout llvm-7.0</span><br><span class=\"line\">cp include/llvm/Transforms/Obfuscation llvm/include/llvm/Transforms/Obfuscation</span><br><span class=\"line\">cp lib/Transforms/Obfuscation llvm/lib/Transforms/Obfuscation</span><br></pre></td></tr></table></figure></p>\n<p>然后手动修改8个文件如下：</p>\n<p><img src=\"/assets/blogImage/3994053-3d3054a05c96b72a.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-e76e7039112a47c8.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-d3c16047c368349d.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-79683114fe1a73c7.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-358e0b85dec95f1a.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-e117da8394ea0169.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-b6703baf65c2858c.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-0e44f460d8fc63fa.png\" alt=\"image.png\"></p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">#如果不想跑测试用例加上-DLLVM_INCLUDE_TESTS=OFF </span><br><span class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_CREATE_XCODE_TOOLCHAIN=ON ../obfuscator/</span><br><span class=\"line\">make -j7</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>这里原版提供了3种混淆方式分别是控制流扁平化,指令替换,虚假控制流程,用起来都是加cflags的方式。下面简单说下这几种模式。</p>\n<h3 id=\"控制流扁平化\"><a href=\"#控制流扁平化\" class=\"headerlink\" title=\"控制流扁平化\"></a>控制流扁平化</h3><p>这个模式主要是把一些if-else语句，嵌套成do-while语句</p>\n<p>-mllvm -fla：激活控制流扁平化<br>-mllvm -split：激活基本块分割。在一起使用时改善展平。<br>-mllvm -split_num=3：如果激活了传递，则在每个基本块上应用3次。默认值：1</p>\n<h3 id=\"指令替换\"><a href=\"#指令替换\" class=\"headerlink\" title=\"指令替换\"></a>指令替换</h3><p>这个模式主要用功能上等效但更复杂的指令序列替换标准二元运算符(+ , – , &amp; , | 和 ^)</p>\n<p>-mllvm -sub：激活指令替换<br>-mllvm -sub_loop=3：如果激活了传递，则在函数上应用3次。默认值：1</p>\n<h3 id=\"虚假控制流程\"><a href=\"#虚假控制流程\" class=\"headerlink\" title=\"虚假控制流程\"></a>虚假控制流程</h3><p>这个模式主要嵌套几层判断逻辑，一个简单的运算都会在外面包几层if-else，所以这个模式加上编译速度会慢很多因为要做几层假的逻辑包裹真正有用的代码。</p>\n<p>另外说一下这个模式编译的时候要浪费相当长时间包哪几层不是闹得！</p>\n<p>-mllvm -bcf：激活虚假控制流程<br>-mllvm -bcf_loop=3：如果激活了传递，则在函数上应用3次。默认值：1<br>-mllvm -bcf_prob=40：如果激活了传递，基本块将以40％的概率进行模糊处理。默认值：30</p>\n<hr>\n<p>上面说完模式下面讲一下几种使用方式</p>\n<h3 id=\"直接用二进制文件\"><a href=\"#直接用二进制文件\" class=\"headerlink\" title=\"直接用二进制文件\"></a>直接用二进制文件</h3><p>直接使用编译的二进制文件<code>build/bin/clang test.c -o test -mllvm -sub -mllvm -fla -mllvm -bcf</code></p>\n<h3 id=\"NDK集成\"><a href=\"#NDK集成\" class=\"headerlink\" title=\"NDK集成\"></a>NDK集成</h3><p>这里分为工具链的制作和项目里的配置。</p>\n<h4 id=\"制作Toolchains\"><a href=\"#制作Toolchains\" class=\"headerlink\" title=\"制作Toolchains\"></a>制作Toolchains</h4><p>这里以修改最新的ndk r18为例，老的ndk版本比这更容易都在ndk-bundle/toolchains里放着需要修改的文件。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>复制ndk的toolschain里的llvm</span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/toolchains/llvm Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm</span><br><span class=\"line\"><span class=\"meta\">#</span>删除prebuilt文件夹下的文件夹的bin和lib64，prebuilt文件夹下根据系统不同命名也不同</span><br><span class=\"line\">rm -rf Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/bin</span><br><span class=\"line\">rm -rf Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/lib64</span><br><span class=\"line\"><span class=\"meta\">#</span>把我们之前编译好的ollvm下的bin和lib移到我们刚才删除bin和lib64的目录下</span><br><span class=\"line\">mv build/bin Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/bin</span><br><span class=\"line\">mv build/lib Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/lib64</span><br><span class=\"line\"><span class=\"meta\">#</span>复制ndk-bundle⁩/⁨build⁩/⁨core⁩/⁨toolchains的文件夹，这里根据自己对CPU架构的需求自己复制然后修改</span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/aarch64-linux-android-clang Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/aarch64-linux-android-clang-ollvm</span><br><span class=\"line\"></span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/arm-linux-androideabi-clang⁩ Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/arm-linux-androideabi-clang-ollvm</span><br><span class=\"line\"></span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/x86_64-clang Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/x86_64-clang-ollvm</span><br><span class=\"line\"></span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/x86-clang-clang⁩ Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/x86-clang-ollvm</span><br></pre></td></tr></table></figure></p>\n<p>最后把xxxxxx-ollvm里的setup.mk文件进行修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TOOLCHAIN_NAME := ollvm</span><br><span class=\"line\">TOOLCHAIN_ROOT := $(call get-toolchain-root,$(TOOLCHAIN_NAME))</span><br><span class=\"line\">TOOLCHAIN_PREFIX := $(TOOLCHAIN_ROOT)/bin</span><br></pre></td></tr></table></figure>\n<p>config.mk里是CPU架构,刚才是复制出来的所以不用修改，但如果要添加其他的自定义架构需要严格按照格式规范命名最初的文件夹，如mips的需要添加文件夹mipsel-linux-android-clang-ollvm，setup.mk和刚才的修改一样即可。</p>\n<p>修改Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/setup-toolchain.mk里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifneq ($(words $(TARGET_TOOLCHAIN_LIST)),1)</span><br><span class=\"line\">     $(call __ndk_error,Expected two items in TARGET_TOOLCHAIN_LIST, \\</span><br><span class=\"line\">         found &quot;$(TARGET_TOOLCHAIN_LIST)&quot;)</span><br><span class=\"line\"> endif</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<pre><code>ifneq ($(words $(TARGET_TOOLCHAIN_LIST)),2)\n    $(call __ndk_error,Expected two items in TARGET_TOOLCHAIN_LIST, \\\n        found &quot;$(TARGET_TOOLCHAIN_LIST)&quot;)\nendif\n</code></pre><h4 id=\"项目中配置\"><a href=\"#项目中配置\" class=\"headerlink\" title=\"项目中配置\"></a>项目中配置</h4><p>到了项目里还需要修改两个文件：<br>在Android.mk 中添加混淆编译参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_CFLAGS += -mllvm -sub -mllvm -bcf -mllvm -fla</span><br></pre></td></tr></table></figure></p>\n<p>Application.mk中配置NDK_TOOLCHAIN_VERSION<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#根据需要添加</span><br><span class=\"line\">APP_ABI := x86 armeabi-v7a x86_64 arm64-v8a mips armeabi mips64</span><br><span class=\"line\">#使用刚才我们做好的编译链</span><br><span class=\"line\">NDK_TOOLCHAIN_VERSION := ollvm</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Visual-Studio集成\"><a href=\"#Visual-Studio集成\" class=\"headerlink\" title=\"Visual Studio集成\"></a>Visual Studio集成</h3><p>编译ollvm的时候，使用cmake-gui选择Visual Studio2015或者命令行选择<code>cmake -G &quot;Visual Studio 14 2015&quot; -DCMAKE_BUILD_TYPE=Release ../obfuscator/</code><br>然后cmake会产生一个visual studio工程，用vs编译即可！<br>至于将Visual Studio的默认编译器换成clang编译，参考<a href=\"https://www.ishani.org/projects/ClangVSX/\" target=\"_blank\" rel=\"noopener\">https://www.ishani.org/projects/ClangVSX/</a></p>\n<p>Visual Studio2015起官方开始支持Clang，具体做法：<br>文件-&gt;新建-&gt;项目-&gt;已安装-&gt;Visual C++-&gt;跨平台-&gt;安装Clang with Microsoft CodeGen<br>Clang是一个完全不同的命令行工具链，这时候可以在工程配置中，平台工具集选项里找到Clang，然后使用ollvm的clang替换该clang即可。</p>\n<h3 id=\"XCode集成\"><a href=\"#XCode集成\" class=\"headerlink\" title=\"XCode集成\"></a>XCode集成</h3><p>XCode里集成需要看版本，XCode10之前和之后是一个分水岭，XCode9之前和之后有一个小配置不同。</p>\n<h4 id=\"XCode10以前\"><a href=\"#XCode10以前\" class=\"headerlink\" title=\"XCode10以前\"></a>XCode10以前</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/SharedSupport/Developer/Library/Xcode/Plug-ins/</span><br><span class=\"line\">$ sudo cp -r Clang\\ LLVM\\ 1.0.xcplugin/ Obfuscator.xcplugin</span><br><span class=\"line\">$ cd Obfuscator.xcplugin/Contents/</span><br><span class=\"line\">$ sudo plutil -convert xml1 Info.plist</span><br><span class=\"line\">$ sudo vim Info.plist</span><br></pre></td></tr></table></figure>\n<p>修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;string&gt;com.apple.compilers.clang&lt;/string&gt; -&gt; &lt;string&gt;com.apple.compilers.obfuscator&lt;/string&gt;</span><br><span class=\"line\">&lt;string&gt;Clang LLVM 1.0 Compiler Xcode Plug-in&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator Xcode Plug-in&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<p>执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo plutil -convert binary1 Info.plist</span><br><span class=\"line\">$ cd Resources/</span><br><span class=\"line\">$ sudo mv Clang\\ LLVM\\ 1.0.xcspec Obfuscator.xcspec</span><br><span class=\"line\">$ sudo vim Obfuscator.xcspec</span><br></pre></td></tr></table></figure></p>\n<p>修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;key&gt;Description&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple LLVM 8.0 compiler&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator 4.0 compiler&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;ExecPath&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;clang&lt;/string&gt; -&gt; &lt;string&gt;/path/to/obfuscator_bin/clang&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Identifier&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;com.apple.compilers.llvm.clang.1_0&lt;/string&gt; -&gt; &lt;string&gt;com.apple.compilers.llvm.obfuscator.4_0&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Name&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple LLVM 8.0&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator 4.0&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Vendor&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple&lt;/string&gt; -&gt; &lt;string&gt;HEIG-VD&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Version&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;7.0&lt;/string&gt; -&gt; &lt;string&gt;4.0&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<p>执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd English.lproj/</span><br><span class=\"line\">$ sudo mv Apple\\ LLVM\\ 5.1.strings &quot;Obfuscator 3.4.strings&quot;</span><br><span class=\"line\">$ sudo plutil -convert xml1 Obfuscator\\ 3.4.strings</span><br><span class=\"line\">$ sudo vim Obfuscator\\ 3.4.strings</span><br></pre></td></tr></table></figure></p>\n<p>修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;key&gt;Description&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple LLVM 8.0 compiler&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator 4.0 compiler&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Name&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple LLVM 8.0&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator 4.0&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Vendor&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple&lt;/string&gt; -&gt; &lt;string&gt;HEIG-VD&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Version&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;7.0&lt;/string&gt; -&gt; &lt;string&gt;4.0&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<p>执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo plutil -convert binary1 Obfuscator\\ 3.4.strings</span><br></pre></td></tr></table></figure></p>\n<p>XCode9之后要设置<code>Enable Index-While-Building</code>成<code>NO</code></p>\n<p><img src=\"/assets/blogImage/3994053-07f0d5802141a7ae.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-25ee66acdb89e0d2.png\" alt=\"image.png\"></p>\n<h4 id=\"XCode10之后\"><a href=\"#XCode10之后\" class=\"headerlink\" title=\"XCode10之后\"></a>XCode10之后</h4><p>xcode10之后无法使用添加ideplugin的方法，但添加编译链跑的依然可行，另外网上一些人说不能开bitcode，不能提交AppStore，用原版llvm改的ollvm的确有可能出现上述情况，所以我用苹果的swift-llvm改了一版暂时没去试着提交，或许可以，有兴趣的也可以自己下载使用试试<a href=\"https://github.com/heroims/obfuscator/tree/swift-llvm-5.0\" target=\"_blank\" rel=\"noopener\">obfuscator</a>这版，特别备注由于修改没有针对swift部分所以用swift写的代码没混淆，回头有空的话再弄。</p>\n<p>创建XCode的toolchain然后把生成的文件夹放到<code>/Library/Developer/</code>下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd build</span><br><span class=\"line\">sudo make install-xcode-toolchain</span><br><span class=\"line\">mv /usr/local/Toolchains  /Library/Developer/</span><br></pre></td></tr></table></figure></p>\n<p>Toolchains下的.xctoolchain文件就是一个文件夹，进去修改info.plist<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;key&gt;CFBundleIdentifier&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;org.llvm.7.0.0svn&lt;/string&gt; -&gt; &lt;string&gt;org.ollvm-swift.5.0&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<p>修改完在XCode的Toolchains下就会显示相应的名称</p>\n<p>然后如图打开XCode选择Toolchaiins</p>\n<p><img src=\"/assets/blogImage/3994053-110e3d513c3b7a6a.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-9d09b7f7d4badfed.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-b615d4cd5618c465.png\" alt=\"image.png\"></p>\n<p>按这些配置好后就算是可以用了。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>简单展示一下混淆后的成果</p>\n<p>源码<br><img src=\"/assets/blogImage/3994053-09985d3c5f1764f0.png\" alt=\"image.png\"></p>\n<p>反编译未混淆代码<br><img src=\"/assets/blogImage/3994053-2624d222fb298087.png\" alt=\"image.png\"></p>\n<p>反编译混淆后代码<br><img src=\"/assets/blogImage/3994053-7137938cc9101b7c.png\" alt=\"image.png\"></p>\n<h2 id=\"扩展：字符串混淆\"><a href=\"#扩展：字符串混淆\" class=\"headerlink\" title=\"扩展：字符串混淆\"></a>扩展：字符串混淆</h2><p>原版是没有这功能的本来,<a href=\"https://github.com/GoSSIP-SJTU/Armariris\" target=\"_blank\" rel=\"noopener\">Armariris</a> 提供了这个功能，我这也移植过来了，毕竟不难。<br>首先把<code>StringObfuscation</code>的.h,.cpp文件放到对应的<code>Obfuscation</code>文件夹下，然后分别修改下面的文件。<br><img src=\"/assets/blogImage/3994053-49e94a40169f202f.png\" alt=\"image.png\"></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>-mllvm -sobf：编译时候添加选项开启字符串加密<br>-mllvm -seed=0xdeadbeaf：指定随机数生成器种子</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>看个添加了<code>-mllvm -sub -mllvm -sobf -mllvm -fla -mllvm -bcf</code>这么一串的效果。</p>\n<p>源码</p>\n<p><img src=\"/assets/blogImage/3994053-9d9e6f40bfb9aff4.png\" alt=\"image.png\"></p>\n<p>反编译未混淆代码<br><img src=\"/assets/blogImage/3994053-b86496d5219b2efd.png\" alt=\"image.png\"></p>\n<p>反编译混淆后代码</p>\n<p><img src=\"/assets/blogImage/3994053-7851701440866c65.png\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>OLLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个项目,该项目旨在提供一套开源的针对LLVM的代码混淆工具,以增加对逆向工程的难度。github上地址是<a href=\"https://github.com/obfuscator-llvm/obfuscator\" target=\"_blank\" rel=\"noopener\">https://github.com/obfuscator-llvm/obfuscator</a> ，只不过仅更新到llvm的4.0，2017年开始就没在更新。</p>\n<h1 id=\"移植\"><a href=\"#移植\" class=\"headerlink\" title=\"移植\"></a>移植</h1><p>OLLVM如果自己想拿最新版的LLVM和Clang进行移植功能其实也并不是很难，整理一下其实改动很小，接下来将会讲一下移植的方法。</p>\n<h2 id=\"个人整理\"><a href=\"#个人整理\" class=\"headerlink\" title=\"个人整理\"></a>个人整理</h2><p>先放一下个人移植好的版本地址<a href=\"https://github.com/heroims/obfuscator.git\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/obfuscator.git</a> ，个人fork原版后又加入了llvm5.0，6.0，7.0以及swift-llvm5.0的版本，应该能满足大部分需求了，如果有新版本下面的讲解，各位也可以自己动手去下载自己需要的llvm和clang进行移植。git上的提交每次都很独立如下图，方便各位cherry-pick。<br>","more":"<br><img src=\"/assets/blogImage/3994053-1d4286b24563a1db.png\" alt=\"image.png\"></p>\n<h2 id=\"下载LLVM\"><a href=\"#下载LLVM\" class=\"headerlink\" title=\"下载LLVM\"></a>下载LLVM</h2><p>llvm地址：<a href=\"https://github.com/llvm-mirror\" target=\"_blank\" rel=\"noopener\">https://github.com/llvm-mirror</a><br>swift-llvm地址：<a href=\"https://github.com/apple\" target=\"_blank\" rel=\"noopener\">https://github.com/apple</a><br>大家可以从上面的地址下载最新的自己需要的llvm和clang</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>下载llvm源码</span><br><span class=\"line\">wget https://codeload.github.com/llvm-mirror/llvm/zip/release_70</span><br><span class=\"line\">unzip llvm-release_70.zip</span><br><span class=\"line\">mv llvm-release_70 llvm</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>下载clang源码</span><br><span class=\"line\">wget https://codeload.github.com/llvm-mirror/clang/zip/release_70</span><br><span class=\"line\">unzip clang-release_70.zip</span><br><span class=\"line\">mv clang-release_70 llvm/tools/clang</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加混淆代码\"><a href=\"#添加混淆代码\" class=\"headerlink\" title=\"添加混淆代码\"></a>添加混淆代码</h2><p>如果用git的话只需要执行<code>git cherry-pick xxxx</code>把xxxx换成对应的我的版本上的提交哈希填上即可。极度推荐用git搞定。</p>\n<p>如果手动一点点加的话，第一步就是把我改过的OLLVM文件夹里<code>/include/llvm/Transforms/Obfuscation</code>和<code>/lib/Transforms/Obfuscation</code>移动到刚才下载好的llvm源码文件夹相同的位置。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/heroims/obfuscator.git</span><br><span class=\"line\">cd obfuscator</span><br><span class=\"line\">git checkout llvm-7.0</span><br><span class=\"line\">cp include/llvm/Transforms/Obfuscation llvm/include/llvm/Transforms/Obfuscation</span><br><span class=\"line\">cp lib/Transforms/Obfuscation llvm/lib/Transforms/Obfuscation</span><br></pre></td></tr></table></figure></p>\n<p>然后手动修改8个文件如下：</p>\n<p><img src=\"/assets/blogImage/3994053-3d3054a05c96b72a.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-e76e7039112a47c8.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-d3c16047c368349d.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-79683114fe1a73c7.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-358e0b85dec95f1a.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-e117da8394ea0169.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-b6703baf65c2858c.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-0e44f460d8fc63fa.png\" alt=\"image.png\"></p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">#如果不想跑测试用例加上-DLLVM_INCLUDE_TESTS=OFF </span><br><span class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_CREATE_XCODE_TOOLCHAIN=ON ../obfuscator/</span><br><span class=\"line\">make -j7</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>这里原版提供了3种混淆方式分别是控制流扁平化,指令替换,虚假控制流程,用起来都是加cflags的方式。下面简单说下这几种模式。</p>\n<h3 id=\"控制流扁平化\"><a href=\"#控制流扁平化\" class=\"headerlink\" title=\"控制流扁平化\"></a>控制流扁平化</h3><p>这个模式主要是把一些if-else语句，嵌套成do-while语句</p>\n<p>-mllvm -fla：激活控制流扁平化<br>-mllvm -split：激活基本块分割。在一起使用时改善展平。<br>-mllvm -split_num=3：如果激活了传递，则在每个基本块上应用3次。默认值：1</p>\n<h3 id=\"指令替换\"><a href=\"#指令替换\" class=\"headerlink\" title=\"指令替换\"></a>指令替换</h3><p>这个模式主要用功能上等效但更复杂的指令序列替换标准二元运算符(+ , – , &amp; , | 和 ^)</p>\n<p>-mllvm -sub：激活指令替换<br>-mllvm -sub_loop=3：如果激活了传递，则在函数上应用3次。默认值：1</p>\n<h3 id=\"虚假控制流程\"><a href=\"#虚假控制流程\" class=\"headerlink\" title=\"虚假控制流程\"></a>虚假控制流程</h3><p>这个模式主要嵌套几层判断逻辑，一个简单的运算都会在外面包几层if-else，所以这个模式加上编译速度会慢很多因为要做几层假的逻辑包裹真正有用的代码。</p>\n<p>另外说一下这个模式编译的时候要浪费相当长时间包哪几层不是闹得！</p>\n<p>-mllvm -bcf：激活虚假控制流程<br>-mllvm -bcf_loop=3：如果激活了传递，则在函数上应用3次。默认值：1<br>-mllvm -bcf_prob=40：如果激活了传递，基本块将以40％的概率进行模糊处理。默认值：30</p>\n<hr>\n<p>上面说完模式下面讲一下几种使用方式</p>\n<h3 id=\"直接用二进制文件\"><a href=\"#直接用二进制文件\" class=\"headerlink\" title=\"直接用二进制文件\"></a>直接用二进制文件</h3><p>直接使用编译的二进制文件<code>build/bin/clang test.c -o test -mllvm -sub -mllvm -fla -mllvm -bcf</code></p>\n<h3 id=\"NDK集成\"><a href=\"#NDK集成\" class=\"headerlink\" title=\"NDK集成\"></a>NDK集成</h3><p>这里分为工具链的制作和项目里的配置。</p>\n<h4 id=\"制作Toolchains\"><a href=\"#制作Toolchains\" class=\"headerlink\" title=\"制作Toolchains\"></a>制作Toolchains</h4><p>这里以修改最新的ndk r18为例，老的ndk版本比这更容易都在ndk-bundle/toolchains里放着需要修改的文件。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>复制ndk的toolschain里的llvm</span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/toolchains/llvm Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm</span><br><span class=\"line\"><span class=\"meta\">#</span>删除prebuilt文件夹下的文件夹的bin和lib64，prebuilt文件夹下根据系统不同命名也不同</span><br><span class=\"line\">rm -rf Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/bin</span><br><span class=\"line\">rm -rf Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/lib64</span><br><span class=\"line\"><span class=\"meta\">#</span>把我们之前编译好的ollvm下的bin和lib移到我们刚才删除bin和lib64的目录下</span><br><span class=\"line\">mv build/bin Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/bin</span><br><span class=\"line\">mv build/lib Android/sdk/ndk/xx.x.xxxxxx/toolchains/ollvm/prebuilt/darwin-x86_64/lib64</span><br><span class=\"line\"><span class=\"meta\">#</span>复制ndk-bundle⁩/⁨build⁩/⁨core⁩/⁨toolchains的文件夹，这里根据自己对CPU架构的需求自己复制然后修改</span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/aarch64-linux-android-clang Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/aarch64-linux-android-clang-ollvm</span><br><span class=\"line\"></span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/arm-linux-androideabi-clang⁩ Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/arm-linux-androideabi-clang-ollvm</span><br><span class=\"line\"></span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/x86_64-clang Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/x86_64-clang-ollvm</span><br><span class=\"line\"></span><br><span class=\"line\">cp -r Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/x86-clang-clang⁩ Android/sdk/ndk/xx.x.xxxxxx/build⁩/⁨core⁩/⁨toolchains/x86-clang-ollvm</span><br></pre></td></tr></table></figure></p>\n<p>最后把xxxxxx-ollvm里的setup.mk文件进行修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TOOLCHAIN_NAME := ollvm</span><br><span class=\"line\">TOOLCHAIN_ROOT := $(call get-toolchain-root,$(TOOLCHAIN_NAME))</span><br><span class=\"line\">TOOLCHAIN_PREFIX := $(TOOLCHAIN_ROOT)/bin</span><br></pre></td></tr></table></figure>\n<p>config.mk里是CPU架构,刚才是复制出来的所以不用修改，但如果要添加其他的自定义架构需要严格按照格式规范命名最初的文件夹，如mips的需要添加文件夹mipsel-linux-android-clang-ollvm，setup.mk和刚才的修改一样即可。</p>\n<p>修改Android/sdk/ndk/xx.x.xxxxxx/⁨build⁩/⁨core⁩/⁨toolchains/setup-toolchain.mk里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifneq ($(words $(TARGET_TOOLCHAIN_LIST)),1)</span><br><span class=\"line\">     $(call __ndk_error,Expected two items in TARGET_TOOLCHAIN_LIST, \\</span><br><span class=\"line\">         found &quot;$(TARGET_TOOLCHAIN_LIST)&quot;)</span><br><span class=\"line\"> endif</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<pre><code>ifneq ($(words $(TARGET_TOOLCHAIN_LIST)),2)\n    $(call __ndk_error,Expected two items in TARGET_TOOLCHAIN_LIST, \\\n        found &quot;$(TARGET_TOOLCHAIN_LIST)&quot;)\nendif\n</code></pre><h4 id=\"项目中配置\"><a href=\"#项目中配置\" class=\"headerlink\" title=\"项目中配置\"></a>项目中配置</h4><p>到了项目里还需要修改两个文件：<br>在Android.mk 中添加混淆编译参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_CFLAGS += -mllvm -sub -mllvm -bcf -mllvm -fla</span><br></pre></td></tr></table></figure></p>\n<p>Application.mk中配置NDK_TOOLCHAIN_VERSION<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#根据需要添加</span><br><span class=\"line\">APP_ABI := x86 armeabi-v7a x86_64 arm64-v8a mips armeabi mips64</span><br><span class=\"line\">#使用刚才我们做好的编译链</span><br><span class=\"line\">NDK_TOOLCHAIN_VERSION := ollvm</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Visual-Studio集成\"><a href=\"#Visual-Studio集成\" class=\"headerlink\" title=\"Visual Studio集成\"></a>Visual Studio集成</h3><p>编译ollvm的时候，使用cmake-gui选择Visual Studio2015或者命令行选择<code>cmake -G &quot;Visual Studio 14 2015&quot; -DCMAKE_BUILD_TYPE=Release ../obfuscator/</code><br>然后cmake会产生一个visual studio工程，用vs编译即可！<br>至于将Visual Studio的默认编译器换成clang编译，参考<a href=\"https://www.ishani.org/projects/ClangVSX/\" target=\"_blank\" rel=\"noopener\">https://www.ishani.org/projects/ClangVSX/</a></p>\n<p>Visual Studio2015起官方开始支持Clang，具体做法：<br>文件-&gt;新建-&gt;项目-&gt;已安装-&gt;Visual C++-&gt;跨平台-&gt;安装Clang with Microsoft CodeGen<br>Clang是一个完全不同的命令行工具链，这时候可以在工程配置中，平台工具集选项里找到Clang，然后使用ollvm的clang替换该clang即可。</p>\n<h3 id=\"XCode集成\"><a href=\"#XCode集成\" class=\"headerlink\" title=\"XCode集成\"></a>XCode集成</h3><p>XCode里集成需要看版本，XCode10之前和之后是一个分水岭，XCode9之前和之后有一个小配置不同。</p>\n<h4 id=\"XCode10以前\"><a href=\"#XCode10以前\" class=\"headerlink\" title=\"XCode10以前\"></a>XCode10以前</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/SharedSupport/Developer/Library/Xcode/Plug-ins/</span><br><span class=\"line\">$ sudo cp -r Clang\\ LLVM\\ 1.0.xcplugin/ Obfuscator.xcplugin</span><br><span class=\"line\">$ cd Obfuscator.xcplugin/Contents/</span><br><span class=\"line\">$ sudo plutil -convert xml1 Info.plist</span><br><span class=\"line\">$ sudo vim Info.plist</span><br></pre></td></tr></table></figure>\n<p>修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;string&gt;com.apple.compilers.clang&lt;/string&gt; -&gt; &lt;string&gt;com.apple.compilers.obfuscator&lt;/string&gt;</span><br><span class=\"line\">&lt;string&gt;Clang LLVM 1.0 Compiler Xcode Plug-in&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator Xcode Plug-in&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<p>执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo plutil -convert binary1 Info.plist</span><br><span class=\"line\">$ cd Resources/</span><br><span class=\"line\">$ sudo mv Clang\\ LLVM\\ 1.0.xcspec Obfuscator.xcspec</span><br><span class=\"line\">$ sudo vim Obfuscator.xcspec</span><br></pre></td></tr></table></figure></p>\n<p>修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;key&gt;Description&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple LLVM 8.0 compiler&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator 4.0 compiler&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;ExecPath&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;clang&lt;/string&gt; -&gt; &lt;string&gt;/path/to/obfuscator_bin/clang&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Identifier&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;com.apple.compilers.llvm.clang.1_0&lt;/string&gt; -&gt; &lt;string&gt;com.apple.compilers.llvm.obfuscator.4_0&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Name&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple LLVM 8.0&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator 4.0&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Vendor&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple&lt;/string&gt; -&gt; &lt;string&gt;HEIG-VD&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Version&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;7.0&lt;/string&gt; -&gt; &lt;string&gt;4.0&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<p>执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd English.lproj/</span><br><span class=\"line\">$ sudo mv Apple\\ LLVM\\ 5.1.strings &quot;Obfuscator 3.4.strings&quot;</span><br><span class=\"line\">$ sudo plutil -convert xml1 Obfuscator\\ 3.4.strings</span><br><span class=\"line\">$ sudo vim Obfuscator\\ 3.4.strings</span><br></pre></td></tr></table></figure></p>\n<p>修改:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;key&gt;Description&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple LLVM 8.0 compiler&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator 4.0 compiler&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Name&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple LLVM 8.0&lt;/string&gt; -&gt; &lt;string&gt;Obfuscator 4.0&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Vendor&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;Apple&lt;/string&gt; -&gt; &lt;string&gt;HEIG-VD&lt;/string&gt;</span><br><span class=\"line\">&lt;key&gt;Version&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;7.0&lt;/string&gt; -&gt; &lt;string&gt;4.0&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<p>执行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo plutil -convert binary1 Obfuscator\\ 3.4.strings</span><br></pre></td></tr></table></figure></p>\n<p>XCode9之后要设置<code>Enable Index-While-Building</code>成<code>NO</code></p>\n<p><img src=\"/assets/blogImage/3994053-07f0d5802141a7ae.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-25ee66acdb89e0d2.png\" alt=\"image.png\"></p>\n<h4 id=\"XCode10之后\"><a href=\"#XCode10之后\" class=\"headerlink\" title=\"XCode10之后\"></a>XCode10之后</h4><p>xcode10之后无法使用添加ideplugin的方法，但添加编译链跑的依然可行，另外网上一些人说不能开bitcode，不能提交AppStore，用原版llvm改的ollvm的确有可能出现上述情况，所以我用苹果的swift-llvm改了一版暂时没去试着提交，或许可以，有兴趣的也可以自己下载使用试试<a href=\"https://github.com/heroims/obfuscator/tree/swift-llvm-5.0\" target=\"_blank\" rel=\"noopener\">obfuscator</a>这版，特别备注由于修改没有针对swift部分所以用swift写的代码没混淆，回头有空的话再弄。</p>\n<p>创建XCode的toolchain然后把生成的文件夹放到<code>/Library/Developer/</code>下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd build</span><br><span class=\"line\">sudo make install-xcode-toolchain</span><br><span class=\"line\">mv /usr/local/Toolchains  /Library/Developer/</span><br></pre></td></tr></table></figure></p>\n<p>Toolchains下的.xctoolchain文件就是一个文件夹，进去修改info.plist<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;key&gt;CFBundleIdentifier&lt;/key&gt;</span><br><span class=\"line\">&lt;string&gt;org.llvm.7.0.0svn&lt;/string&gt; -&gt; &lt;string&gt;org.ollvm-swift.5.0&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<p>修改完在XCode的Toolchains下就会显示相应的名称</p>\n<p>然后如图打开XCode选择Toolchaiins</p>\n<p><img src=\"/assets/blogImage/3994053-110e3d513c3b7a6a.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-9d09b7f7d4badfed.png\" alt=\"image.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-b615d4cd5618c465.png\" alt=\"image.png\"></p>\n<p>按这些配置好后就算是可以用了。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>简单展示一下混淆后的成果</p>\n<p>源码<br><img src=\"/assets/blogImage/3994053-09985d3c5f1764f0.png\" alt=\"image.png\"></p>\n<p>反编译未混淆代码<br><img src=\"/assets/blogImage/3994053-2624d222fb298087.png\" alt=\"image.png\"></p>\n<p>反编译混淆后代码<br><img src=\"/assets/blogImage/3994053-7137938cc9101b7c.png\" alt=\"image.png\"></p>\n<h2 id=\"扩展：字符串混淆\"><a href=\"#扩展：字符串混淆\" class=\"headerlink\" title=\"扩展：字符串混淆\"></a>扩展：字符串混淆</h2><p>原版是没有这功能的本来,<a href=\"https://github.com/GoSSIP-SJTU/Armariris\" target=\"_blank\" rel=\"noopener\">Armariris</a> 提供了这个功能，我这也移植过来了，毕竟不难。<br>首先把<code>StringObfuscation</code>的.h,.cpp文件放到对应的<code>Obfuscation</code>文件夹下，然后分别修改下面的文件。<br><img src=\"/assets/blogImage/3994053-49e94a40169f202f.png\" alt=\"image.png\"></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>-mllvm -sobf：编译时候添加选项开启字符串加密<br>-mllvm -seed=0xdeadbeaf：指定随机数生成器种子</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>看个添加了<code>-mllvm -sub -mllvm -sobf -mllvm -fla -mllvm -bcf</code>这么一串的效果。</p>\n<p>源码</p>\n<p><img src=\"/assets/blogImage/3994053-9d9e6f40bfb9aff4.png\" alt=\"image.png\"></p>\n<p>反编译未混淆代码<br><img src=\"/assets/blogImage/3994053-b86496d5219b2efd.png\" alt=\"image.png\"></p>\n<p>反编译混淆后代码</p>\n<p><img src=\"/assets/blogImage/3994053-7851701440866c65.png\" alt=\"image.png\"></p>"},{"title":"Pods的static_framework使用感受","date":"2017-09-29T08:39:56.000Z","_content":"# 前言\nCocoaPods终于出1.4.0.beta.1了，终于能用用static_framework这个属性了，拯救世界的属性啊！\n### 使用场景\n封装pod依赖另一个有.a或Framework的pod，然后用`use_frameworks!`来动态库模式pod。那情况原来只能把那有.a或Framework的pod直接代码都放自己pod里，不能dependency，当然项目没用任何Swift其实就没事因为用不到`use_frameworks!`。还有就是Pod里用了资源文件的，因为用了资源文件和`use_frameworks!`，最终生成资源可都在.app的Frameworks/xxxxx.framework/里，如果第三方代码处理了这种情况还好，不过现在看几乎没有几个做这个处理的，都没想过动态库带来的改变也是醉了，资源都会找不到！使用静态库模式则会拍平就没这问题了。\n\n# 用法\n下面来个例子，封装统计模块需要依赖Google统计，Fabric crash统计，现在有了这属性直接如下就完成了依赖关系\n```\n#Google 统计\ns.ios.dependency      'Google/Analytics'\n#Fabric crash统计\ns.ios.dependency      'Fabric'\ns.ios.dependency      'Crashlytics'\n#指定Pod为静态库模式\ns.static_framework      = true\n```\n\n### 注意事项\n- 不能在当前pod里的`subpecs`中使用\n- Framework受限头文件引用模式\n\n<!-- more -->\n这里举依赖Google的例子主要是人家`podspec`写的好，还有就是`static_framework`属性并不是万能的！遇到环信，友盟分享这类就废，还有其他情况也不行。\n\n\n\n下面说说这类情况，第一个`static_framework`不能放到`subpecs`里，这个倒是不难解决，可以为这个单建一个pod作为依赖的中间件，这样要创建的pod就可以不使用`static_framework`属性了依赖使用了这个属性里面只有dependency的中间件。\n第二种就是没救的，典型范例环信和友盟分享，这俩都是对Pod里的Framework认知不足，不过也有部分原因在OC没正经命名空间。\n没问题可用`static_framework`的Framework的`podspec`写法如下\n```\ns.ios.source_files        = 'xxxx.framework/Headers/*.h'\ns.ios.public_header_files = 'xxxx.framework/Headers/*.h'\ns.ios.vendored_frameworks = 'xxxx.framework'\n```\n而且内部对xxxx.framework的文件引用只能`#import \"xxx.h\"`不能`#import <xxxx/xxx.h>`，否则头文件找不到，静态库模式这情况没办法，还有IOS本来Framework就都不是正经的动态库有这问题并不奇怪，同样也因此没法通过Framework隔离同名文件了，没有命名空间概念隔离的情况再现，这就是之前说的OC的一部分原因，所以才会很多都写`#import <xxxx/xxx.h>`感觉踏实。所以现在就尴尬了，国内很多支持pod的sdk是Framework都是直接`s.ios.vendored_frameworks = 'xxxx.framework'`，所以其实这些sdk其实真的该考虑pod的Framework单独处理，给人扔项目里直接用的保持`#import <xxxx/xxx.h>`风格写法没问题，pod很多时候就是为了管理各种依赖关系，至于是动态库还是静态库编译都是看项目本身需要，封装pod的时候应该必须保持`#import \"xxx.h\"`写法才ok，另外.a在pod里可能更加讨喜吧。\n\n","source":"_posts/Pods的static-framework使用感受.md","raw":"---\ntitle: Pods的static_framework使用感受\ndate: 2017-09-29 16:39:56\ntags:\n    - IOS\n    - CocoaPods\n    - 动态库\n    - Framework\n    - 静态库\n---\n# 前言\nCocoaPods终于出1.4.0.beta.1了，终于能用用static_framework这个属性了，拯救世界的属性啊！\n### 使用场景\n封装pod依赖另一个有.a或Framework的pod，然后用`use_frameworks!`来动态库模式pod。那情况原来只能把那有.a或Framework的pod直接代码都放自己pod里，不能dependency，当然项目没用任何Swift其实就没事因为用不到`use_frameworks!`。还有就是Pod里用了资源文件的，因为用了资源文件和`use_frameworks!`，最终生成资源可都在.app的Frameworks/xxxxx.framework/里，如果第三方代码处理了这种情况还好，不过现在看几乎没有几个做这个处理的，都没想过动态库带来的改变也是醉了，资源都会找不到！使用静态库模式则会拍平就没这问题了。\n\n# 用法\n下面来个例子，封装统计模块需要依赖Google统计，Fabric crash统计，现在有了这属性直接如下就完成了依赖关系\n```\n#Google 统计\ns.ios.dependency      'Google/Analytics'\n#Fabric crash统计\ns.ios.dependency      'Fabric'\ns.ios.dependency      'Crashlytics'\n#指定Pod为静态库模式\ns.static_framework      = true\n```\n\n### 注意事项\n- 不能在当前pod里的`subpecs`中使用\n- Framework受限头文件引用模式\n\n<!-- more -->\n这里举依赖Google的例子主要是人家`podspec`写的好，还有就是`static_framework`属性并不是万能的！遇到环信，友盟分享这类就废，还有其他情况也不行。\n\n\n\n下面说说这类情况，第一个`static_framework`不能放到`subpecs`里，这个倒是不难解决，可以为这个单建一个pod作为依赖的中间件，这样要创建的pod就可以不使用`static_framework`属性了依赖使用了这个属性里面只有dependency的中间件。\n第二种就是没救的，典型范例环信和友盟分享，这俩都是对Pod里的Framework认知不足，不过也有部分原因在OC没正经命名空间。\n没问题可用`static_framework`的Framework的`podspec`写法如下\n```\ns.ios.source_files        = 'xxxx.framework/Headers/*.h'\ns.ios.public_header_files = 'xxxx.framework/Headers/*.h'\ns.ios.vendored_frameworks = 'xxxx.framework'\n```\n而且内部对xxxx.framework的文件引用只能`#import \"xxx.h\"`不能`#import <xxxx/xxx.h>`，否则头文件找不到，静态库模式这情况没办法，还有IOS本来Framework就都不是正经的动态库有这问题并不奇怪，同样也因此没法通过Framework隔离同名文件了，没有命名空间概念隔离的情况再现，这就是之前说的OC的一部分原因，所以才会很多都写`#import <xxxx/xxx.h>`感觉踏实。所以现在就尴尬了，国内很多支持pod的sdk是Framework都是直接`s.ios.vendored_frameworks = 'xxxx.framework'`，所以其实这些sdk其实真的该考虑pod的Framework单独处理，给人扔项目里直接用的保持`#import <xxxx/xxx.h>`风格写法没问题，pod很多时候就是为了管理各种依赖关系，至于是动态库还是静态库编译都是看项目本身需要，封装pod的时候应该必须保持`#import \"xxx.h\"`写法才ok，另外.a在pod里可能更加讨喜吧。\n\n","slug":"Pods的static-framework使用感受","published":1,"updated":"2021-07-08T09:20:31.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfr0000nnhs67ybijnvr","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>CocoaPods终于出1.4.0.beta.1了，终于能用用static_framework这个属性了，拯救世界的属性啊！</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>封装pod依赖另一个有.a或Framework的pod，然后用<code>use_frameworks!</code>来动态库模式pod。那情况原来只能把那有.a或Framework的pod直接代码都放自己pod里，不能dependency，当然项目没用任何Swift其实就没事因为用不到<code>use_frameworks!</code>。还有就是Pod里用了资源文件的，因为用了资源文件和<code>use_frameworks!</code>，最终生成资源可都在.app的Frameworks/xxxxx.framework/里，如果第三方代码处理了这种情况还好，不过现在看几乎没有几个做这个处理的，都没想过动态库带来的改变也是醉了，资源都会找不到！使用静态库模式则会拍平就没这问题了。</p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>下面来个例子，封装统计模块需要依赖Google统计，Fabric crash统计，现在有了这属性直接如下就完成了依赖关系<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Google 统计</span><br><span class=\"line\">s.ios.dependency      &apos;Google/Analytics&apos;</span><br><span class=\"line\">#Fabric crash统计</span><br><span class=\"line\">s.ios.dependency      &apos;Fabric&apos;</span><br><span class=\"line\">s.ios.dependency      &apos;Crashlytics&apos;</span><br><span class=\"line\">#指定Pod为静态库模式</span><br><span class=\"line\">s.static_framework      = true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>不能在当前pod里的<code>subpecs</code>中使用</li>\n<li>Framework受限头文件引用模式</li>\n</ul>\n<a id=\"more\"></a>\n<p>这里举依赖Google的例子主要是人家<code>podspec</code>写的好，还有就是<code>static_framework</code>属性并不是万能的！遇到环信，友盟分享这类就废，还有其他情况也不行。</p>\n<p>下面说说这类情况，第一个<code>static_framework</code>不能放到<code>subpecs</code>里，这个倒是不难解决，可以为这个单建一个pod作为依赖的中间件，这样要创建的pod就可以不使用<code>static_framework</code>属性了依赖使用了这个属性里面只有dependency的中间件。<br>第二种就是没救的，典型范例环信和友盟分享，这俩都是对Pod里的Framework认知不足，不过也有部分原因在OC没正经命名空间。<br>没问题可用<code>static_framework</code>的Framework的<code>podspec</code>写法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.ios.source_files        = &apos;xxxx.framework/Headers/*.h&apos;</span><br><span class=\"line\">s.ios.public_header_files = &apos;xxxx.framework/Headers/*.h&apos;</span><br><span class=\"line\">s.ios.vendored_frameworks = &apos;xxxx.framework&apos;</span><br></pre></td></tr></table></figure></p>\n<p>而且内部对xxxx.framework的文件引用只能<code>#import &quot;xxx.h&quot;</code>不能<code>#import &lt;xxxx/xxx.h&gt;</code>，否则头文件找不到，静态库模式这情况没办法，还有IOS本来Framework就都不是正经的动态库有这问题并不奇怪，同样也因此没法通过Framework隔离同名文件了，没有命名空间概念隔离的情况再现，这就是之前说的OC的一部分原因，所以才会很多都写<code>#import &lt;xxxx/xxx.h&gt;</code>感觉踏实。所以现在就尴尬了，国内很多支持pod的sdk是Framework都是直接<code>s.ios.vendored_frameworks = &#39;xxxx.framework&#39;</code>，所以其实这些sdk其实真的该考虑pod的Framework单独处理，给人扔项目里直接用的保持<code>#import &lt;xxxx/xxx.h&gt;</code>风格写法没问题，pod很多时候就是为了管理各种依赖关系，至于是动态库还是静态库编译都是看项目本身需要，封装pod的时候应该必须保持<code>#import &quot;xxx.h&quot;</code>写法才ok，另外.a在pod里可能更加讨喜吧。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>CocoaPods终于出1.4.0.beta.1了，终于能用用static_framework这个属性了，拯救世界的属性啊！</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>封装pod依赖另一个有.a或Framework的pod，然后用<code>use_frameworks!</code>来动态库模式pod。那情况原来只能把那有.a或Framework的pod直接代码都放自己pod里，不能dependency，当然项目没用任何Swift其实就没事因为用不到<code>use_frameworks!</code>。还有就是Pod里用了资源文件的，因为用了资源文件和<code>use_frameworks!</code>，最终生成资源可都在.app的Frameworks/xxxxx.framework/里，如果第三方代码处理了这种情况还好，不过现在看几乎没有几个做这个处理的，都没想过动态库带来的改变也是醉了，资源都会找不到！使用静态库模式则会拍平就没这问题了。</p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>下面来个例子，封装统计模块需要依赖Google统计，Fabric crash统计，现在有了这属性直接如下就完成了依赖关系<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Google 统计</span><br><span class=\"line\">s.ios.dependency      &apos;Google/Analytics&apos;</span><br><span class=\"line\">#Fabric crash统计</span><br><span class=\"line\">s.ios.dependency      &apos;Fabric&apos;</span><br><span class=\"line\">s.ios.dependency      &apos;Crashlytics&apos;</span><br><span class=\"line\">#指定Pod为静态库模式</span><br><span class=\"line\">s.static_framework      = true</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>不能在当前pod里的<code>subpecs</code>中使用</li>\n<li>Framework受限头文件引用模式</li>\n</ul>","more":"<p>这里举依赖Google的例子主要是人家<code>podspec</code>写的好，还有就是<code>static_framework</code>属性并不是万能的！遇到环信，友盟分享这类就废，还有其他情况也不行。</p>\n<p>下面说说这类情况，第一个<code>static_framework</code>不能放到<code>subpecs</code>里，这个倒是不难解决，可以为这个单建一个pod作为依赖的中间件，这样要创建的pod就可以不使用<code>static_framework</code>属性了依赖使用了这个属性里面只有dependency的中间件。<br>第二种就是没救的，典型范例环信和友盟分享，这俩都是对Pod里的Framework认知不足，不过也有部分原因在OC没正经命名空间。<br>没问题可用<code>static_framework</code>的Framework的<code>podspec</code>写法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.ios.source_files        = &apos;xxxx.framework/Headers/*.h&apos;</span><br><span class=\"line\">s.ios.public_header_files = &apos;xxxx.framework/Headers/*.h&apos;</span><br><span class=\"line\">s.ios.vendored_frameworks = &apos;xxxx.framework&apos;</span><br></pre></td></tr></table></figure></p>\n<p>而且内部对xxxx.framework的文件引用只能<code>#import &quot;xxx.h&quot;</code>不能<code>#import &lt;xxxx/xxx.h&gt;</code>，否则头文件找不到，静态库模式这情况没办法，还有IOS本来Framework就都不是正经的动态库有这问题并不奇怪，同样也因此没法通过Framework隔离同名文件了，没有命名空间概念隔离的情况再现，这就是之前说的OC的一部分原因，所以才会很多都写<code>#import &lt;xxxx/xxx.h&gt;</code>感觉踏实。所以现在就尴尬了，国内很多支持pod的sdk是Framework都是直接<code>s.ios.vendored_frameworks = &#39;xxxx.framework&#39;</code>，所以其实这些sdk其实真的该考虑pod的Framework单独处理，给人扔项目里直接用的保持<code>#import &lt;xxxx/xxx.h&gt;</code>风格写法没问题，pod很多时候就是为了管理各种依赖关系，至于是动态库还是静态库编译都是看项目本身需要，封装pod的时候应该必须保持<code>#import &quot;xxx.h&quot;</code>写法才ok，另外.a在pod里可能更加讨喜吧。</p>"},{"title":"WebView 常见开发误区","date":"2017-01-01T08:13:04.000Z","_content":"# RequestUrl\nsetRequestUrl方法内注意fragment的概念，当前段采用了#在url中的时候，且作为新页面传给客户端，一定要注意，因为#也就是fragment是不会触发页面重新加载的如果host和path都一样，这时候需要调用reload方法如下，但另一方面也该给前段说明这是启用一个新页面本来就不该用#，背离了用#的意义\n```\n-(void)setRequestUrl:(NSString *)requestUrl{\n_requestUrl=requestUrl;\n\nNSURL *tmpUrl=[NSURL URLWithString:requestUrl];\n\nNSURL *ordUrl=self.lk_webView.request.URL;\n\n[self.lk_webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:_requestUrl]]];\n\n//fragment不会触发重新加载\nif ([tmpUrl.host isEqualToString:ordUrl.host]&&[tmpUrl.path isEqualToString:ordUrl.path]&&![tmpUrl.fragment isEqualToString:ordUrl.fragment]) {\n[self.lk_webView reload];\n}\n}\n```\n# 异步页面标题设置\n通常客户端直接在webview开始加载或加载完js交互调一下document.title设置就完事了，但是如果网页异步设置页面标题就尴尬了，所以通常要定义一个供网页调用的native方法如下，isDynamicTitle控制是否在开始加载和结束加载webview的时候执行`document.title`获取标题动态设置，当前端主动设置就要关闭动态设置\n```\n-(void)setWebViewTitle:(NSString*)title{\ndispatch_async(dispatch_get_main_queue(), ^{\nUIViewController *tmpVC=[UIViewController topViewController];\nif ([tmpVC isKindOfClass:[LK_WebViewController class]]) {\n[(LK_WebViewController*)tmpVC setIsDynamicTitle:NO];\ntmpVC.title=title;\n}\n});\n}\n```\n# 区域内使用webview取消填充\n如果在一个固定区域使用webview，你会发现有时底部会有一条线，设背景图背景色都没用，那是view的opaque在生效，需要设置成NO，webview底部会留1像素的缝隙，只有取消填充才能保证背景图背景色不被那条底线干扰\n","source":"_posts/WebView-常见开发误区.md","raw":"---\ntitle: WebView 常见开发误区\ndate: 2017-01-01 16:13:04\ntags:\n    - IOS\n    - WebView\n    - 常见开发误区\n---\n# RequestUrl\nsetRequestUrl方法内注意fragment的概念，当前段采用了#在url中的时候，且作为新页面传给客户端，一定要注意，因为#也就是fragment是不会触发页面重新加载的如果host和path都一样，这时候需要调用reload方法如下，但另一方面也该给前段说明这是启用一个新页面本来就不该用#，背离了用#的意义\n```\n-(void)setRequestUrl:(NSString *)requestUrl{\n_requestUrl=requestUrl;\n\nNSURL *tmpUrl=[NSURL URLWithString:requestUrl];\n\nNSURL *ordUrl=self.lk_webView.request.URL;\n\n[self.lk_webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:_requestUrl]]];\n\n//fragment不会触发重新加载\nif ([tmpUrl.host isEqualToString:ordUrl.host]&&[tmpUrl.path isEqualToString:ordUrl.path]&&![tmpUrl.fragment isEqualToString:ordUrl.fragment]) {\n[self.lk_webView reload];\n}\n}\n```\n# 异步页面标题设置\n通常客户端直接在webview开始加载或加载完js交互调一下document.title设置就完事了，但是如果网页异步设置页面标题就尴尬了，所以通常要定义一个供网页调用的native方法如下，isDynamicTitle控制是否在开始加载和结束加载webview的时候执行`document.title`获取标题动态设置，当前端主动设置就要关闭动态设置\n```\n-(void)setWebViewTitle:(NSString*)title{\ndispatch_async(dispatch_get_main_queue(), ^{\nUIViewController *tmpVC=[UIViewController topViewController];\nif ([tmpVC isKindOfClass:[LK_WebViewController class]]) {\n[(LK_WebViewController*)tmpVC setIsDynamicTitle:NO];\ntmpVC.title=title;\n}\n});\n}\n```\n# 区域内使用webview取消填充\n如果在一个固定区域使用webview，你会发现有时底部会有一条线，设背景图背景色都没用，那是view的opaque在生效，需要设置成NO，webview底部会留1像素的缝隙，只有取消填充才能保证背景图背景色不被那条底线干扰\n","slug":"WebView-常见开发误区","published":1,"updated":"2021-07-08T09:20:31.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfr1000onhs6fqs6tqzh","content":"<h1 id=\"RequestUrl\"><a href=\"#RequestUrl\" class=\"headerlink\" title=\"RequestUrl\"></a>RequestUrl</h1><p>setRequestUrl方法内注意fragment的概念，当前段采用了#在url中的时候，且作为新页面传给客户端，一定要注意，因为#也就是fragment是不会触发页面重新加载的如果host和path都一样，这时候需要调用reload方法如下，但另一方面也该给前段说明这是启用一个新页面本来就不该用#，背离了用#的意义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)setRequestUrl:(NSString *)requestUrl&#123;</span><br><span class=\"line\">_requestUrl=requestUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">NSURL *tmpUrl=[NSURL URLWithString:requestUrl];</span><br><span class=\"line\"></span><br><span class=\"line\">NSURL *ordUrl=self.lk_webView.request.URL;</span><br><span class=\"line\"></span><br><span class=\"line\">[self.lk_webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:_requestUrl]]];</span><br><span class=\"line\"></span><br><span class=\"line\">//fragment不会触发重新加载</span><br><span class=\"line\">if ([tmpUrl.host isEqualToString:ordUrl.host]&amp;&amp;[tmpUrl.path isEqualToString:ordUrl.path]&amp;&amp;![tmpUrl.fragment isEqualToString:ordUrl.fragment]) &#123;</span><br><span class=\"line\">[self.lk_webView reload];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"异步页面标题设置\"><a href=\"#异步页面标题设置\" class=\"headerlink\" title=\"异步页面标题设置\"></a>异步页面标题设置</h1><p>通常客户端直接在webview开始加载或加载完js交互调一下document.title设置就完事了，但是如果网页异步设置页面标题就尴尬了，所以通常要定义一个供网页调用的native方法如下，isDynamicTitle控制是否在开始加载和结束加载webview的时候执行<code>document.title</code>获取标题动态设置，当前端主动设置就要关闭动态设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)setWebViewTitle:(NSString*)title&#123;</span><br><span class=\"line\">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">UIViewController *tmpVC=[UIViewController topViewController];</span><br><span class=\"line\">if ([tmpVC isKindOfClass:[LK_WebViewController class]]) &#123;</span><br><span class=\"line\">[(LK_WebViewController*)tmpVC setIsDynamicTitle:NO];</span><br><span class=\"line\">tmpVC.title=title;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"区域内使用webview取消填充\"><a href=\"#区域内使用webview取消填充\" class=\"headerlink\" title=\"区域内使用webview取消填充\"></a>区域内使用webview取消填充</h1><p>如果在一个固定区域使用webview，你会发现有时底部会有一条线，设背景图背景色都没用，那是view的opaque在生效，需要设置成NO，webview底部会留1像素的缝隙，只有取消填充才能保证背景图背景色不被那条底线干扰</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RequestUrl\"><a href=\"#RequestUrl\" class=\"headerlink\" title=\"RequestUrl\"></a>RequestUrl</h1><p>setRequestUrl方法内注意fragment的概念，当前段采用了#在url中的时候，且作为新页面传给客户端，一定要注意，因为#也就是fragment是不会触发页面重新加载的如果host和path都一样，这时候需要调用reload方法如下，但另一方面也该给前段说明这是启用一个新页面本来就不该用#，背离了用#的意义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)setRequestUrl:(NSString *)requestUrl&#123;</span><br><span class=\"line\">_requestUrl=requestUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">NSURL *tmpUrl=[NSURL URLWithString:requestUrl];</span><br><span class=\"line\"></span><br><span class=\"line\">NSURL *ordUrl=self.lk_webView.request.URL;</span><br><span class=\"line\"></span><br><span class=\"line\">[self.lk_webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:_requestUrl]]];</span><br><span class=\"line\"></span><br><span class=\"line\">//fragment不会触发重新加载</span><br><span class=\"line\">if ([tmpUrl.host isEqualToString:ordUrl.host]&amp;&amp;[tmpUrl.path isEqualToString:ordUrl.path]&amp;&amp;![tmpUrl.fragment isEqualToString:ordUrl.fragment]) &#123;</span><br><span class=\"line\">[self.lk_webView reload];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"异步页面标题设置\"><a href=\"#异步页面标题设置\" class=\"headerlink\" title=\"异步页面标题设置\"></a>异步页面标题设置</h1><p>通常客户端直接在webview开始加载或加载完js交互调一下document.title设置就完事了，但是如果网页异步设置页面标题就尴尬了，所以通常要定义一个供网页调用的native方法如下，isDynamicTitle控制是否在开始加载和结束加载webview的时候执行<code>document.title</code>获取标题动态设置，当前端主动设置就要关闭动态设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)setWebViewTitle:(NSString*)title&#123;</span><br><span class=\"line\">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">UIViewController *tmpVC=[UIViewController topViewController];</span><br><span class=\"line\">if ([tmpVC isKindOfClass:[LK_WebViewController class]]) &#123;</span><br><span class=\"line\">[(LK_WebViewController*)tmpVC setIsDynamicTitle:NO];</span><br><span class=\"line\">tmpVC.title=title;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"区域内使用webview取消填充\"><a href=\"#区域内使用webview取消填充\" class=\"headerlink\" title=\"区域内使用webview取消填充\"></a>区域内使用webview取消填充</h1><p>如果在一个固定区域使用webview，你会发现有时底部会有一条线，设背景图背景色都没用，那是view的opaque在生效，需要设置成NO，webview底部会留1像素的缝隙，只有取消填充才能保证背景图背景色不被那条底线干扰</p>\n"},{"title":"Xcode 配置多种scheme完美使用（配合Pods）","date":"2017-11-01T12:21:10.000Z","_content":"\n# 前言\n这里说到scheme其实配置不难，但真正应用到大项目中会发现一个神奇的问题，调试的时候自己自定义的scheme变量值都是nil，即使配置好也那样，主要场景就是工程内的其他工程，所以你的配置其实是要应用到所有子工程下的，是不是瞬间压力山大，，，，，本文最后就讲讲结合pod后轻松解决的办法，开头还是由浅入深，这样受众多点，文章也不至于太单调，就从配置开始一路讲到调试使用。\n# 配置 Configurations\n这一步主要是创建我们的编译配置项，比如添加备机,测试环境的调试和发布项，下面是添加了测试环境\n\n![屏幕快照 2017-10-31 下午7.10.33.png](/assets/blogImage/3994053-36feba23b8a9e57d.png)\n这里环境分离时最好也是分Debug和Release,我添加了SchemeAppTest_Debug和SchemeAppTest_Release相当于测试环境下的Debug和Release还有每次创建新的一定要基于Debug或Release不然出现啥配置不对真的是会排查到疯！\n# 配置 Preprocessor Macros\n![屏幕快照 2017-10-31 下午7.28.20.png](/assets/blogImage/3994053-0cbf93e2a6e0e7b9.png)\n有了配置项，现在需要添加预编译宏，这样我们的代码里就可以用它来判断我们正在编译的是哪个环境了。\n上图我分别对SchemeAppTest_Debug和SchemeAppTest_Release配置了`SCHEMETESTDEBUG=2`和`SCHEMETESTRELEASE=3`，内部其实写什么都可以只不过用的时候就要用你写的哪个宏，这里的写法只是效仿系统，完全可以把SchemeAppTest_Debug定为`ABC=1000`,也没问题，只不过用的时候就如下就可以了，ABC就代表了SchemeAppTest_Debug\n```\n#ifdef ABC\n#else\n#endif\n```\n<!-- more -->\n# 配置 Scheme\n首先要创建scheme这里我创建的SchemeApp-Test就是测试环境用的\n![屏幕快照 2017-10-31 下午7.42.15.png](/assets/blogImage/3994053-87e9c9897c77efce.png)\n\n![屏幕快照 2017-10-31 下午7.43.21.png](/assets/blogImage/3994053-3112177a3c76dafa.png)\n添加完成就需要配置对应的Configurations，我们是基于原项目创建的，所以简单改下就可以。\n![\n![Uploading 屏幕快照 2017-10-31 下午7.47.46_551095.png . . .]\n](/assets/blogImage/3994053-6076902ef0296120.png)\n![屏幕快照 2017-10-31 下午7.47.46.png](/assets/blogImage/3994053-5739deca1545b24e.png)\n其实常用的就只有Run，配置一下就基本满足大部分需求，做完这些再把当前的scheme设置成shared就算是完整的配置完了scheme了\n![\n![Uploading 屏幕快照 2017-10-31 下午7.58.22_122575.png . . .]\n](/assets/blogImage/3994053-76c183e70ef95e13)\n\n![屏幕快照 2017-10-31 下午7.59.00.png](/assets/blogImage/3994053-c86836b8b7d2d84b)\n\n# 使用\n看样子好像一切都已经完美搞定剩下的就是使用了，其实正题才刚刚开始。。。。\n首先是最常用的用法就是直接使用宏来框自己代码，这个上面其实已经有提到，这里只是写个正式点的如下,定义了BaseHost不同情况下的url\n```\n#ifdef SCHEMETESTDEBUG\n#define BaseHost @\"http://xxx.xxx.xxx/test\"\n#define CanUseCustomHost YES\n#elif SCHEMETESTRELEASE\n#define BaseHost @\"http://xxx.xxx.xxx/test\"\n#define CanUseCustomHost NO\n#else\n#define BaseHost @\"http://xxx.xxx.xxx\"\n#define CanUseCustomHost NO\n#endif\n```\n还可以配置不同AppIcon和LaunchImage对应不同环境如下图\n![屏幕快照 2017-10-31 下午8.16.10.png](/assets/blogImage/3994053-17ea70096ec3e073)\n另外User-Defined-Setting也是还算常用的一个配置,如下图添加了一个APPCustomName，这个用的时候写成`$(APPCustomName)`\n\n![屏幕快照 2017-11-01 上午11.55.32.png](/assets/blogImage/3994053-b39c7f556d923efc)\n\n![屏幕快照 2017-11-01 下午12.06.32.png](/assets/blogImage/3994053-92d4b200d7f69e69)\n另外就是plist里所有值都可以按上面方法做到环境分离，写法保持`$(xxxx)`即可，这样配合Build Settings也可以把Bundle Identifier用这种方法做环境分离打出不同环境的包，这样不同环境的包就可以在手机上并存了。\n# 调试\n重头戏现在才开始，上边的搞完，就能打包看效果了，但是一旦你的项目里包含了其他项目或用了pod，瞬间你就会发现调试的时候NSLog输出变量都在断点的话则什么都没有!如图，这是pod方式用AF，到AF里打断点外部传的变量都是nil。。。。\n![屏幕快照 2017-11-01 下午3.46.15.png](/assets/blogImage/3994053-ea973b927dfa3697)\n\n\n![屏幕快照 2017-11-01 下午3.46.37.png](/assets/blogImage/3994053-bf61aba6d19b56e6)\n\n直接引用一个工程项目也会有此情况，当然你要引用的是第三方库没法调试就不用考虑了，这里原因其实很简单,看下图\n\n![屏幕快照 2017-11-01 下午4.01.51.png](/assets/blogImage/3994053-defff1bd06fc295d)\n\n你需要确保所有引进来的工程`Optimization Level`这个属性想要支持调试必须是'None[-O0]'，和Debug一样的设计，其次如果组件化的设计，你的预编译宏的值也要在你Module的工程里有设置，换句话说现在引进来的其他工程你的预编译宏在他们里面是没有生效的！\n![屏幕快照 2017-11-01 下午4.07.54.png](/assets/blogImage/3994053-50a770f7ab269284)\n\n所以你还需要把每个工程里都设置一遍`Optimization Leve`和`Preprocessor Macros`，手动设置就不说了,还有这里如果真的应用到大型项目里很可能要设置的不止2个配置，这里只是举了最容易发现的两个问题，同理解决即可。如果用pod，我们所希望的当然是`pod update`完就帮我们设置好！\n\n下面就放一波代码，以当前情况为例\n```\ntarget 'SchemeApp' do\n# Uncomment the next line if you're using Swift or would like to use dynamic frameworks\n# use_frameworks!\n\n# Pods for SchemeApp\npod 'AFNetworking'\ntarget 'SchemeAppUITests' do\ninherit! :search_paths\n# Pods for testing\nend\n\nend\n\npost_install do |installer_representation|\n\ninstaller_representation.pods_project.targets.each do |target|\ntarget.build_configurations.each do |config|\n#去警告\nconfig.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n#判断scheme\nif config.name.include?(\"SchemeAppTest_Release\")\n#添加scheme对应的预编译宏\nconfig.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\nconfig.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTRELEASE=3'\nend\nif config.name.include?(\"SchemeAppTest_Debug\")\nconfig.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\nconfig.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTDEBUG=2'\n#指定scheme的调试模式可见变量\nconfig.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n#某些情况由于编译器不支持无法debug（可选）\nconfig.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\nend\nend\nend\nend\n\n```\n利用好podfile文件,就这样一次性解决,把所有pod都配置了一遍`Build Settings`的设置，至此scheme才算完美搞完，利用上面的思路，即使项目再神奇应该也能做到完美的配置scheme。\n","source":"_posts/Xcode-配置多种scheme完美使用（配合Pods）.md","raw":"---\ntitle: Xcode 配置多种scheme完美使用（配合Pods）\ndate: 2017-11-01 20:21:10\ntags:\n    - IOS\n    - Scheme\n    - 预编译宏\n    - Configurations\n    - Preprocessor Macros\n    - User-Defined-Setting\n    - CocoaPods\n---\n\n# 前言\n这里说到scheme其实配置不难，但真正应用到大项目中会发现一个神奇的问题，调试的时候自己自定义的scheme变量值都是nil，即使配置好也那样，主要场景就是工程内的其他工程，所以你的配置其实是要应用到所有子工程下的，是不是瞬间压力山大，，，，，本文最后就讲讲结合pod后轻松解决的办法，开头还是由浅入深，这样受众多点，文章也不至于太单调，就从配置开始一路讲到调试使用。\n# 配置 Configurations\n这一步主要是创建我们的编译配置项，比如添加备机,测试环境的调试和发布项，下面是添加了测试环境\n\n![屏幕快照 2017-10-31 下午7.10.33.png](/assets/blogImage/3994053-36feba23b8a9e57d.png)\n这里环境分离时最好也是分Debug和Release,我添加了SchemeAppTest_Debug和SchemeAppTest_Release相当于测试环境下的Debug和Release还有每次创建新的一定要基于Debug或Release不然出现啥配置不对真的是会排查到疯！\n# 配置 Preprocessor Macros\n![屏幕快照 2017-10-31 下午7.28.20.png](/assets/blogImage/3994053-0cbf93e2a6e0e7b9.png)\n有了配置项，现在需要添加预编译宏，这样我们的代码里就可以用它来判断我们正在编译的是哪个环境了。\n上图我分别对SchemeAppTest_Debug和SchemeAppTest_Release配置了`SCHEMETESTDEBUG=2`和`SCHEMETESTRELEASE=3`，内部其实写什么都可以只不过用的时候就要用你写的哪个宏，这里的写法只是效仿系统，完全可以把SchemeAppTest_Debug定为`ABC=1000`,也没问题，只不过用的时候就如下就可以了，ABC就代表了SchemeAppTest_Debug\n```\n#ifdef ABC\n#else\n#endif\n```\n<!-- more -->\n# 配置 Scheme\n首先要创建scheme这里我创建的SchemeApp-Test就是测试环境用的\n![屏幕快照 2017-10-31 下午7.42.15.png](/assets/blogImage/3994053-87e9c9897c77efce.png)\n\n![屏幕快照 2017-10-31 下午7.43.21.png](/assets/blogImage/3994053-3112177a3c76dafa.png)\n添加完成就需要配置对应的Configurations，我们是基于原项目创建的，所以简单改下就可以。\n![\n![Uploading 屏幕快照 2017-10-31 下午7.47.46_551095.png . . .]\n](/assets/blogImage/3994053-6076902ef0296120.png)\n![屏幕快照 2017-10-31 下午7.47.46.png](/assets/blogImage/3994053-5739deca1545b24e.png)\n其实常用的就只有Run，配置一下就基本满足大部分需求，做完这些再把当前的scheme设置成shared就算是完整的配置完了scheme了\n![\n![Uploading 屏幕快照 2017-10-31 下午7.58.22_122575.png . . .]\n](/assets/blogImage/3994053-76c183e70ef95e13)\n\n![屏幕快照 2017-10-31 下午7.59.00.png](/assets/blogImage/3994053-c86836b8b7d2d84b)\n\n# 使用\n看样子好像一切都已经完美搞定剩下的就是使用了，其实正题才刚刚开始。。。。\n首先是最常用的用法就是直接使用宏来框自己代码，这个上面其实已经有提到，这里只是写个正式点的如下,定义了BaseHost不同情况下的url\n```\n#ifdef SCHEMETESTDEBUG\n#define BaseHost @\"http://xxx.xxx.xxx/test\"\n#define CanUseCustomHost YES\n#elif SCHEMETESTRELEASE\n#define BaseHost @\"http://xxx.xxx.xxx/test\"\n#define CanUseCustomHost NO\n#else\n#define BaseHost @\"http://xxx.xxx.xxx\"\n#define CanUseCustomHost NO\n#endif\n```\n还可以配置不同AppIcon和LaunchImage对应不同环境如下图\n![屏幕快照 2017-10-31 下午8.16.10.png](/assets/blogImage/3994053-17ea70096ec3e073)\n另外User-Defined-Setting也是还算常用的一个配置,如下图添加了一个APPCustomName，这个用的时候写成`$(APPCustomName)`\n\n![屏幕快照 2017-11-01 上午11.55.32.png](/assets/blogImage/3994053-b39c7f556d923efc)\n\n![屏幕快照 2017-11-01 下午12.06.32.png](/assets/blogImage/3994053-92d4b200d7f69e69)\n另外就是plist里所有值都可以按上面方法做到环境分离，写法保持`$(xxxx)`即可，这样配合Build Settings也可以把Bundle Identifier用这种方法做环境分离打出不同环境的包，这样不同环境的包就可以在手机上并存了。\n# 调试\n重头戏现在才开始，上边的搞完，就能打包看效果了，但是一旦你的项目里包含了其他项目或用了pod，瞬间你就会发现调试的时候NSLog输出变量都在断点的话则什么都没有!如图，这是pod方式用AF，到AF里打断点外部传的变量都是nil。。。。\n![屏幕快照 2017-11-01 下午3.46.15.png](/assets/blogImage/3994053-ea973b927dfa3697)\n\n\n![屏幕快照 2017-11-01 下午3.46.37.png](/assets/blogImage/3994053-bf61aba6d19b56e6)\n\n直接引用一个工程项目也会有此情况，当然你要引用的是第三方库没法调试就不用考虑了，这里原因其实很简单,看下图\n\n![屏幕快照 2017-11-01 下午4.01.51.png](/assets/blogImage/3994053-defff1bd06fc295d)\n\n你需要确保所有引进来的工程`Optimization Level`这个属性想要支持调试必须是'None[-O0]'，和Debug一样的设计，其次如果组件化的设计，你的预编译宏的值也要在你Module的工程里有设置，换句话说现在引进来的其他工程你的预编译宏在他们里面是没有生效的！\n![屏幕快照 2017-11-01 下午4.07.54.png](/assets/blogImage/3994053-50a770f7ab269284)\n\n所以你还需要把每个工程里都设置一遍`Optimization Leve`和`Preprocessor Macros`，手动设置就不说了,还有这里如果真的应用到大型项目里很可能要设置的不止2个配置，这里只是举了最容易发现的两个问题，同理解决即可。如果用pod，我们所希望的当然是`pod update`完就帮我们设置好！\n\n下面就放一波代码，以当前情况为例\n```\ntarget 'SchemeApp' do\n# Uncomment the next line if you're using Swift or would like to use dynamic frameworks\n# use_frameworks!\n\n# Pods for SchemeApp\npod 'AFNetworking'\ntarget 'SchemeAppUITests' do\ninherit! :search_paths\n# Pods for testing\nend\n\nend\n\npost_install do |installer_representation|\n\ninstaller_representation.pods_project.targets.each do |target|\ntarget.build_configurations.each do |config|\n#去警告\nconfig.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n#判断scheme\nif config.name.include?(\"SchemeAppTest_Release\")\n#添加scheme对应的预编译宏\nconfig.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\nconfig.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTRELEASE=3'\nend\nif config.name.include?(\"SchemeAppTest_Debug\")\nconfig.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\nconfig.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTDEBUG=2'\n#指定scheme的调试模式可见变量\nconfig.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n#某些情况由于编译器不支持无法debug（可选）\nconfig.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\nend\nend\nend\nend\n\n```\n利用好podfile文件,就这样一次性解决,把所有pod都配置了一遍`Build Settings`的设置，至此scheme才算完美搞完，利用上面的思路，即使项目再神奇应该也能做到完美的配置scheme。\n","slug":"Xcode-配置多种scheme完美使用（配合Pods）","published":1,"updated":"2021-07-08T12:00:04.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfr2000qnhs6fiahpwzz","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这里说到scheme其实配置不难，但真正应用到大项目中会发现一个神奇的问题，调试的时候自己自定义的scheme变量值都是nil，即使配置好也那样，主要场景就是工程内的其他工程，所以你的配置其实是要应用到所有子工程下的，是不是瞬间压力山大，，，，，本文最后就讲讲结合pod后轻松解决的办法，开头还是由浅入深，这样受众多点，文章也不至于太单调，就从配置开始一路讲到调试使用。</p>\n<h1 id=\"配置-Configurations\"><a href=\"#配置-Configurations\" class=\"headerlink\" title=\"配置 Configurations\"></a>配置 Configurations</h1><p>这一步主要是创建我们的编译配置项，比如添加备机,测试环境的调试和发布项，下面是添加了测试环境</p>\n<p><img src=\"/assets/blogImage/3994053-36feba23b8a9e57d.png\" alt=\"屏幕快照 2017-10-31 下午7.10.33.png\"><br>这里环境分离时最好也是分Debug和Release,我添加了SchemeAppTest_Debug和SchemeAppTest_Release相当于测试环境下的Debug和Release还有每次创建新的一定要基于Debug或Release不然出现啥配置不对真的是会排查到疯！</p>\n<h1 id=\"配置-Preprocessor-Macros\"><a href=\"#配置-Preprocessor-Macros\" class=\"headerlink\" title=\"配置 Preprocessor Macros\"></a>配置 Preprocessor Macros</h1><p><img src=\"/assets/blogImage/3994053-0cbf93e2a6e0e7b9.png\" alt=\"屏幕快照 2017-10-31 下午7.28.20.png\"><br>有了配置项，现在需要添加预编译宏，这样我们的代码里就可以用它来判断我们正在编译的是哪个环境了。<br>上图我分别对SchemeAppTest_Debug和SchemeAppTest_Release配置了<code>SCHEMETESTDEBUG=2</code>和<code>SCHEMETESTRELEASE=3</code>，内部其实写什么都可以只不过用的时候就要用你写的哪个宏，这里的写法只是效仿系统，完全可以把SchemeAppTest_Debug定为<code>ABC=1000</code>,也没问题，只不过用的时候就如下就可以了，ABC就代表了SchemeAppTest_Debug<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifdef ABC</span><br><span class=\"line\">#else</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h1 id=\"配置-Scheme\"><a href=\"#配置-Scheme\" class=\"headerlink\" title=\"配置 Scheme\"></a>配置 Scheme</h1><p>首先要创建scheme这里我创建的SchemeApp-Test就是测试环境用的<br><img src=\"/assets/blogImage/3994053-87e9c9897c77efce.png\" alt=\"屏幕快照 2017-10-31 下午7.42.15.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-3112177a3c76dafa.png\" alt=\"屏幕快照 2017-10-31 下午7.43.21.png\"><br>添加完成就需要配置对应的Configurations，我们是基于原项目创建的，所以简单改下就可以。<br><img src=\"/assets/blogImage/3994053-6076902ef0296120.png\" alt=\"\n![Uploading 屏幕快照 2017-10-31 下午7.47.46_551095.png . . .]\n\"><br><img src=\"/assets/blogImage/3994053-5739deca1545b24e.png\" alt=\"屏幕快照 2017-10-31 下午7.47.46.png\"><br>其实常用的就只有Run，配置一下就基本满足大部分需求，做完这些再把当前的scheme设置成shared就算是完整的配置完了scheme了<br><img src=\"/assets/blogImage/3994053-76c183e70ef95e13\" alt=\"\n![Uploading 屏幕快照 2017-10-31 下午7.58.22_122575.png . . .]\n\"></p>\n<p><img src=\"/assets/blogImage/3994053-c86836b8b7d2d84b\" alt=\"屏幕快照 2017-10-31 下午7.59.00.png\"></p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>看样子好像一切都已经完美搞定剩下的就是使用了，其实正题才刚刚开始。。。。<br>首先是最常用的用法就是直接使用宏来框自己代码，这个上面其实已经有提到，这里只是写个正式点的如下,定义了BaseHost不同情况下的url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifdef SCHEMETESTDEBUG</span><br><span class=\"line\">#define BaseHost @&quot;http://xxx.xxx.xxx/test&quot;</span><br><span class=\"line\">#define CanUseCustomHost YES</span><br><span class=\"line\">#elif SCHEMETESTRELEASE</span><br><span class=\"line\">#define BaseHost @&quot;http://xxx.xxx.xxx/test&quot;</span><br><span class=\"line\">#define CanUseCustomHost NO</span><br><span class=\"line\">#else</span><br><span class=\"line\">#define BaseHost @&quot;http://xxx.xxx.xxx&quot;</span><br><span class=\"line\">#define CanUseCustomHost NO</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<p>还可以配置不同AppIcon和LaunchImage对应不同环境如下图<br><img src=\"/assets/blogImage/3994053-17ea70096ec3e073\" alt=\"屏幕快照 2017-10-31 下午8.16.10.png\"><br>另外User-Defined-Setting也是还算常用的一个配置,如下图添加了一个APPCustomName，这个用的时候写成<code>$(APPCustomName)</code></p>\n<p><img src=\"/assets/blogImage/3994053-b39c7f556d923efc\" alt=\"屏幕快照 2017-11-01 上午11.55.32.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-92d4b200d7f69e69\" alt=\"屏幕快照 2017-11-01 下午12.06.32.png\"><br>另外就是plist里所有值都可以按上面方法做到环境分离，写法保持<code>$(xxxx)</code>即可，这样配合Build Settings也可以把Bundle Identifier用这种方法做环境分离打出不同环境的包，这样不同环境的包就可以在手机上并存了。</p>\n<h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1><p>重头戏现在才开始，上边的搞完，就能打包看效果了，但是一旦你的项目里包含了其他项目或用了pod，瞬间你就会发现调试的时候NSLog输出变量都在断点的话则什么都没有!如图，这是pod方式用AF，到AF里打断点外部传的变量都是nil。。。。<br><img src=\"/assets/blogImage/3994053-ea973b927dfa3697\" alt=\"屏幕快照 2017-11-01 下午3.46.15.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-bf61aba6d19b56e6\" alt=\"屏幕快照 2017-11-01 下午3.46.37.png\"></p>\n<p>直接引用一个工程项目也会有此情况，当然你要引用的是第三方库没法调试就不用考虑了，这里原因其实很简单,看下图</p>\n<p><img src=\"/assets/blogImage/3994053-defff1bd06fc295d\" alt=\"屏幕快照 2017-11-01 下午4.01.51.png\"></p>\n<p>你需要确保所有引进来的工程<code>Optimization Level</code>这个属性想要支持调试必须是’None[-O0]’，和Debug一样的设计，其次如果组件化的设计，你的预编译宏的值也要在你Module的工程里有设置，换句话说现在引进来的其他工程你的预编译宏在他们里面是没有生效的！<br><img src=\"/assets/blogImage/3994053-50a770f7ab269284\" alt=\"屏幕快照 2017-11-01 下午4.07.54.png\"></p>\n<p>所以你还需要把每个工程里都设置一遍<code>Optimization Leve</code>和<code>Preprocessor Macros</code>，手动设置就不说了,还有这里如果真的应用到大型项目里很可能要设置的不止2个配置，这里只是举了最容易发现的两个问题，同理解决即可。如果用pod，我们所希望的当然是<code>pod update</code>完就帮我们设置好！</p>\n<p>下面就放一波代码，以当前情况为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target &apos;SchemeApp&apos; do</span><br><span class=\"line\"># Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks</span><br><span class=\"line\"># use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\"># Pods for SchemeApp</span><br><span class=\"line\">pod &apos;AFNetworking&apos;</span><br><span class=\"line\">target &apos;SchemeAppUITests&apos; do</span><br><span class=\"line\">inherit! :search_paths</span><br><span class=\"line\"># Pods for testing</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">post_install do |installer_representation|</span><br><span class=\"line\"></span><br><span class=\"line\">installer_representation.pods_project.targets.each do |target|</span><br><span class=\"line\">target.build_configurations.each do |config|</span><br><span class=\"line\">#去警告</span><br><span class=\"line\">config.build_settings[&apos;GCC_WARN_INHIBIT_ALL_WARNINGS&apos;] = &apos;YES&apos;</span><br><span class=\"line\">#判断scheme</span><br><span class=\"line\">if config.name.include?(&quot;SchemeAppTest_Release&quot;)</span><br><span class=\"line\">#添加scheme对应的预编译宏</span><br><span class=\"line\">config.build_settings[&apos;GCC_PREPROCESSOR_DEFINITIONS&apos;] ||= [&apos;$(inherited)&apos;]</span><br><span class=\"line\">config.build_settings[&apos;GCC_PREPROCESSOR_DEFINITIONS&apos;] &lt;&lt; &apos;SCHEMEAPPTESTRELEASE=3&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">if config.name.include?(&quot;SchemeAppTest_Debug&quot;)</span><br><span class=\"line\">config.build_settings[&apos;GCC_PREPROCESSOR_DEFINITIONS&apos;] ||= [&apos;$(inherited)&apos;]</span><br><span class=\"line\">config.build_settings[&apos;GCC_PREPROCESSOR_DEFINITIONS&apos;] &lt;&lt; &apos;SCHEMEAPPTESTDEBUG=2&apos;</span><br><span class=\"line\">#指定scheme的调试模式可见变量</span><br><span class=\"line\">config.build_settings[&apos;GCC_OPTIMIZATION_LEVEL&apos;] = &apos;0&apos;</span><br><span class=\"line\">#某些情况由于编译器不支持无法debug（可选）</span><br><span class=\"line\">config.build_settings[&apos;ONLY_ACTIVE_ARCH&apos;] = &apos;YES&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>利用好podfile文件,就这样一次性解决,把所有pod都配置了一遍<code>Build Settings</code>的设置，至此scheme才算完美搞完，利用上面的思路，即使项目再神奇应该也能做到完美的配置scheme。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这里说到scheme其实配置不难，但真正应用到大项目中会发现一个神奇的问题，调试的时候自己自定义的scheme变量值都是nil，即使配置好也那样，主要场景就是工程内的其他工程，所以你的配置其实是要应用到所有子工程下的，是不是瞬间压力山大，，，，，本文最后就讲讲结合pod后轻松解决的办法，开头还是由浅入深，这样受众多点，文章也不至于太单调，就从配置开始一路讲到调试使用。</p>\n<h1 id=\"配置-Configurations\"><a href=\"#配置-Configurations\" class=\"headerlink\" title=\"配置 Configurations\"></a>配置 Configurations</h1><p>这一步主要是创建我们的编译配置项，比如添加备机,测试环境的调试和发布项，下面是添加了测试环境</p>\n<p><img src=\"/assets/blogImage/3994053-36feba23b8a9e57d.png\" alt=\"屏幕快照 2017-10-31 下午7.10.33.png\"><br>这里环境分离时最好也是分Debug和Release,我添加了SchemeAppTest_Debug和SchemeAppTest_Release相当于测试环境下的Debug和Release还有每次创建新的一定要基于Debug或Release不然出现啥配置不对真的是会排查到疯！</p>\n<h1 id=\"配置-Preprocessor-Macros\"><a href=\"#配置-Preprocessor-Macros\" class=\"headerlink\" title=\"配置 Preprocessor Macros\"></a>配置 Preprocessor Macros</h1><p><img src=\"/assets/blogImage/3994053-0cbf93e2a6e0e7b9.png\" alt=\"屏幕快照 2017-10-31 下午7.28.20.png\"><br>有了配置项，现在需要添加预编译宏，这样我们的代码里就可以用它来判断我们正在编译的是哪个环境了。<br>上图我分别对SchemeAppTest_Debug和SchemeAppTest_Release配置了<code>SCHEMETESTDEBUG=2</code>和<code>SCHEMETESTRELEASE=3</code>，内部其实写什么都可以只不过用的时候就要用你写的哪个宏，这里的写法只是效仿系统，完全可以把SchemeAppTest_Debug定为<code>ABC=1000</code>,也没问题，只不过用的时候就如下就可以了，ABC就代表了SchemeAppTest_Debug<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifdef ABC</span><br><span class=\"line\">#else</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>","more":"<h1 id=\"配置-Scheme\"><a href=\"#配置-Scheme\" class=\"headerlink\" title=\"配置 Scheme\"></a>配置 Scheme</h1><p>首先要创建scheme这里我创建的SchemeApp-Test就是测试环境用的<br><img src=\"/assets/blogImage/3994053-87e9c9897c77efce.png\" alt=\"屏幕快照 2017-10-31 下午7.42.15.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-3112177a3c76dafa.png\" alt=\"屏幕快照 2017-10-31 下午7.43.21.png\"><br>添加完成就需要配置对应的Configurations，我们是基于原项目创建的，所以简单改下就可以。<br><img src=\"/assets/blogImage/3994053-6076902ef0296120.png\" alt=\"\n![Uploading 屏幕快照 2017-10-31 下午7.47.46_551095.png . . .]\n\"><br><img src=\"/assets/blogImage/3994053-5739deca1545b24e.png\" alt=\"屏幕快照 2017-10-31 下午7.47.46.png\"><br>其实常用的就只有Run，配置一下就基本满足大部分需求，做完这些再把当前的scheme设置成shared就算是完整的配置完了scheme了<br><img src=\"/assets/blogImage/3994053-76c183e70ef95e13\" alt=\"\n![Uploading 屏幕快照 2017-10-31 下午7.58.22_122575.png . . .]\n\"></p>\n<p><img src=\"/assets/blogImage/3994053-c86836b8b7d2d84b\" alt=\"屏幕快照 2017-10-31 下午7.59.00.png\"></p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>看样子好像一切都已经完美搞定剩下的就是使用了，其实正题才刚刚开始。。。。<br>首先是最常用的用法就是直接使用宏来框自己代码，这个上面其实已经有提到，这里只是写个正式点的如下,定义了BaseHost不同情况下的url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifdef SCHEMETESTDEBUG</span><br><span class=\"line\">#define BaseHost @&quot;http://xxx.xxx.xxx/test&quot;</span><br><span class=\"line\">#define CanUseCustomHost YES</span><br><span class=\"line\">#elif SCHEMETESTRELEASE</span><br><span class=\"line\">#define BaseHost @&quot;http://xxx.xxx.xxx/test&quot;</span><br><span class=\"line\">#define CanUseCustomHost NO</span><br><span class=\"line\">#else</span><br><span class=\"line\">#define BaseHost @&quot;http://xxx.xxx.xxx&quot;</span><br><span class=\"line\">#define CanUseCustomHost NO</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<p>还可以配置不同AppIcon和LaunchImage对应不同环境如下图<br><img src=\"/assets/blogImage/3994053-17ea70096ec3e073\" alt=\"屏幕快照 2017-10-31 下午8.16.10.png\"><br>另外User-Defined-Setting也是还算常用的一个配置,如下图添加了一个APPCustomName，这个用的时候写成<code>$(APPCustomName)</code></p>\n<p><img src=\"/assets/blogImage/3994053-b39c7f556d923efc\" alt=\"屏幕快照 2017-11-01 上午11.55.32.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-92d4b200d7f69e69\" alt=\"屏幕快照 2017-11-01 下午12.06.32.png\"><br>另外就是plist里所有值都可以按上面方法做到环境分离，写法保持<code>$(xxxx)</code>即可，这样配合Build Settings也可以把Bundle Identifier用这种方法做环境分离打出不同环境的包，这样不同环境的包就可以在手机上并存了。</p>\n<h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1><p>重头戏现在才开始，上边的搞完，就能打包看效果了，但是一旦你的项目里包含了其他项目或用了pod，瞬间你就会发现调试的时候NSLog输出变量都在断点的话则什么都没有!如图，这是pod方式用AF，到AF里打断点外部传的变量都是nil。。。。<br><img src=\"/assets/blogImage/3994053-ea973b927dfa3697\" alt=\"屏幕快照 2017-11-01 下午3.46.15.png\"></p>\n<p><img src=\"/assets/blogImage/3994053-bf61aba6d19b56e6\" alt=\"屏幕快照 2017-11-01 下午3.46.37.png\"></p>\n<p>直接引用一个工程项目也会有此情况，当然你要引用的是第三方库没法调试就不用考虑了，这里原因其实很简单,看下图</p>\n<p><img src=\"/assets/blogImage/3994053-defff1bd06fc295d\" alt=\"屏幕快照 2017-11-01 下午4.01.51.png\"></p>\n<p>你需要确保所有引进来的工程<code>Optimization Level</code>这个属性想要支持调试必须是’None[-O0]’，和Debug一样的设计，其次如果组件化的设计，你的预编译宏的值也要在你Module的工程里有设置，换句话说现在引进来的其他工程你的预编译宏在他们里面是没有生效的！<br><img src=\"/assets/blogImage/3994053-50a770f7ab269284\" alt=\"屏幕快照 2017-11-01 下午4.07.54.png\"></p>\n<p>所以你还需要把每个工程里都设置一遍<code>Optimization Leve</code>和<code>Preprocessor Macros</code>，手动设置就不说了,还有这里如果真的应用到大型项目里很可能要设置的不止2个配置，这里只是举了最容易发现的两个问题，同理解决即可。如果用pod，我们所希望的当然是<code>pod update</code>完就帮我们设置好！</p>\n<p>下面就放一波代码，以当前情况为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target &apos;SchemeApp&apos; do</span><br><span class=\"line\"># Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks</span><br><span class=\"line\"># use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\"># Pods for SchemeApp</span><br><span class=\"line\">pod &apos;AFNetworking&apos;</span><br><span class=\"line\">target &apos;SchemeAppUITests&apos; do</span><br><span class=\"line\">inherit! :search_paths</span><br><span class=\"line\"># Pods for testing</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">post_install do |installer_representation|</span><br><span class=\"line\"></span><br><span class=\"line\">installer_representation.pods_project.targets.each do |target|</span><br><span class=\"line\">target.build_configurations.each do |config|</span><br><span class=\"line\">#去警告</span><br><span class=\"line\">config.build_settings[&apos;GCC_WARN_INHIBIT_ALL_WARNINGS&apos;] = &apos;YES&apos;</span><br><span class=\"line\">#判断scheme</span><br><span class=\"line\">if config.name.include?(&quot;SchemeAppTest_Release&quot;)</span><br><span class=\"line\">#添加scheme对应的预编译宏</span><br><span class=\"line\">config.build_settings[&apos;GCC_PREPROCESSOR_DEFINITIONS&apos;] ||= [&apos;$(inherited)&apos;]</span><br><span class=\"line\">config.build_settings[&apos;GCC_PREPROCESSOR_DEFINITIONS&apos;] &lt;&lt; &apos;SCHEMEAPPTESTRELEASE=3&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">if config.name.include?(&quot;SchemeAppTest_Debug&quot;)</span><br><span class=\"line\">config.build_settings[&apos;GCC_PREPROCESSOR_DEFINITIONS&apos;] ||= [&apos;$(inherited)&apos;]</span><br><span class=\"line\">config.build_settings[&apos;GCC_PREPROCESSOR_DEFINITIONS&apos;] &lt;&lt; &apos;SCHEMEAPPTESTDEBUG=2&apos;</span><br><span class=\"line\">#指定scheme的调试模式可见变量</span><br><span class=\"line\">config.build_settings[&apos;GCC_OPTIMIZATION_LEVEL&apos;] = &apos;0&apos;</span><br><span class=\"line\">#某些情况由于编译器不支持无法debug（可选）</span><br><span class=\"line\">config.build_settings[&apos;ONLY_ACTIVE_ARCH&apos;] = &apos;YES&apos;</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>利用好podfile文件,就这样一次性解决,把所有pod都配置了一遍<code>Build Settings</code>的设置，至此scheme才算完美搞完，利用上面的思路，即使项目再神奇应该也能做到完美的配置scheme。</p>"},{"title":"Xcode添加静态库以及编译选项配置常见问题","date":"2015-06-04T04:17:28.000Z","_content":"# 一,Xcode编译出现Link错误,出现\"duplicate symbols for architecture i386 clang\"提示.\n\n问题:链接时,项目有重名文件.\n\n解决:\n\n根据错误提示,做如下检查:\n1.Taraget->Build Settings->Link Binary With Libraries检查是否有重复lib.\n\n2.全工程搜索下重名文件,决定如何删除.\n\n# 二,关于Category位于静态库时,引用该静态库的工程使用Category,出现\"unrecognized selector sent to class\"提示.\n问题:标准UNIX静态库与Objective-C之间Linker的差异.在标准的UNIX静态库内,linker symbol是依照每一个类别而产生的,但由于Category并没有真正产生一个类别,所以出错.\n\n解决:\n\n1.在该静态库的Taraget->Build Settings->Other Linker Flags->加上 `-ObjC`.\n\n2.在使用该静态库的工程Taraget->Build Settings->Other Linker Flags->加上`-all_load`或`-force_load.`\n\n# 三,编译warning：ld: warning: directory not found for option '-L'.\n\n问题:通常是Path问题.\n\n解决:\n\nTaraget->Build Settings->Library Search Paths 和 Framework Search Paths,删掉编译报warning的路径即OK\n\n# 四,引入(带源码的)静态库所需配置.\n步骤:\n\n1.Add Files to.. 加入静态库的.xcodeproj 文件,不要勾选Copy Items.. 选项。(可以先把源代码项目先复制到使用项目文件夹下)\n\n2.Target->Build Phases->Target Dependecies->加静态库 && Link Binary With Libraries->加静态库.\n\n3.配置静态库头文件路径,在Taraget->Build Settings->User Header Search Paths->配上静态库的物理路径.\n\n[错误tips: 若出现加入的.xcodeproj无法展开,则在Xcode中关闭静态库项目即可]\n\nPS:只有.a 和 .h的静态库,则直接拖入项目即可。\n\n","source":"_posts/Xcode添加静态库以及编译选项配置常见问题.md","raw":"---\ntitle: Xcode添加静态库以及编译选项配置常见问题\ndate: 2015-06-04 12:17:28\ntags:\n    - 常见开发误区\n    - IOS\n    - 静态库\n---\n# 一,Xcode编译出现Link错误,出现\"duplicate symbols for architecture i386 clang\"提示.\n\n问题:链接时,项目有重名文件.\n\n解决:\n\n根据错误提示,做如下检查:\n1.Taraget->Build Settings->Link Binary With Libraries检查是否有重复lib.\n\n2.全工程搜索下重名文件,决定如何删除.\n\n# 二,关于Category位于静态库时,引用该静态库的工程使用Category,出现\"unrecognized selector sent to class\"提示.\n问题:标准UNIX静态库与Objective-C之间Linker的差异.在标准的UNIX静态库内,linker symbol是依照每一个类别而产生的,但由于Category并没有真正产生一个类别,所以出错.\n\n解决:\n\n1.在该静态库的Taraget->Build Settings->Other Linker Flags->加上 `-ObjC`.\n\n2.在使用该静态库的工程Taraget->Build Settings->Other Linker Flags->加上`-all_load`或`-force_load.`\n\n# 三,编译warning：ld: warning: directory not found for option '-L'.\n\n问题:通常是Path问题.\n\n解决:\n\nTaraget->Build Settings->Library Search Paths 和 Framework Search Paths,删掉编译报warning的路径即OK\n\n# 四,引入(带源码的)静态库所需配置.\n步骤:\n\n1.Add Files to.. 加入静态库的.xcodeproj 文件,不要勾选Copy Items.. 选项。(可以先把源代码项目先复制到使用项目文件夹下)\n\n2.Target->Build Phases->Target Dependecies->加静态库 && Link Binary With Libraries->加静态库.\n\n3.配置静态库头文件路径,在Taraget->Build Settings->User Header Search Paths->配上静态库的物理路径.\n\n[错误tips: 若出现加入的.xcodeproj无法展开,则在Xcode中关闭静态库项目即可]\n\nPS:只有.a 和 .h的静态库,则直接拖入项目即可。\n\n","slug":"Xcode添加静态库以及编译选项配置常见问题","published":1,"updated":"2021-07-08T09:20:31.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfr3000rnhs6znpjo85q","content":"<h1 id=\"一-Xcode编译出现Link错误-出现”duplicate-symbols-for-architecture-i386-clang”提示\"><a href=\"#一-Xcode编译出现Link错误-出现”duplicate-symbols-for-architecture-i386-clang”提示\" class=\"headerlink\" title=\"一,Xcode编译出现Link错误,出现”duplicate symbols for architecture i386 clang”提示.\"></a>一,Xcode编译出现Link错误,出现”duplicate symbols for architecture i386 clang”提示.</h1><p>问题:链接时,项目有重名文件.</p>\n<p>解决:</p>\n<p>根据错误提示,做如下检查:<br>1.Taraget-&gt;Build Settings-&gt;Link Binary With Libraries检查是否有重复lib.</p>\n<p>2.全工程搜索下重名文件,决定如何删除.</p>\n<h1 id=\"二-关于Category位于静态库时-引用该静态库的工程使用Category-出现”unrecognized-selector-sent-to-class”提示\"><a href=\"#二-关于Category位于静态库时-引用该静态库的工程使用Category-出现”unrecognized-selector-sent-to-class”提示\" class=\"headerlink\" title=\"二,关于Category位于静态库时,引用该静态库的工程使用Category,出现”unrecognized selector sent to class”提示.\"></a>二,关于Category位于静态库时,引用该静态库的工程使用Category,出现”unrecognized selector sent to class”提示.</h1><p>问题:标准UNIX静态库与Objective-C之间Linker的差异.在标准的UNIX静态库内,linker symbol是依照每一个类别而产生的,但由于Category并没有真正产生一个类别,所以出错.</p>\n<p>解决:</p>\n<p>1.在该静态库的Taraget-&gt;Build Settings-&gt;Other Linker Flags-&gt;加上 <code>-ObjC</code>.</p>\n<p>2.在使用该静态库的工程Taraget-&gt;Build Settings-&gt;Other Linker Flags-&gt;加上<code>-all_load</code>或<code>-force_load.</code></p>\n<h1 id=\"三-编译warning：ld-warning-directory-not-found-for-option-‘-L’\"><a href=\"#三-编译warning：ld-warning-directory-not-found-for-option-‘-L’\" class=\"headerlink\" title=\"三,编译warning：ld: warning: directory not found for option ‘-L’.\"></a>三,编译warning：ld: warning: directory not found for option ‘-L’.</h1><p>问题:通常是Path问题.</p>\n<p>解决:</p>\n<p>Taraget-&gt;Build Settings-&gt;Library Search Paths 和 Framework Search Paths,删掉编译报warning的路径即OK</p>\n<h1 id=\"四-引入-带源码的-静态库所需配置\"><a href=\"#四-引入-带源码的-静态库所需配置\" class=\"headerlink\" title=\"四,引入(带源码的)静态库所需配置.\"></a>四,引入(带源码的)静态库所需配置.</h1><p>步骤:</p>\n<p>1.Add Files to.. 加入静态库的.xcodeproj 文件,不要勾选Copy Items.. 选项。(可以先把源代码项目先复制到使用项目文件夹下)</p>\n<p>2.Target-&gt;Build Phases-&gt;Target Dependecies-&gt;加静态库 &amp;&amp; Link Binary With Libraries-&gt;加静态库.</p>\n<p>3.配置静态库头文件路径,在Taraget-&gt;Build Settings-&gt;User Header Search Paths-&gt;配上静态库的物理路径.</p>\n<p>[错误tips: 若出现加入的.xcodeproj无法展开,则在Xcode中关闭静态库项目即可]</p>\n<p>PS:只有.a 和 .h的静态库,则直接拖入项目即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-Xcode编译出现Link错误-出现”duplicate-symbols-for-architecture-i386-clang”提示\"><a href=\"#一-Xcode编译出现Link错误-出现”duplicate-symbols-for-architecture-i386-clang”提示\" class=\"headerlink\" title=\"一,Xcode编译出现Link错误,出现”duplicate symbols for architecture i386 clang”提示.\"></a>一,Xcode编译出现Link错误,出现”duplicate symbols for architecture i386 clang”提示.</h1><p>问题:链接时,项目有重名文件.</p>\n<p>解决:</p>\n<p>根据错误提示,做如下检查:<br>1.Taraget-&gt;Build Settings-&gt;Link Binary With Libraries检查是否有重复lib.</p>\n<p>2.全工程搜索下重名文件,决定如何删除.</p>\n<h1 id=\"二-关于Category位于静态库时-引用该静态库的工程使用Category-出现”unrecognized-selector-sent-to-class”提示\"><a href=\"#二-关于Category位于静态库时-引用该静态库的工程使用Category-出现”unrecognized-selector-sent-to-class”提示\" class=\"headerlink\" title=\"二,关于Category位于静态库时,引用该静态库的工程使用Category,出现”unrecognized selector sent to class”提示.\"></a>二,关于Category位于静态库时,引用该静态库的工程使用Category,出现”unrecognized selector sent to class”提示.</h1><p>问题:标准UNIX静态库与Objective-C之间Linker的差异.在标准的UNIX静态库内,linker symbol是依照每一个类别而产生的,但由于Category并没有真正产生一个类别,所以出错.</p>\n<p>解决:</p>\n<p>1.在该静态库的Taraget-&gt;Build Settings-&gt;Other Linker Flags-&gt;加上 <code>-ObjC</code>.</p>\n<p>2.在使用该静态库的工程Taraget-&gt;Build Settings-&gt;Other Linker Flags-&gt;加上<code>-all_load</code>或<code>-force_load.</code></p>\n<h1 id=\"三-编译warning：ld-warning-directory-not-found-for-option-‘-L’\"><a href=\"#三-编译warning：ld-warning-directory-not-found-for-option-‘-L’\" class=\"headerlink\" title=\"三,编译warning：ld: warning: directory not found for option ‘-L’.\"></a>三,编译warning：ld: warning: directory not found for option ‘-L’.</h1><p>问题:通常是Path问题.</p>\n<p>解决:</p>\n<p>Taraget-&gt;Build Settings-&gt;Library Search Paths 和 Framework Search Paths,删掉编译报warning的路径即OK</p>\n<h1 id=\"四-引入-带源码的-静态库所需配置\"><a href=\"#四-引入-带源码的-静态库所需配置\" class=\"headerlink\" title=\"四,引入(带源码的)静态库所需配置.\"></a>四,引入(带源码的)静态库所需配置.</h1><p>步骤:</p>\n<p>1.Add Files to.. 加入静态库的.xcodeproj 文件,不要勾选Copy Items.. 选项。(可以先把源代码项目先复制到使用项目文件夹下)</p>\n<p>2.Target-&gt;Build Phases-&gt;Target Dependecies-&gt;加静态库 &amp;&amp; Link Binary With Libraries-&gt;加静态库.</p>\n<p>3.配置静态库头文件路径,在Taraget-&gt;Build Settings-&gt;User Header Search Paths-&gt;配上静态库的物理路径.</p>\n<p>[错误tips: 若出现加入的.xcodeproj无法展开,则在Xcode中关闭静态库项目即可]</p>\n<p>PS:只有.a 和 .h的静态库,则直接拖入项目即可。</p>\n"},{"title":"浏览器判断是否安装了ios/android客户端程序","date":"2014-11-04T04:10:31.000Z","_content":"```\n<html>\n\n<head>\n\n<meta name=\"viewport\" content=\"width=device-width\" />\n\n</head>\n\n<body>\n\n<h2><a id=\"applink1\" href=\"mtcmtc://profile/116201417\">Open scheme(mtcmtc) defined in iPhone with parameters </a></h2>\n\n<h2><a id=\"applink2\" href=\"unknown://nowhere\">open unknown with fallback to appstore</a></h2>\n\n<p><i>Only works on iPhone!</i></p>\n\n\n\n<script type=\"text/javascript\">\n\n// To avoid the \"protocol not supported\" alert, fail must open another app.\n\nvar appstore = \"itms://itunes.apple.com/us/app/facebook/id284882215?mt=8&uo=6\";\n\nfunction applink(fail){\n\nreturn function(){\n\nvar clickedAt = +new Date;\n\n// During tests on 3g/3gs this timeout fires immediately if less than 500ms.\n\nsetTimeout(function(){\n\n// To avoid failing on return to MobileSafari, ensure freshness!\n\nif (+new Date - clickedAt < 2000){\n\nwindow.location = fail;\n\n}\n\n}, 500);\n\n};\n\n}\n\ndocument.getElementById(\"applink1\").onclick = applink(appstore);\n\ndocument.getElementById(\"applink2\").onclick = applink(appstore);\n\n</script>\n\n</body>\n\n</html>\n\n```\n\n其原理就是为HTML页面中的超链接点击事件增加一个setTimeout方法.\n\n\n\n如果在iPhone上面500ms内，本机有应用程序能解析这个协议并打开程序，则这个回调方法失效；如果本机没有应用程序能解析该协议或者500ms内没有打开个程序，则执行setTimeout里面的function，就是跳转到apple的itunes。\n\n\n我 用同样的原理来处理android的javascript跳转，发现如果本机没有程序注册intent-filter for 这个协议，那么android内置的browser就会处理这个协议并且立即给出反应(404，你懂的),不会像iPhone一样去执行 setTimeout里面的function，即便你把500ms改成0ms也不管用。\n\n我就开始了我的Google search之旅，最终在stackoverflow一个不起眼的地方找到solution。\n\n\n\n不解释，先给出源代码\n\n\n\nandroid里面androidManifest.xml文件对activity的配置，如何配置就不表述了，表达能力有限，请参考developer.android.com\n\n```\n<activity android:name=\".ui.UploadActivity\" android:screenOrientation=\"portrait\">\n\n<intent-filter>\n\n<data android:scheme=\"http\" android:host=\"192.168.167.33\" android:port=\"8088\" android:path=\"/mi-tracker-web/download.html\"/>\n\n<action android:name=\"android.intent.action.VIEW\" />\n\n<category android:name=\"android.intent.category.DEFAULT\" />\n\n<category android:name=\"android.intent.category.BROWSABLE\" />\n\n</intent-filter>\n\n</activity>\n\n```\n\nHTML页面中指向该应用程序的hyperlink\n\n\n```\n<a id=\"applink1\" href=\"http://192.168.167.33:8088/mi-tracker-web/download.html\">\n\nOpen Application</a>\n```\n\n\n\n不难发现，在androidManifest.xml中配置的filter中data的属性表述，在下面的HTML.href中全部看到了。请注意，这两个路径要全部一致，不能有差别，否则android系统就不会拦截这个hyperlink。\n\n好了，为什么我说这个solution能解决我们当初提出来的需求呢，答案在这里：\n\n\n\n如果说本机安装了这个应用程序\n\n\n\n在android browser中点击HTML中的applink1，browser会重定向到指定的链接，但是由于我们的应用程序在android OS中配置了一个intent-filter，也是针对这个制定的链接。就是说现在android系统有两个程序能处理这个链接：一个是系统的 browser，一个是配置了intent-filter的activity。现在点击这个链接，系统就会弹出一个选择：是用browser还是你指定的 activity打开。如果你选择你的activity，系统就会打开你的应用程序，如果你继续选择用browser，就没有然后了。\n\n\n\n如果说本机木有安装这个应用程序\n\n\n\n那么这个HTML里面的这个超链接就起很重要的左右了，这个download.html里面可以forward到android的应用商店\n\n\n\ndownload.jsp源代码如下。具体为什么请求的是download.html这个地址却访问到了download.jsp，就不解释了，struts2的东西。\n\n\n\n```\n\n\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n\npageEncoding=\"ISO-8859-1\"%>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n\n<html>\n\n<head>\n\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n\n<title>Insert title here</title>\n\n</head>\n\n<body>\n\n<script type=\"text/javascript\">\n\n<span style=\"white-space:pre\">    </span>window.location=\"market://search?q=com.singtel.travelbuddy.android\";</script>\n\n\n\nview plaincopy\n\n</body>\n\n</html>\n\n```\n\n在 androidManifest.xml中定义intent-filter的时候定义的scheme，host，port，path拼凑起来是一个有用的 HTTP路径，这样就算本机没有activity定义了intent-filter来捕获这个链接，那这个链接也会重定向到打开android market place的页面，继而打开应用商店。因为每个android手机都会捕获到market这个协议(如果android手机里面没有market商店，不 怪我哈)，系统就会自动打开market place应用商店并根据参数进入搜索页面并显示结果。\n\n","source":"_posts/浏览器判断是否安装了ios-android客户端程序.md","raw":"---\ntitle: 浏览器判断是否安装了ios/android客户端程序\ndate: 2014-11-04 12:10:31\ntags:\n    - JavaScript\n    - IOS\n    - Android\n---\n```\n<html>\n\n<head>\n\n<meta name=\"viewport\" content=\"width=device-width\" />\n\n</head>\n\n<body>\n\n<h2><a id=\"applink1\" href=\"mtcmtc://profile/116201417\">Open scheme(mtcmtc) defined in iPhone with parameters </a></h2>\n\n<h2><a id=\"applink2\" href=\"unknown://nowhere\">open unknown with fallback to appstore</a></h2>\n\n<p><i>Only works on iPhone!</i></p>\n\n\n\n<script type=\"text/javascript\">\n\n// To avoid the \"protocol not supported\" alert, fail must open another app.\n\nvar appstore = \"itms://itunes.apple.com/us/app/facebook/id284882215?mt=8&uo=6\";\n\nfunction applink(fail){\n\nreturn function(){\n\nvar clickedAt = +new Date;\n\n// During tests on 3g/3gs this timeout fires immediately if less than 500ms.\n\nsetTimeout(function(){\n\n// To avoid failing on return to MobileSafari, ensure freshness!\n\nif (+new Date - clickedAt < 2000){\n\nwindow.location = fail;\n\n}\n\n}, 500);\n\n};\n\n}\n\ndocument.getElementById(\"applink1\").onclick = applink(appstore);\n\ndocument.getElementById(\"applink2\").onclick = applink(appstore);\n\n</script>\n\n</body>\n\n</html>\n\n```\n\n其原理就是为HTML页面中的超链接点击事件增加一个setTimeout方法.\n\n\n\n如果在iPhone上面500ms内，本机有应用程序能解析这个协议并打开程序，则这个回调方法失效；如果本机没有应用程序能解析该协议或者500ms内没有打开个程序，则执行setTimeout里面的function，就是跳转到apple的itunes。\n\n\n我 用同样的原理来处理android的javascript跳转，发现如果本机没有程序注册intent-filter for 这个协议，那么android内置的browser就会处理这个协议并且立即给出反应(404，你懂的),不会像iPhone一样去执行 setTimeout里面的function，即便你把500ms改成0ms也不管用。\n\n我就开始了我的Google search之旅，最终在stackoverflow一个不起眼的地方找到solution。\n\n\n\n不解释，先给出源代码\n\n\n\nandroid里面androidManifest.xml文件对activity的配置，如何配置就不表述了，表达能力有限，请参考developer.android.com\n\n```\n<activity android:name=\".ui.UploadActivity\" android:screenOrientation=\"portrait\">\n\n<intent-filter>\n\n<data android:scheme=\"http\" android:host=\"192.168.167.33\" android:port=\"8088\" android:path=\"/mi-tracker-web/download.html\"/>\n\n<action android:name=\"android.intent.action.VIEW\" />\n\n<category android:name=\"android.intent.category.DEFAULT\" />\n\n<category android:name=\"android.intent.category.BROWSABLE\" />\n\n</intent-filter>\n\n</activity>\n\n```\n\nHTML页面中指向该应用程序的hyperlink\n\n\n```\n<a id=\"applink1\" href=\"http://192.168.167.33:8088/mi-tracker-web/download.html\">\n\nOpen Application</a>\n```\n\n\n\n不难发现，在androidManifest.xml中配置的filter中data的属性表述，在下面的HTML.href中全部看到了。请注意，这两个路径要全部一致，不能有差别，否则android系统就不会拦截这个hyperlink。\n\n好了，为什么我说这个solution能解决我们当初提出来的需求呢，答案在这里：\n\n\n\n如果说本机安装了这个应用程序\n\n\n\n在android browser中点击HTML中的applink1，browser会重定向到指定的链接，但是由于我们的应用程序在android OS中配置了一个intent-filter，也是针对这个制定的链接。就是说现在android系统有两个程序能处理这个链接：一个是系统的 browser，一个是配置了intent-filter的activity。现在点击这个链接，系统就会弹出一个选择：是用browser还是你指定的 activity打开。如果你选择你的activity，系统就会打开你的应用程序，如果你继续选择用browser，就没有然后了。\n\n\n\n如果说本机木有安装这个应用程序\n\n\n\n那么这个HTML里面的这个超链接就起很重要的左右了，这个download.html里面可以forward到android的应用商店\n\n\n\ndownload.jsp源代码如下。具体为什么请求的是download.html这个地址却访问到了download.jsp，就不解释了，struts2的东西。\n\n\n\n```\n\n\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n\npageEncoding=\"ISO-8859-1\"%>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n\n<html>\n\n<head>\n\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n\n<title>Insert title here</title>\n\n</head>\n\n<body>\n\n<script type=\"text/javascript\">\n\n<span style=\"white-space:pre\">    </span>window.location=\"market://search?q=com.singtel.travelbuddy.android\";</script>\n\n\n\nview plaincopy\n\n</body>\n\n</html>\n\n```\n\n在 androidManifest.xml中定义intent-filter的时候定义的scheme，host，port，path拼凑起来是一个有用的 HTTP路径，这样就算本机没有activity定义了intent-filter来捕获这个链接，那这个链接也会重定向到打开android market place的页面，继而打开应用商店。因为每个android手机都会捕获到market这个协议(如果android手机里面没有market商店，不 怪我哈)，系统就会自动打开market place应用商店并根据参数进入搜索页面并显示结果。\n\n","slug":"浏览器判断是否安装了ios-android客户端程序","published":1,"updated":"2021-07-08T10:51:59.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfr4000tnhs63i93gn6t","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;&lt;a id=&quot;applink1&quot; href=&quot;mtcmtc://profile/116201417&quot;&gt;Open scheme(mtcmtc) defined in iPhone with parameters &lt;/a&gt;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;&lt;a id=&quot;applink2&quot; href=&quot;unknown://nowhere&quot;&gt;open unknown with fallback to appstore&lt;/a&gt;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;i&gt;Only works on iPhone!&lt;/i&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// To avoid the &quot;protocol not supported&quot; alert, fail must open another app.</span><br><span class=\"line\"></span><br><span class=\"line\">var appstore = &quot;itms://itunes.apple.com/us/app/facebook/id284882215?mt=8&amp;uo=6&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function applink(fail)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">return function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">var clickedAt = +new Date;</span><br><span class=\"line\"></span><br><span class=\"line\">// During tests on 3g/3gs this timeout fires immediately if less than 500ms.</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// To avoid failing on return to MobileSafari, ensure freshness!</span><br><span class=\"line\"></span><br><span class=\"line\">if (+new Date - clickedAt &lt; 2000)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">window.location = fail;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;applink1&quot;).onclick = applink(appstore);</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;applink2&quot;).onclick = applink(appstore);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>其原理就是为HTML页面中的超链接点击事件增加一个setTimeout方法.</p>\n<p>如果在iPhone上面500ms内，本机有应用程序能解析这个协议并打开程序，则这个回调方法失效；如果本机没有应用程序能解析该协议或者500ms内没有打开个程序，则执行setTimeout里面的function，就是跳转到apple的itunes。</p>\n<p>我 用同样的原理来处理android的javascript跳转，发现如果本机没有程序注册intent-filter for 这个协议，那么android内置的browser就会处理这个协议并且立即给出反应(404，你懂的),不会像iPhone一样去执行 setTimeout里面的function，即便你把500ms改成0ms也不管用。</p>\n<p>我就开始了我的Google search之旅，最终在stackoverflow一个不起眼的地方找到solution。</p>\n<p>不解释，先给出源代码</p>\n<p>android里面androidManifest.xml文件对activity的配置，如何配置就不表述了，表达能力有限，请参考developer.android.com</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=&quot;.ui.UploadActivity&quot; android:screenOrientation=&quot;portrait&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;data android:scheme=&quot;http&quot; android:host=&quot;192.168.167.33&quot; android:port=&quot;8088&quot; android:path=&quot;/mi-tracker-web/download.html&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>\n<p>HTML页面中指向该应用程序的hyperlink</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a id=&quot;applink1&quot; href=&quot;http://192.168.167.33:8088/mi-tracker-web/download.html&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Open Application&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>不难发现，在androidManifest.xml中配置的filter中data的属性表述，在下面的HTML.href中全部看到了。请注意，这两个路径要全部一致，不能有差别，否则android系统就不会拦截这个hyperlink。</p>\n<p>好了，为什么我说这个solution能解决我们当初提出来的需求呢，答案在这里：</p>\n<p>如果说本机安装了这个应用程序</p>\n<p>在android browser中点击HTML中的applink1，browser会重定向到指定的链接，但是由于我们的应用程序在android OS中配置了一个intent-filter，也是针对这个制定的链接。就是说现在android系统有两个程序能处理这个链接：一个是系统的 browser，一个是配置了intent-filter的activity。现在点击这个链接，系统就会弹出一个选择：是用browser还是你指定的 activity打开。如果你选择你的activity，系统就会打开你的应用程序，如果你继续选择用browser，就没有然后了。</p>\n<p>如果说本机木有安装这个应用程序</p>\n<p>那么这个HTML里面的这个超链接就起很重要的左右了，这个download.html里面可以forward到android的应用商店</p>\n<p>download.jsp源代码如下。具体为什么请求的是download.html这个地址却访问到了download.jsp，就不解释了，struts2的东西。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">pageEncoding=&quot;ISO-8859-1&quot;%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;span style=&quot;white-space:pre&quot;&gt;    &lt;/span&gt;window.location=&quot;market://search?q=com.singtel.travelbuddy.android&quot;;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">view plaincopy</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>在 androidManifest.xml中定义intent-filter的时候定义的scheme，host，port，path拼凑起来是一个有用的 HTTP路径，这样就算本机没有activity定义了intent-filter来捕获这个链接，那这个链接也会重定向到打开android market place的页面，继而打开应用商店。因为每个android手机都会捕获到market这个协议(如果android手机里面没有market商店，不 怪我哈)，系统就会自动打开market place应用商店并根据参数进入搜索页面并显示结果。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;&lt;a id=&quot;applink1&quot; href=&quot;mtcmtc://profile/116201417&quot;&gt;Open scheme(mtcmtc) defined in iPhone with parameters &lt;/a&gt;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;&lt;a id=&quot;applink2&quot; href=&quot;unknown://nowhere&quot;&gt;open unknown with fallback to appstore&lt;/a&gt;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;i&gt;Only works on iPhone!&lt;/i&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// To avoid the &quot;protocol not supported&quot; alert, fail must open another app.</span><br><span class=\"line\"></span><br><span class=\"line\">var appstore = &quot;itms://itunes.apple.com/us/app/facebook/id284882215?mt=8&amp;uo=6&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function applink(fail)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">return function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">var clickedAt = +new Date;</span><br><span class=\"line\"></span><br><span class=\"line\">// During tests on 3g/3gs this timeout fires immediately if less than 500ms.</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// To avoid failing on return to MobileSafari, ensure freshness!</span><br><span class=\"line\"></span><br><span class=\"line\">if (+new Date - clickedAt &lt; 2000)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">window.location = fail;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;applink1&quot;).onclick = applink(appstore);</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;applink2&quot;).onclick = applink(appstore);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>其原理就是为HTML页面中的超链接点击事件增加一个setTimeout方法.</p>\n<p>如果在iPhone上面500ms内，本机有应用程序能解析这个协议并打开程序，则这个回调方法失效；如果本机没有应用程序能解析该协议或者500ms内没有打开个程序，则执行setTimeout里面的function，就是跳转到apple的itunes。</p>\n<p>我 用同样的原理来处理android的javascript跳转，发现如果本机没有程序注册intent-filter for 这个协议，那么android内置的browser就会处理这个协议并且立即给出反应(404，你懂的),不会像iPhone一样去执行 setTimeout里面的function，即便你把500ms改成0ms也不管用。</p>\n<p>我就开始了我的Google search之旅，最终在stackoverflow一个不起眼的地方找到solution。</p>\n<p>不解释，先给出源代码</p>\n<p>android里面androidManifest.xml文件对activity的配置，如何配置就不表述了，表达能力有限，请参考developer.android.com</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=&quot;.ui.UploadActivity&quot; android:screenOrientation=&quot;portrait&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;data android:scheme=&quot;http&quot; android:host=&quot;192.168.167.33&quot; android:port=&quot;8088&quot; android:path=&quot;/mi-tracker-web/download.html&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>\n<p>HTML页面中指向该应用程序的hyperlink</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a id=&quot;applink1&quot; href=&quot;http://192.168.167.33:8088/mi-tracker-web/download.html&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Open Application&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>不难发现，在androidManifest.xml中配置的filter中data的属性表述，在下面的HTML.href中全部看到了。请注意，这两个路径要全部一致，不能有差别，否则android系统就不会拦截这个hyperlink。</p>\n<p>好了，为什么我说这个solution能解决我们当初提出来的需求呢，答案在这里：</p>\n<p>如果说本机安装了这个应用程序</p>\n<p>在android browser中点击HTML中的applink1，browser会重定向到指定的链接，但是由于我们的应用程序在android OS中配置了一个intent-filter，也是针对这个制定的链接。就是说现在android系统有两个程序能处理这个链接：一个是系统的 browser，一个是配置了intent-filter的activity。现在点击这个链接，系统就会弹出一个选择：是用browser还是你指定的 activity打开。如果你选择你的activity，系统就会打开你的应用程序，如果你继续选择用browser，就没有然后了。</p>\n<p>如果说本机木有安装这个应用程序</p>\n<p>那么这个HTML里面的这个超链接就起很重要的左右了，这个download.html里面可以forward到android的应用商店</p>\n<p>download.jsp源代码如下。具体为什么请求的是download.html这个地址却访问到了download.jsp，就不解释了，struts2的东西。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">pageEncoding=&quot;ISO-8859-1&quot;%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;span style=&quot;white-space:pre&quot;&gt;    &lt;/span&gt;window.location=&quot;market://search?q=com.singtel.travelbuddy.android&quot;;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">view plaincopy</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>在 androidManifest.xml中定义intent-filter的时候定义的scheme，host，port，path拼凑起来是一个有用的 HTTP路径，这样就算本机没有activity定义了intent-filter来捕获这个链接，那这个链接也会重定向到打开android market place的页面，继而打开应用商店。因为每个android手机都会捕获到market这个协议(如果android手机里面没有market商店，不 怪我哈)，系统就会自动打开market place应用商店并根据参数进入搜索页面并显示结果。</p>\n"},{"title":"FFmpeg参数说明","date":"2013-08-29T09:48:55.000Z","_content":"\nffmpeg.exe -i F:\\1\\1.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\11.flv\nffmpeg -i F:\\01.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\test.flv\n使用-ss参数 作用（time_off set the start time offset），可以从指定时间点开始转换任务。如:\n转换文件格式的同时抓缩微图：\nffmpeg -i \"test.avi\" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg'\n对已有flv抓图：\nffmpeg -i \"test.flv\" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg'\n-ss后跟的时间单位为秒\nFfmpeg转换命令\nffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500\n-ab 24 -f 3gp test.3gp\n或者\nffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp\n\n\nffmpeg参数设定解说\n-bitexact 使用标准比特率\n-vcodec xvid 使用xvid压缩\n-s 320x240 指定分辨率\n-r 29.97 桢速率（可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）\n画面部分，选其一\n-b <比特率> 指定压缩比特率，似乎ffmpeg是自动VBR的，指定了就大概是平均比特率，比如768，1500这样的\n就是原来默认项目中有的\n-qscale <数值> 以<数值>质量为基础的VBR，取值0.01-255，约小质量越好\n-qmin <数值> 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31\n-sameq 使用和源同样的质量\n声音部分\n-acodec aac 设定声音编码\n-ac <数值> 设定声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质\n的DVDrip就可以用2\n-ar <采样率> 设定声音采样率，PSP只认24000\n-ab <比特率> 设定声音比特率，前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换\n君默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上\n-vol <百分比> 设定音量，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍\n这样，要得到一个高画质音质低容量的MP4的话，首先画面最好不要用固定比特率，而用VBR参数让程序自己去\n判断，而音质参数可以在原来的基础上提升一点，听起来要舒服很多，也不会太大（看情况调整\n\n\n例 子：ffmpeg -y -i \"1.avi\" -title \"Test\" -vcodec xvid -s 368x208 -r 29.97 -b 1500 -acodec aac -ac 2 -ar 24000 -ab 128 -vol 200 -f psp -muxvb 768 \"1.***\"\n\n解释：以上命令可以在Dos命令行中输入，也可以创建到批处理文件中运行。不过，前提是：要在ffmpeg所在的目录中执行（转换君所在目录下面的cores子目录）。\n参数：\n-y（覆盖输出文件，即如果1.***文件已经存在的话，不经提示就覆盖掉了）\n-i \"1.avi\"（输入文件是和ffmpeg在同一目录下的1.avi文件，可以自己加路径，改名字）\n-title \"Test\"（在PSP中显示的影片的标题）\n-vcodec xvid（使用XVID编码压缩视频，不能改的）\n-s 368x208（输出的分辨率为368x208，注意片源一定要是16:9的不然会变形）\n-r 29.97（帧数，一般就用这个吧）\n-b 1500（视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4的质量比6高）\n-acodec aac（音频编码用AAC）\n-ac 2（声道数1或2）\n-ar 24000（声音的采样频率，好像PSP只能支持24000Hz）\n-ab 128（音频数据流量，一般选择32、64、96、128）\n-vol 200（200%的音量，自己改）\n-f psp（输出psp专用格式）\n-muxvb 768（好像是给PSP机器识别的码率，一般选择384、512和768，我改成1500，PSP就说文件损坏了）\n\"1.***\"（输出文件名，也可以加路径改文件名）\n\n机器强劲的话，可以多开几个批处理文件，让它们并行处理。\nE:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv\n===========================================\nffmpeg.exe -i F:\\闪客之家\\闪客之歌.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\11.flv ffmpeg -i F:\\01.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\test.flv 使用-ss参数 作用（time_off set the start time offset），可以从指定时间点开始转换任务。如:\n转换文件格式的同时抓缩微图：\nffmpeg -i \"test.avi\" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg'\n对已有flv抓图：\nffmpeg -i \"test.flv\" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg'\n-ss后跟的时间单位为秒 Ffmpeg转换命令\nffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500 -ab 24 -f 3gp test.3gp\n或者\nffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp ffmpeg参数设定解说\n-bitexact 使用标准比特率\n-vcodec xvid 使用xvid压缩\n-s 320x240 指定分辨率\n-r 29.97 桢速率（可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）\n\n\n画面部分，选其一\n-b <比特率> 指定压缩比特率，似乎ffmpeg是自动VBR的，指定了就大概是平均比特率，比如768，1500这样的就是原来默认项目中有的\n-qscale <数值> 以<数值>质量为基础的VBR，取值0.01-255，约小质量越好\n-qmin <数值> 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31\n-sameq 使用和源同样的质量 声音部分\n-acodec aac 设定声音编码\n-ac <数值> 设定声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2\n-ar <采样率> 设定声音采样率，PSP只认24000\n-ab <比特率> 设定声音比特率，前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换君默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上\n-vol <百分比> 设定音量，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍 这样，要得到一个高画质音质低容量的MP4的话，首先画面最好不要用固定比特率，而用VBR参数让程序自己去判断，而音质参数可以在原来的基础上提升一 点，听起来要舒服很多，也不会太大（看情况调整 例子：ffmpeg -y -i \"1.avi\" -title \"Test\" -vcodec xvid -s 368x208 -r 29.97 -b 1500 -acodec aac -ac 2 -ar 24000 -ab 128 -vol 200 -f psp -muxvb 768 \"1.***\"\n\n解释：以上命令可以在Dos命令行中输入，也可以创建到批处理文件中运行。不过，前提是：要在ffmpeg所在的目录中执行（转换君所在目录下面的cores子目录）。\n参数：\n-y（覆盖输出文件，即如果1.***文件已经存在的话，不经提示就覆盖掉了）\n-i \"1.avi\"（输入文件是和ffmpeg在同一目录下的1.avi文件，可以自己加路径，改名字）\n-title \"Test\"（在PSP中显示的影片的标题）\n-vcodec xvid（使用XVID编码压缩视频，不能改的）\n-s 368x208（输出的分辨率为368x208，注意片源一定要是16:9的不然会变形）\n-r 29.97（帧数，一般就用这个吧）\n-b 1500（视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4的质量比6高）\n-acodec aac（音频编码用AAC）\n-ac 2（声道数1或2）\n-ar 24000（声音的采样频率，好像PSP只能支持24000Hz）\n-ab 128（音频数据流量，一般选择32、64、96、128）\n-vol 200（200%的音量，自己改）\n-f psp（输出psp专用格式）\n-muxvb 768（好像是给PSP机器识别的码率，一般选择384、512和768，我改成1500，PSP就说文件损坏了）\n\"1.***\"（输出文件名，也可以加路径改文件名）\n\nP.S. 版主机器强劲的话，可以多开几个批处理文件，让它们并行处理。 E:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv\n\n\n\nFfmpeg使用语法\n\nffmpeg [[options][`-i' input_file]]... {[options] output_file}...\n\n如果没有输入文件，那么视音频捕捉就会起作用。\n\n作为通用的规则，选项一般用于下一个特定的文件。如果你给 -b 64选项，改选会设置下一个视频速率。对于原始输入文件，格式选项可能是需要的。\n\n缺省情况下，ffmpeg试图尽可能的无损转换，采用与输入同样的音频视频参数来输出。\n\n3．选项\n\na) 通用选项\n\n-L license\n\n-h 帮助\n\n-fromats 显示可用的格式，编解码的，协议的。。。\n\n-f fmt 强迫采用格式fmt\n\n-I filename 输入文件\n\n-y 覆盖输出文件\n\n-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持\n\n-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持\n\n-title string 设置标题\n\n-author string 设置作者\n\n-copyright string 设置版权\n\n-comment string 设置评论\n\n-target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置 ，只需要输入如下的就可以了：\nffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg\n\n-hq 激活高质量设置\n\n-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持\n\nb) 视频选项\n\n-b bitrate 设置比特率，缺省200kb/s\n\n-r fps 设置帧频 缺省25\n\n-s size 设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：\nSqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576\n\n-aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777\n\n-croptop size 设置顶部切除带大小 像素单位\n\n-cropbottom size -cropleft size -cropright size\n\n-padtop size 设置顶部补齐的大小 像素单位\n\n-padbottom size -padleft size -padright size -padcolor color 设置补齐条颜色(hex,6个16进制的数，红:绿:兰排列，比如 000000代表黑色)\n\n-vn 不做视频记录\n\n-bt tolerance 设置视频码率容忍度kbit/s\n\n-maxrate bitrate设置最大视频码率容忍度\n\n-minrate bitreate 设置最小视频码率容忍度\n\n-bufsize size 设置码率控制缓冲区大小\n\n-vcodec codec 强制使用codec编解码方式。 如果用copy表示原始编解码数据必须被拷贝。\n\n-sameq 使用同样视频质量作为源（VBR）\n\n-pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率\n\n-passlogfile file 选择两遍的纪录文件名为file\n\n\nc)高级视频选项\n\n-g gop_size 设置图像组大小\n\n-intra 仅适用帧内编码\n\n-qscale q 使用固定的视频量化标度(VBR)\n\n-qmin q 最小视频量化标度(VBR)\n\n-qmax q 最大视频量化标度(VBR)\n\n-qdiff q 量化标度间最大偏差 (VBR)\n\n-qblur blur 视频量化标度柔化(VBR)\n\n-qcomp compression 视频量化标度压缩(VBR)\n\n-rc_init_cplx complexity 一遍编码的初始复杂度\n\n-b_qfactor factor 在p和b帧间的qp因子\n\n-i_qfactor factor 在p和i帧间的qp因子\n\n-b_qoffset offset 在p和b帧间的qp偏差\n\n-i_qoffset offset 在p和i帧间的qp偏差\n\n-rc_eq equation 设置码率控制方程 默认tex^qComp\n\n-rc_override override 特定间隔下的速率控制重载\n\n-me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full\n\n-dct_algo algo 设置dct的算法 可用的有 0 FF_DCT_AUTO 缺省的DCT 1 FF_DCT_FASTINT 2 FF_DCT_INT 3 FF_DCT_MMX 4 FF_DCT_MLIB 5 FF_DCT_ALTIVEC\n\n-idct_algo algo 设置idct算法。可用的有 0 FF_IDCT_AUTO 缺省的IDCT 1 FF_IDCT_INT 2 FF_IDCT_SIMPLE 3 FF_IDCT_SIMPLEMMX 4 FF_IDCT_LIBMPEG2MMX 5 FF_IDCT_PS2 6 FF_IDCT_MLIB 7 FF_IDCT_ARM 8 FF_IDCT_ALTIVEC 9 FF_IDCT_SH4 10 FF_IDCT_SIMPLEARM\n\n-er n 设置错误残留为n 1 FF_ER_CAREFULL 缺省 2 FF_ER_COMPLIANT 3 FF_ER_AGGRESSIVE 4 FF_ER_VERY_AGGRESSIVE\n\n-ec bit_mask 设置错误掩蔽为bit_mask,该值为如下值的位掩码 1 FF_EC_GUESS_MVS (default=enabled) 2 FF_EC_DEBLOCK (default=enabled)\n\n-bf frames 使用frames B 帧，支持mpeg1,mpeg2,mpeg4\n\n-mbd mode 宏块决策 0 FF_MB_DECISION_SIMPLE 使用mb_cmp 1 FF_MB_DECISION_BITS 2 FF_MB_DECISION_RD\n\n-4mv 使用4个运动矢量 仅用于mpeg4\n\n-part 使用数据划分 仅用于mpeg4\n\n-bug param 绕过没有被自动监测到编码器的问题\n\n-strict strictness 跟标准的严格性\n\n-aic 使能高级帧内编码 h263+\n\n-umv 使能无限运动矢量 h263+\n\n-deinterlace 不采用交织方法\n\n-interlace 强迫交织法编码 仅对mpeg2和mpeg4有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大\n\n-psnr 计算压缩帧的psnr\n\n-vstats 输出视频编码统计到vstats_hhmmss.log\n\n-vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开\n\nD)音频选项\n\n-ab bitrate 设置音频码率\n\n-ar freq 设置音频采样率\n\n-ac channels 设置通道 缺省为1\n\n-an 不使能音频纪录\n\n-acodec codec 使用codec编解码\n\nE)音频/视频捕获选项\n\n-vd device 设置视频捕获设备。比如/dev/video0\n\n-vc channel 设置视频捕获通道 DV1394专用\n\n-tvstd standard 设置电视标准 NTSC PAL(SECAM)\n\n-dv1394 设置DV1394捕获\n\n-av device 设置音频设备 比如/dev/dsp\n\n\nF)高级选项\n\n-map file:stream 设置输入流映射\n\n-debug 打印特定调试信息\n\n-benchmark 为基准测试加入时间\n\n-hex 倾倒每一个输入包\n\n-bitexact 仅使用位精确算法 用于编解码测试\n\n-ps size 设置包大小，以bits为单位\n\n-re 以本地帧频读数据，主要用于模拟捕获设备\n\n-loop 循环输入流。只工作于图像流，用于ffserver测试\n","source":"_posts/ffmpeg参数说明.md","raw":"---\ntitle: FFmpeg参数说明\ndate: 2013-08-29 17:48:55\ntags:\n    - FFmpeg\n---\n\nffmpeg.exe -i F:\\1\\1.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\11.flv\nffmpeg -i F:\\01.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\test.flv\n使用-ss参数 作用（time_off set the start time offset），可以从指定时间点开始转换任务。如:\n转换文件格式的同时抓缩微图：\nffmpeg -i \"test.avi\" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg'\n对已有flv抓图：\nffmpeg -i \"test.flv\" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg'\n-ss后跟的时间单位为秒\nFfmpeg转换命令\nffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500\n-ab 24 -f 3gp test.3gp\n或者\nffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp\n\n\nffmpeg参数设定解说\n-bitexact 使用标准比特率\n-vcodec xvid 使用xvid压缩\n-s 320x240 指定分辨率\n-r 29.97 桢速率（可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）\n画面部分，选其一\n-b <比特率> 指定压缩比特率，似乎ffmpeg是自动VBR的，指定了就大概是平均比特率，比如768，1500这样的\n就是原来默认项目中有的\n-qscale <数值> 以<数值>质量为基础的VBR，取值0.01-255，约小质量越好\n-qmin <数值> 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31\n-sameq 使用和源同样的质量\n声音部分\n-acodec aac 设定声音编码\n-ac <数值> 设定声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质\n的DVDrip就可以用2\n-ar <采样率> 设定声音采样率，PSP只认24000\n-ab <比特率> 设定声音比特率，前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换\n君默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上\n-vol <百分比> 设定音量，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍\n这样，要得到一个高画质音质低容量的MP4的话，首先画面最好不要用固定比特率，而用VBR参数让程序自己去\n判断，而音质参数可以在原来的基础上提升一点，听起来要舒服很多，也不会太大（看情况调整\n\n\n例 子：ffmpeg -y -i \"1.avi\" -title \"Test\" -vcodec xvid -s 368x208 -r 29.97 -b 1500 -acodec aac -ac 2 -ar 24000 -ab 128 -vol 200 -f psp -muxvb 768 \"1.***\"\n\n解释：以上命令可以在Dos命令行中输入，也可以创建到批处理文件中运行。不过，前提是：要在ffmpeg所在的目录中执行（转换君所在目录下面的cores子目录）。\n参数：\n-y（覆盖输出文件，即如果1.***文件已经存在的话，不经提示就覆盖掉了）\n-i \"1.avi\"（输入文件是和ffmpeg在同一目录下的1.avi文件，可以自己加路径，改名字）\n-title \"Test\"（在PSP中显示的影片的标题）\n-vcodec xvid（使用XVID编码压缩视频，不能改的）\n-s 368x208（输出的分辨率为368x208，注意片源一定要是16:9的不然会变形）\n-r 29.97（帧数，一般就用这个吧）\n-b 1500（视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4的质量比6高）\n-acodec aac（音频编码用AAC）\n-ac 2（声道数1或2）\n-ar 24000（声音的采样频率，好像PSP只能支持24000Hz）\n-ab 128（音频数据流量，一般选择32、64、96、128）\n-vol 200（200%的音量，自己改）\n-f psp（输出psp专用格式）\n-muxvb 768（好像是给PSP机器识别的码率，一般选择384、512和768，我改成1500，PSP就说文件损坏了）\n\"1.***\"（输出文件名，也可以加路径改文件名）\n\n机器强劲的话，可以多开几个批处理文件，让它们并行处理。\nE:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv\n===========================================\nffmpeg.exe -i F:\\闪客之家\\闪客之歌.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\11.flv ffmpeg -i F:\\01.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\test.flv 使用-ss参数 作用（time_off set the start time offset），可以从指定时间点开始转换任务。如:\n转换文件格式的同时抓缩微图：\nffmpeg -i \"test.avi\" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg'\n对已有flv抓图：\nffmpeg -i \"test.flv\" -y -f image2 -ss 8 -t 0.001 -s 350x240 'test.jpg'\n-ss后跟的时间单位为秒 Ffmpeg转换命令\nffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500 -ab 24 -f 3gp test.3gp\n或者\nffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp ffmpeg参数设定解说\n-bitexact 使用标准比特率\n-vcodec xvid 使用xvid压缩\n-s 320x240 指定分辨率\n-r 29.97 桢速率（可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）\n\n\n画面部分，选其一\n-b <比特率> 指定压缩比特率，似乎ffmpeg是自动VBR的，指定了就大概是平均比特率，比如768，1500这样的就是原来默认项目中有的\n-qscale <数值> 以<数值>质量为基础的VBR，取值0.01-255，约小质量越好\n-qmin <数值> 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31\n-sameq 使用和源同样的质量 声音部分\n-acodec aac 设定声音编码\n-ac <数值> 设定声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2\n-ar <采样率> 设定声音采样率，PSP只认24000\n-ab <比特率> 设定声音比特率，前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换君默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上\n-vol <百分比> 设定音量，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍 这样，要得到一个高画质音质低容量的MP4的话，首先画面最好不要用固定比特率，而用VBR参数让程序自己去判断，而音质参数可以在原来的基础上提升一 点，听起来要舒服很多，也不会太大（看情况调整 例子：ffmpeg -y -i \"1.avi\" -title \"Test\" -vcodec xvid -s 368x208 -r 29.97 -b 1500 -acodec aac -ac 2 -ar 24000 -ab 128 -vol 200 -f psp -muxvb 768 \"1.***\"\n\n解释：以上命令可以在Dos命令行中输入，也可以创建到批处理文件中运行。不过，前提是：要在ffmpeg所在的目录中执行（转换君所在目录下面的cores子目录）。\n参数：\n-y（覆盖输出文件，即如果1.***文件已经存在的话，不经提示就覆盖掉了）\n-i \"1.avi\"（输入文件是和ffmpeg在同一目录下的1.avi文件，可以自己加路径，改名字）\n-title \"Test\"（在PSP中显示的影片的标题）\n-vcodec xvid（使用XVID编码压缩视频，不能改的）\n-s 368x208（输出的分辨率为368x208，注意片源一定要是16:9的不然会变形）\n-r 29.97（帧数，一般就用这个吧）\n-b 1500（视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4的质量比6高）\n-acodec aac（音频编码用AAC）\n-ac 2（声道数1或2）\n-ar 24000（声音的采样频率，好像PSP只能支持24000Hz）\n-ab 128（音频数据流量，一般选择32、64、96、128）\n-vol 200（200%的音量，自己改）\n-f psp（输出psp专用格式）\n-muxvb 768（好像是给PSP机器识别的码率，一般选择384、512和768，我改成1500，PSP就说文件损坏了）\n\"1.***\"（输出文件名，也可以加路径改文件名）\n\nP.S. 版主机器强劲的话，可以多开几个批处理文件，让它们并行处理。 E:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv\n\n\n\nFfmpeg使用语法\n\nffmpeg [[options][`-i' input_file]]... {[options] output_file}...\n\n如果没有输入文件，那么视音频捕捉就会起作用。\n\n作为通用的规则，选项一般用于下一个特定的文件。如果你给 -b 64选项，改选会设置下一个视频速率。对于原始输入文件，格式选项可能是需要的。\n\n缺省情况下，ffmpeg试图尽可能的无损转换，采用与输入同样的音频视频参数来输出。\n\n3．选项\n\na) 通用选项\n\n-L license\n\n-h 帮助\n\n-fromats 显示可用的格式，编解码的，协议的。。。\n\n-f fmt 强迫采用格式fmt\n\n-I filename 输入文件\n\n-y 覆盖输出文件\n\n-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持\n\n-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持\n\n-title string 设置标题\n\n-author string 设置作者\n\n-copyright string 设置版权\n\n-comment string 设置评论\n\n-target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置 ，只需要输入如下的就可以了：\nffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg\n\n-hq 激活高质量设置\n\n-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持\n\nb) 视频选项\n\n-b bitrate 设置比特率，缺省200kb/s\n\n-r fps 设置帧频 缺省25\n\n-s size 设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：\nSqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576\n\n-aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777\n\n-croptop size 设置顶部切除带大小 像素单位\n\n-cropbottom size -cropleft size -cropright size\n\n-padtop size 设置顶部补齐的大小 像素单位\n\n-padbottom size -padleft size -padright size -padcolor color 设置补齐条颜色(hex,6个16进制的数，红:绿:兰排列，比如 000000代表黑色)\n\n-vn 不做视频记录\n\n-bt tolerance 设置视频码率容忍度kbit/s\n\n-maxrate bitrate设置最大视频码率容忍度\n\n-minrate bitreate 设置最小视频码率容忍度\n\n-bufsize size 设置码率控制缓冲区大小\n\n-vcodec codec 强制使用codec编解码方式。 如果用copy表示原始编解码数据必须被拷贝。\n\n-sameq 使用同样视频质量作为源（VBR）\n\n-pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率\n\n-passlogfile file 选择两遍的纪录文件名为file\n\n\nc)高级视频选项\n\n-g gop_size 设置图像组大小\n\n-intra 仅适用帧内编码\n\n-qscale q 使用固定的视频量化标度(VBR)\n\n-qmin q 最小视频量化标度(VBR)\n\n-qmax q 最大视频量化标度(VBR)\n\n-qdiff q 量化标度间最大偏差 (VBR)\n\n-qblur blur 视频量化标度柔化(VBR)\n\n-qcomp compression 视频量化标度压缩(VBR)\n\n-rc_init_cplx complexity 一遍编码的初始复杂度\n\n-b_qfactor factor 在p和b帧间的qp因子\n\n-i_qfactor factor 在p和i帧间的qp因子\n\n-b_qoffset offset 在p和b帧间的qp偏差\n\n-i_qoffset offset 在p和i帧间的qp偏差\n\n-rc_eq equation 设置码率控制方程 默认tex^qComp\n\n-rc_override override 特定间隔下的速率控制重载\n\n-me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full\n\n-dct_algo algo 设置dct的算法 可用的有 0 FF_DCT_AUTO 缺省的DCT 1 FF_DCT_FASTINT 2 FF_DCT_INT 3 FF_DCT_MMX 4 FF_DCT_MLIB 5 FF_DCT_ALTIVEC\n\n-idct_algo algo 设置idct算法。可用的有 0 FF_IDCT_AUTO 缺省的IDCT 1 FF_IDCT_INT 2 FF_IDCT_SIMPLE 3 FF_IDCT_SIMPLEMMX 4 FF_IDCT_LIBMPEG2MMX 5 FF_IDCT_PS2 6 FF_IDCT_MLIB 7 FF_IDCT_ARM 8 FF_IDCT_ALTIVEC 9 FF_IDCT_SH4 10 FF_IDCT_SIMPLEARM\n\n-er n 设置错误残留为n 1 FF_ER_CAREFULL 缺省 2 FF_ER_COMPLIANT 3 FF_ER_AGGRESSIVE 4 FF_ER_VERY_AGGRESSIVE\n\n-ec bit_mask 设置错误掩蔽为bit_mask,该值为如下值的位掩码 1 FF_EC_GUESS_MVS (default=enabled) 2 FF_EC_DEBLOCK (default=enabled)\n\n-bf frames 使用frames B 帧，支持mpeg1,mpeg2,mpeg4\n\n-mbd mode 宏块决策 0 FF_MB_DECISION_SIMPLE 使用mb_cmp 1 FF_MB_DECISION_BITS 2 FF_MB_DECISION_RD\n\n-4mv 使用4个运动矢量 仅用于mpeg4\n\n-part 使用数据划分 仅用于mpeg4\n\n-bug param 绕过没有被自动监测到编码器的问题\n\n-strict strictness 跟标准的严格性\n\n-aic 使能高级帧内编码 h263+\n\n-umv 使能无限运动矢量 h263+\n\n-deinterlace 不采用交织方法\n\n-interlace 强迫交织法编码 仅对mpeg2和mpeg4有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大\n\n-psnr 计算压缩帧的psnr\n\n-vstats 输出视频编码统计到vstats_hhmmss.log\n\n-vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开\n\nD)音频选项\n\n-ab bitrate 设置音频码率\n\n-ar freq 设置音频采样率\n\n-ac channels 设置通道 缺省为1\n\n-an 不使能音频纪录\n\n-acodec codec 使用codec编解码\n\nE)音频/视频捕获选项\n\n-vd device 设置视频捕获设备。比如/dev/video0\n\n-vc channel 设置视频捕获通道 DV1394专用\n\n-tvstd standard 设置电视标准 NTSC PAL(SECAM)\n\n-dv1394 设置DV1394捕获\n\n-av device 设置音频设备 比如/dev/dsp\n\n\nF)高级选项\n\n-map file:stream 设置输入流映射\n\n-debug 打印特定调试信息\n\n-benchmark 为基准测试加入时间\n\n-hex 倾倒每一个输入包\n\n-bitexact 仅使用位精确算法 用于编解码测试\n\n-ps size 设置包大小，以bits为单位\n\n-re 以本地帧频读数据，主要用于模拟捕获设备\n\n-loop 循环输入流。只工作于图像流，用于ffserver测试\n","slug":"ffmpeg参数说明","published":1,"updated":"2021-07-08T09:20:31.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfr6000vnhs651j0mbmq","content":"<p>ffmpeg.exe -i F:\\1\\1.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\11.flv<br>ffmpeg -i F:\\01.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\test.flv<br>使用-ss参数 作用（time_off set the start time offset），可以从指定时间点开始转换任务。如:<br>转换文件格式的同时抓缩微图：<br>ffmpeg -i “test.avi” -y -f image2 -ss 8 -t 0.001 -s 350x240 ‘test.jpg’<br>对已有flv抓图：<br>ffmpeg -i “test.flv” -y -f image2 -ss 8 -t 0.001 -s 350x240 ‘test.jpg’<br>-ss后跟的时间单位为秒<br>Ffmpeg转换命令<br>ffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500<br>-ab 24 -f 3gp test.3gp<br>或者<br>ffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp</p>\n<p>ffmpeg参数设定解说<br>-bitexact 使用标准比特率<br>-vcodec xvid 使用xvid压缩<br>-s 320x240 指定分辨率<br>-r 29.97 桢速率（可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）<br>画面部分，选其一<br>-b &lt;比特率&gt; 指定压缩比特率，似乎ffmpeg是自动VBR的，指定了就大概是平均比特率，比如768，1500这样的<br>就是原来默认项目中有的<br>-qscale &lt;数值&gt; 以&lt;数值&gt;质量为基础的VBR，取值0.01-255，约小质量越好<br>-qmin &lt;数值&gt; 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31<br>-sameq 使用和源同样的质量<br>声音部分<br>-acodec aac 设定声音编码<br>-ac &lt;数值&gt; 设定声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质<br>的DVDrip就可以用2<br>-ar &lt;采样率&gt; 设定声音采样率，PSP只认24000<br>-ab &lt;比特率&gt; 设定声音比特率，前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换<br>君默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上<br>-vol &lt;百分比&gt; 设定音量，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍<br>这样，要得到一个高画质音质低容量的MP4的话，首先画面最好不要用固定比特率，而用VBR参数让程序自己去<br>判断，而音质参数可以在原来的基础上提升一点，听起来要舒服很多，也不会太大（看情况调整</p>\n<p>例 子：ffmpeg -y -i “1.avi” -title “Test” -vcodec xvid -s 368x208 -r 29.97 -b 1500 -acodec aac -ac 2 -ar 24000 -ab 128 -vol 200 -f psp -muxvb 768 “1.***”</p>\n<p>解释：以上命令可以在Dos命令行中输入，也可以创建到批处理文件中运行。不过，前提是：要在ffmpeg所在的目录中执行（转换君所在目录下面的cores子目录）。<br>参数：<br>-y（覆盖输出文件，即如果1.<strong><em>文件已经存在的话，不经提示就覆盖掉了）<br>-i “1.avi”（输入文件是和ffmpeg在同一目录下的1.avi文件，可以自己加路径，改名字）<br>-title “Test”（在PSP中显示的影片的标题）<br>-vcodec xvid（使用XVID编码压缩视频，不能改的）<br>-s 368x208（输出的分辨率为368x208，注意片源一定要是16:9的不然会变形）<br>-r 29.97（帧数，一般就用这个吧）<br>-b 1500（视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4的质量比6高）<br>-acodec aac（音频编码用AAC）<br>-ac 2（声道数1或2）<br>-ar 24000（声音的采样频率，好像PSP只能支持24000Hz）<br>-ab 128（音频数据流量，一般选择32、64、96、128）<br>-vol 200（200%的音量，自己改）<br>-f psp（输出psp专用格式）<br>-muxvb 768（好像是给PSP机器识别的码率，一般选择384、512和768，我改成1500，PSP就说文件损坏了）<br>“1.</em></strong>“（输出文件名，也可以加路径改文件名）</p>\n<p>机器强劲的话，可以多开几个批处理文件，让它们并行处理。</p>\n<h1 id=\"E-ffmpeg-exe-i-I-1-wmv-b-360-r-25-s-320x240-hq-deinterlace-ab-56-ar-22050-ac-1-D-2-flv\"><a href=\"#E-ffmpeg-exe-i-I-1-wmv-b-360-r-25-s-320x240-hq-deinterlace-ab-56-ar-22050-ac-1-D-2-flv\" class=\"headerlink\" title=\"E:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv\"></a>E:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv</h1><p>ffmpeg.exe -i F:\\闪客之家\\闪客之歌.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\11.flv ffmpeg -i F:\\01.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\test.flv 使用-ss参数 作用（time_off set the start time offset），可以从指定时间点开始转换任务。如:<br>转换文件格式的同时抓缩微图：<br>ffmpeg -i “test.avi” -y -f image2 -ss 8 -t 0.001 -s 350x240 ‘test.jpg’<br>对已有flv抓图：<br>ffmpeg -i “test.flv” -y -f image2 -ss 8 -t 0.001 -s 350x240 ‘test.jpg’<br>-ss后跟的时间单位为秒 Ffmpeg转换命令<br>ffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500 -ab 24 -f 3gp test.3gp<br>或者<br>ffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp ffmpeg参数设定解说<br>-bitexact 使用标准比特率<br>-vcodec xvid 使用xvid压缩<br>-s 320x240 指定分辨率<br>-r 29.97 桢速率（可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）</p>\n<p>画面部分，选其一<br>-b &lt;比特率&gt; 指定压缩比特率，似乎ffmpeg是自动VBR的，指定了就大概是平均比特率，比如768，1500这样的就是原来默认项目中有的<br>-qscale &lt;数值&gt; 以&lt;数值&gt;质量为基础的VBR，取值0.01-255，约小质量越好<br>-qmin &lt;数值&gt; 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31<br>-sameq 使用和源同样的质量 声音部分<br>-acodec aac 设定声音编码<br>-ac &lt;数值&gt; 设定声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2<br>-ar &lt;采样率&gt; 设定声音采样率，PSP只认24000<br>-ab &lt;比特率&gt; 设定声音比特率，前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换君默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上<br>-vol &lt;百分比&gt; 设定音量，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍 这样，要得到一个高画质音质低容量的MP4的话，首先画面最好不要用固定比特率，而用VBR参数让程序自己去判断，而音质参数可以在原来的基础上提升一 点，听起来要舒服很多，也不会太大（看情况调整 例子：ffmpeg -y -i “1.avi” -title “Test” -vcodec xvid -s 368x208 -r 29.97 -b 1500 -acodec aac -ac 2 -ar 24000 -ab 128 -vol 200 -f psp -muxvb 768 “1.***”</p>\n<p>解释：以上命令可以在Dos命令行中输入，也可以创建到批处理文件中运行。不过，前提是：要在ffmpeg所在的目录中执行（转换君所在目录下面的cores子目录）。<br>参数：<br>-y（覆盖输出文件，即如果1.<strong><em>文件已经存在的话，不经提示就覆盖掉了）<br>-i “1.avi”（输入文件是和ffmpeg在同一目录下的1.avi文件，可以自己加路径，改名字）<br>-title “Test”（在PSP中显示的影片的标题）<br>-vcodec xvid（使用XVID编码压缩视频，不能改的）<br>-s 368x208（输出的分辨率为368x208，注意片源一定要是16:9的不然会变形）<br>-r 29.97（帧数，一般就用这个吧）<br>-b 1500（视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4的质量比6高）<br>-acodec aac（音频编码用AAC）<br>-ac 2（声道数1或2）<br>-ar 24000（声音的采样频率，好像PSP只能支持24000Hz）<br>-ab 128（音频数据流量，一般选择32、64、96、128）<br>-vol 200（200%的音量，自己改）<br>-f psp（输出psp专用格式）<br>-muxvb 768（好像是给PSP机器识别的码率，一般选择384、512和768，我改成1500，PSP就说文件损坏了）<br>“1.</em></strong>“（输出文件名，也可以加路径改文件名）</p>\n<p>P.S. 版主机器强劲的话，可以多开几个批处理文件，让它们并行处理。 E:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv</p>\n<p>Ffmpeg使用语法</p>\n<p>ffmpeg [[options][`-i’ input_file]]… {[options] output_file}…</p>\n<p>如果没有输入文件，那么视音频捕捉就会起作用。</p>\n<p>作为通用的规则，选项一般用于下一个特定的文件。如果你给 -b 64选项，改选会设置下一个视频速率。对于原始输入文件，格式选项可能是需要的。</p>\n<p>缺省情况下，ffmpeg试图尽可能的无损转换，采用与输入同样的音频视频参数来输出。</p>\n<p>3．选项</p>\n<p>a) 通用选项</p>\n<p>-L license</p>\n<p>-h 帮助</p>\n<p>-fromats 显示可用的格式，编解码的，协议的。。。</p>\n<p>-f fmt 强迫采用格式fmt</p>\n<p>-I filename 输入文件</p>\n<p>-y 覆盖输出文件</p>\n<p>-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持</p>\n<p>-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持</p>\n<p>-title string 设置标题</p>\n<p>-author string 设置作者</p>\n<p>-copyright string 设置版权</p>\n<p>-comment string 设置评论</p>\n<p>-target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置 ，只需要输入如下的就可以了：<br>ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg</p>\n<p>-hq 激活高质量设置</p>\n<p>-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持</p>\n<p>b) 视频选项</p>\n<p>-b bitrate 设置比特率，缺省200kb/s</p>\n<p>-r fps 设置帧频 缺省25</p>\n<p>-s size 设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：<br>Sqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576</p>\n<p>-aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777</p>\n<p>-croptop size 设置顶部切除带大小 像素单位</p>\n<p>-cropbottom size -cropleft size -cropright size</p>\n<p>-padtop size 设置顶部补齐的大小 像素单位</p>\n<p>-padbottom size -padleft size -padright size -padcolor color 设置补齐条颜色(hex,6个16进制的数，红:绿:兰排列，比如 000000代表黑色)</p>\n<p>-vn 不做视频记录</p>\n<p>-bt tolerance 设置视频码率容忍度kbit/s</p>\n<p>-maxrate bitrate设置最大视频码率容忍度</p>\n<p>-minrate bitreate 设置最小视频码率容忍度</p>\n<p>-bufsize size 设置码率控制缓冲区大小</p>\n<p>-vcodec codec 强制使用codec编解码方式。 如果用copy表示原始编解码数据必须被拷贝。</p>\n<p>-sameq 使用同样视频质量作为源（VBR）</p>\n<p>-pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率</p>\n<p>-passlogfile file 选择两遍的纪录文件名为file</p>\n<p>c)高级视频选项</p>\n<p>-g gop_size 设置图像组大小</p>\n<p>-intra 仅适用帧内编码</p>\n<p>-qscale q 使用固定的视频量化标度(VBR)</p>\n<p>-qmin q 最小视频量化标度(VBR)</p>\n<p>-qmax q 最大视频量化标度(VBR)</p>\n<p>-qdiff q 量化标度间最大偏差 (VBR)</p>\n<p>-qblur blur 视频量化标度柔化(VBR)</p>\n<p>-qcomp compression 视频量化标度压缩(VBR)</p>\n<p>-rc_init_cplx complexity 一遍编码的初始复杂度</p>\n<p>-b_qfactor factor 在p和b帧间的qp因子</p>\n<p>-i_qfactor factor 在p和i帧间的qp因子</p>\n<p>-b_qoffset offset 在p和b帧间的qp偏差</p>\n<p>-i_qoffset offset 在p和i帧间的qp偏差</p>\n<p>-rc_eq equation 设置码率控制方程 默认tex^qComp</p>\n<p>-rc_override override 特定间隔下的速率控制重载</p>\n<p>-me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full</p>\n<p>-dct_algo algo 设置dct的算法 可用的有 0 FF_DCT_AUTO 缺省的DCT 1 FF_DCT_FASTINT 2 FF_DCT_INT 3 FF_DCT_MMX 4 FF_DCT_MLIB 5 FF_DCT_ALTIVEC</p>\n<p>-idct_algo algo 设置idct算法。可用的有 0 FF_IDCT_AUTO 缺省的IDCT 1 FF_IDCT_INT 2 FF_IDCT_SIMPLE 3 FF_IDCT_SIMPLEMMX 4 FF_IDCT_LIBMPEG2MMX 5 FF_IDCT_PS2 6 FF_IDCT_MLIB 7 FF_IDCT_ARM 8 FF_IDCT_ALTIVEC 9 FF_IDCT_SH4 10 FF_IDCT_SIMPLEARM</p>\n<p>-er n 设置错误残留为n 1 FF_ER_CAREFULL 缺省 2 FF_ER_COMPLIANT 3 FF_ER_AGGRESSIVE 4 FF_ER_VERY_AGGRESSIVE</p>\n<p>-ec bit_mask 设置错误掩蔽为bit_mask,该值为如下值的位掩码 1 FF_EC_GUESS_MVS (default=enabled) 2 FF_EC_DEBLOCK (default=enabled)</p>\n<p>-bf frames 使用frames B 帧，支持mpeg1,mpeg2,mpeg4</p>\n<p>-mbd mode 宏块决策 0 FF_MB_DECISION_SIMPLE 使用mb_cmp 1 FF_MB_DECISION_BITS 2 FF_MB_DECISION_RD</p>\n<p>-4mv 使用4个运动矢量 仅用于mpeg4</p>\n<p>-part 使用数据划分 仅用于mpeg4</p>\n<p>-bug param 绕过没有被自动监测到编码器的问题</p>\n<p>-strict strictness 跟标准的严格性</p>\n<p>-aic 使能高级帧内编码 h263+</p>\n<p>-umv 使能无限运动矢量 h263+</p>\n<p>-deinterlace 不采用交织方法</p>\n<p>-interlace 强迫交织法编码 仅对mpeg2和mpeg4有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大</p>\n<p>-psnr 计算压缩帧的psnr</p>\n<p>-vstats 输出视频编码统计到vstats_hhmmss.log</p>\n<p>-vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开</p>\n<p>D)音频选项</p>\n<p>-ab bitrate 设置音频码率</p>\n<p>-ar freq 设置音频采样率</p>\n<p>-ac channels 设置通道 缺省为1</p>\n<p>-an 不使能音频纪录</p>\n<p>-acodec codec 使用codec编解码</p>\n<p>E)音频/视频捕获选项</p>\n<p>-vd device 设置视频捕获设备。比如/dev/video0</p>\n<p>-vc channel 设置视频捕获通道 DV1394专用</p>\n<p>-tvstd standard 设置电视标准 NTSC PAL(SECAM)</p>\n<p>-dv1394 设置DV1394捕获</p>\n<p>-av device 设置音频设备 比如/dev/dsp</p>\n<p>F)高级选项</p>\n<p>-map file:stream 设置输入流映射</p>\n<p>-debug 打印特定调试信息</p>\n<p>-benchmark 为基准测试加入时间</p>\n<p>-hex 倾倒每一个输入包</p>\n<p>-bitexact 仅使用位精确算法 用于编解码测试</p>\n<p>-ps size 设置包大小，以bits为单位</p>\n<p>-re 以本地帧频读数据，主要用于模拟捕获设备</p>\n<p>-loop 循环输入流。只工作于图像流，用于ffserver测试</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ffmpeg.exe -i F:\\1\\1.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\11.flv<br>ffmpeg -i F:\\01.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\test.flv<br>使用-ss参数 作用（time_off set the start time offset），可以从指定时间点开始转换任务。如:<br>转换文件格式的同时抓缩微图：<br>ffmpeg -i “test.avi” -y -f image2 -ss 8 -t 0.001 -s 350x240 ‘test.jpg’<br>对已有flv抓图：<br>ffmpeg -i “test.flv” -y -f image2 -ss 8 -t 0.001 -s 350x240 ‘test.jpg’<br>-ss后跟的时间单位为秒<br>Ffmpeg转换命令<br>ffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500<br>-ab 24 -f 3gp test.3gp<br>或者<br>ffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp</p>\n<p>ffmpeg参数设定解说<br>-bitexact 使用标准比特率<br>-vcodec xvid 使用xvid压缩<br>-s 320x240 指定分辨率<br>-r 29.97 桢速率（可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）<br>画面部分，选其一<br>-b &lt;比特率&gt; 指定压缩比特率，似乎ffmpeg是自动VBR的，指定了就大概是平均比特率，比如768，1500这样的<br>就是原来默认项目中有的<br>-qscale &lt;数值&gt; 以&lt;数值&gt;质量为基础的VBR，取值0.01-255，约小质量越好<br>-qmin &lt;数值&gt; 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31<br>-sameq 使用和源同样的质量<br>声音部分<br>-acodec aac 设定声音编码<br>-ac &lt;数值&gt; 设定声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质<br>的DVDrip就可以用2<br>-ar &lt;采样率&gt; 设定声音采样率，PSP只认24000<br>-ab &lt;比特率&gt; 设定声音比特率，前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换<br>君默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上<br>-vol &lt;百分比&gt; 设定音量，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍<br>这样，要得到一个高画质音质低容量的MP4的话，首先画面最好不要用固定比特率，而用VBR参数让程序自己去<br>判断，而音质参数可以在原来的基础上提升一点，听起来要舒服很多，也不会太大（看情况调整</p>\n<p>例 子：ffmpeg -y -i “1.avi” -title “Test” -vcodec xvid -s 368x208 -r 29.97 -b 1500 -acodec aac -ac 2 -ar 24000 -ab 128 -vol 200 -f psp -muxvb 768 “1.***”</p>\n<p>解释：以上命令可以在Dos命令行中输入，也可以创建到批处理文件中运行。不过，前提是：要在ffmpeg所在的目录中执行（转换君所在目录下面的cores子目录）。<br>参数：<br>-y（覆盖输出文件，即如果1.<strong><em>文件已经存在的话，不经提示就覆盖掉了）<br>-i “1.avi”（输入文件是和ffmpeg在同一目录下的1.avi文件，可以自己加路径，改名字）<br>-title “Test”（在PSP中显示的影片的标题）<br>-vcodec xvid（使用XVID编码压缩视频，不能改的）<br>-s 368x208（输出的分辨率为368x208，注意片源一定要是16:9的不然会变形）<br>-r 29.97（帧数，一般就用这个吧）<br>-b 1500（视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4的质量比6高）<br>-acodec aac（音频编码用AAC）<br>-ac 2（声道数1或2）<br>-ar 24000（声音的采样频率，好像PSP只能支持24000Hz）<br>-ab 128（音频数据流量，一般选择32、64、96、128）<br>-vol 200（200%的音量，自己改）<br>-f psp（输出psp专用格式）<br>-muxvb 768（好像是给PSP机器识别的码率，一般选择384、512和768，我改成1500，PSP就说文件损坏了）<br>“1.</em></strong>“（输出文件名，也可以加路径改文件名）</p>\n<p>机器强劲的话，可以多开几个批处理文件，让它们并行处理。</p>\n<h1 id=\"E-ffmpeg-exe-i-I-1-wmv-b-360-r-25-s-320x240-hq-deinterlace-ab-56-ar-22050-ac-1-D-2-flv\"><a href=\"#E-ffmpeg-exe-i-I-1-wmv-b-360-r-25-s-320x240-hq-deinterlace-ab-56-ar-22050-ac-1-D-2-flv\" class=\"headerlink\" title=\"E:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv\"></a>E:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv</h1><p>ffmpeg.exe -i F:\\闪客之家\\闪客之歌.mp3 -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\11.flv ffmpeg -i F:\\01.wmv -ab 56 -ar 22050 -b 500 -r 15 -s 320x240 f:\\test.flv 使用-ss参数 作用（time_off set the start time offset），可以从指定时间点开始转换任务。如:<br>转换文件格式的同时抓缩微图：<br>ffmpeg -i “test.avi” -y -f image2 -ss 8 -t 0.001 -s 350x240 ‘test.jpg’<br>对已有flv抓图：<br>ffmpeg -i “test.flv” -y -f image2 -ss 8 -t 0.001 -s 350x240 ‘test.jpg’<br>-ss后跟的时间单位为秒 Ffmpeg转换命令<br>ffmpeg -y -i test.mpeg -bitexact -vcodec h263 -b 128 -r 15 -s 176x144 -acodec aac -ac 2 -ar 22500 -ab 24 -f 3gp test.3gp<br>或者<br>ffmpeg -y -i test.mpeg -ac 1 -acodec amr_nb -ar 8000 -s 176x144 -b 128 -r 15 test.3gp ffmpeg参数设定解说<br>-bitexact 使用标准比特率<br>-vcodec xvid 使用xvid压缩<br>-s 320x240 指定分辨率<br>-r 29.97 桢速率（可以改，确认非标准桢率会导致音画不同步，所以只能设定为15或者29.97）</p>\n<p>画面部分，选其一<br>-b &lt;比特率&gt; 指定压缩比特率，似乎ffmpeg是自动VBR的，指定了就大概是平均比特率，比如768，1500这样的就是原来默认项目中有的<br>-qscale &lt;数值&gt; 以&lt;数值&gt;质量为基础的VBR，取值0.01-255，约小质量越好<br>-qmin &lt;数值&gt; 设定最小质量，与-qmax（设定最大质量）共用，比如-qmin 10 -qmax 31<br>-sameq 使用和源同样的质量 声音部分<br>-acodec aac 设定声音编码<br>-ac &lt;数值&gt; 设定声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2<br>-ar &lt;采样率&gt; 设定声音采样率，PSP只认24000<br>-ab &lt;比特率&gt; 设定声音比特率，前面-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换君默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80）以上<br>-vol &lt;百分比&gt; 设定音量，某些DVDrip的AC3轨音量极小，转换时可以用这个提高音量，比如200就是原来的2倍 这样，要得到一个高画质音质低容量的MP4的话，首先画面最好不要用固定比特率，而用VBR参数让程序自己去判断，而音质参数可以在原来的基础上提升一 点，听起来要舒服很多，也不会太大（看情况调整 例子：ffmpeg -y -i “1.avi” -title “Test” -vcodec xvid -s 368x208 -r 29.97 -b 1500 -acodec aac -ac 2 -ar 24000 -ab 128 -vol 200 -f psp -muxvb 768 “1.***”</p>\n<p>解释：以上命令可以在Dos命令行中输入，也可以创建到批处理文件中运行。不过，前提是：要在ffmpeg所在的目录中执行（转换君所在目录下面的cores子目录）。<br>参数：<br>-y（覆盖输出文件，即如果1.<strong><em>文件已经存在的话，不经提示就覆盖掉了）<br>-i “1.avi”（输入文件是和ffmpeg在同一目录下的1.avi文件，可以自己加路径，改名字）<br>-title “Test”（在PSP中显示的影片的标题）<br>-vcodec xvid（使用XVID编码压缩视频，不能改的）<br>-s 368x208（输出的分辨率为368x208，注意片源一定要是16:9的不然会变形）<br>-r 29.97（帧数，一般就用这个吧）<br>-b 1500（视频数据流量，用-b xxxx的指令则使用固定码率，数字随便改，1500以上没效果；还可以用动态码率如：-qscale 4和-qscale 6，4的质量比6高）<br>-acodec aac（音频编码用AAC）<br>-ac 2（声道数1或2）<br>-ar 24000（声音的采样频率，好像PSP只能支持24000Hz）<br>-ab 128（音频数据流量，一般选择32、64、96、128）<br>-vol 200（200%的音量，自己改）<br>-f psp（输出psp专用格式）<br>-muxvb 768（好像是给PSP机器识别的码率，一般选择384、512和768，我改成1500，PSP就说文件损坏了）<br>“1.</em></strong>“（输出文件名，也可以加路径改文件名）</p>\n<p>P.S. 版主机器强劲的话，可以多开几个批处理文件，让它们并行处理。 E:\\ffmpeg.exe -i I:\\1.wmv -b 360 -r 25 -s 320x240 -hq -deinterlace -ab 56 -ar 22050 -ac 1 D:\\2.flv</p>\n<p>Ffmpeg使用语法</p>\n<p>ffmpeg [[options][`-i’ input_file]]… {[options] output_file}…</p>\n<p>如果没有输入文件，那么视音频捕捉就会起作用。</p>\n<p>作为通用的规则，选项一般用于下一个特定的文件。如果你给 -b 64选项，改选会设置下一个视频速率。对于原始输入文件，格式选项可能是需要的。</p>\n<p>缺省情况下，ffmpeg试图尽可能的无损转换，采用与输入同样的音频视频参数来输出。</p>\n<p>3．选项</p>\n<p>a) 通用选项</p>\n<p>-L license</p>\n<p>-h 帮助</p>\n<p>-fromats 显示可用的格式，编解码的，协议的。。。</p>\n<p>-f fmt 强迫采用格式fmt</p>\n<p>-I filename 输入文件</p>\n<p>-y 覆盖输出文件</p>\n<p>-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持</p>\n<p>-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持</p>\n<p>-title string 设置标题</p>\n<p>-author string 设置作者</p>\n<p>-copyright string 设置版权</p>\n<p>-comment string 设置评论</p>\n<p>-target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置 ，只需要输入如下的就可以了：<br>ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg</p>\n<p>-hq 激活高质量设置</p>\n<p>-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持</p>\n<p>b) 视频选项</p>\n<p>-b bitrate 设置比特率，缺省200kb/s</p>\n<p>-r fps 设置帧频 缺省25</p>\n<p>-s size 设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：<br>Sqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576</p>\n<p>-aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777</p>\n<p>-croptop size 设置顶部切除带大小 像素单位</p>\n<p>-cropbottom size -cropleft size -cropright size</p>\n<p>-padtop size 设置顶部补齐的大小 像素单位</p>\n<p>-padbottom size -padleft size -padright size -padcolor color 设置补齐条颜色(hex,6个16进制的数，红:绿:兰排列，比如 000000代表黑色)</p>\n<p>-vn 不做视频记录</p>\n<p>-bt tolerance 设置视频码率容忍度kbit/s</p>\n<p>-maxrate bitrate设置最大视频码率容忍度</p>\n<p>-minrate bitreate 设置最小视频码率容忍度</p>\n<p>-bufsize size 设置码率控制缓冲区大小</p>\n<p>-vcodec codec 强制使用codec编解码方式。 如果用copy表示原始编解码数据必须被拷贝。</p>\n<p>-sameq 使用同样视频质量作为源（VBR）</p>\n<p>-pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率</p>\n<p>-passlogfile file 选择两遍的纪录文件名为file</p>\n<p>c)高级视频选项</p>\n<p>-g gop_size 设置图像组大小</p>\n<p>-intra 仅适用帧内编码</p>\n<p>-qscale q 使用固定的视频量化标度(VBR)</p>\n<p>-qmin q 最小视频量化标度(VBR)</p>\n<p>-qmax q 最大视频量化标度(VBR)</p>\n<p>-qdiff q 量化标度间最大偏差 (VBR)</p>\n<p>-qblur blur 视频量化标度柔化(VBR)</p>\n<p>-qcomp compression 视频量化标度压缩(VBR)</p>\n<p>-rc_init_cplx complexity 一遍编码的初始复杂度</p>\n<p>-b_qfactor factor 在p和b帧间的qp因子</p>\n<p>-i_qfactor factor 在p和i帧间的qp因子</p>\n<p>-b_qoffset offset 在p和b帧间的qp偏差</p>\n<p>-i_qoffset offset 在p和i帧间的qp偏差</p>\n<p>-rc_eq equation 设置码率控制方程 默认tex^qComp</p>\n<p>-rc_override override 特定间隔下的速率控制重载</p>\n<p>-me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full</p>\n<p>-dct_algo algo 设置dct的算法 可用的有 0 FF_DCT_AUTO 缺省的DCT 1 FF_DCT_FASTINT 2 FF_DCT_INT 3 FF_DCT_MMX 4 FF_DCT_MLIB 5 FF_DCT_ALTIVEC</p>\n<p>-idct_algo algo 设置idct算法。可用的有 0 FF_IDCT_AUTO 缺省的IDCT 1 FF_IDCT_INT 2 FF_IDCT_SIMPLE 3 FF_IDCT_SIMPLEMMX 4 FF_IDCT_LIBMPEG2MMX 5 FF_IDCT_PS2 6 FF_IDCT_MLIB 7 FF_IDCT_ARM 8 FF_IDCT_ALTIVEC 9 FF_IDCT_SH4 10 FF_IDCT_SIMPLEARM</p>\n<p>-er n 设置错误残留为n 1 FF_ER_CAREFULL 缺省 2 FF_ER_COMPLIANT 3 FF_ER_AGGRESSIVE 4 FF_ER_VERY_AGGRESSIVE</p>\n<p>-ec bit_mask 设置错误掩蔽为bit_mask,该值为如下值的位掩码 1 FF_EC_GUESS_MVS (default=enabled) 2 FF_EC_DEBLOCK (default=enabled)</p>\n<p>-bf frames 使用frames B 帧，支持mpeg1,mpeg2,mpeg4</p>\n<p>-mbd mode 宏块决策 0 FF_MB_DECISION_SIMPLE 使用mb_cmp 1 FF_MB_DECISION_BITS 2 FF_MB_DECISION_RD</p>\n<p>-4mv 使用4个运动矢量 仅用于mpeg4</p>\n<p>-part 使用数据划分 仅用于mpeg4</p>\n<p>-bug param 绕过没有被自动监测到编码器的问题</p>\n<p>-strict strictness 跟标准的严格性</p>\n<p>-aic 使能高级帧内编码 h263+</p>\n<p>-umv 使能无限运动矢量 h263+</p>\n<p>-deinterlace 不采用交织方法</p>\n<p>-interlace 强迫交织法编码 仅对mpeg2和mpeg4有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大</p>\n<p>-psnr 计算压缩帧的psnr</p>\n<p>-vstats 输出视频编码统计到vstats_hhmmss.log</p>\n<p>-vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开</p>\n<p>D)音频选项</p>\n<p>-ab bitrate 设置音频码率</p>\n<p>-ar freq 设置音频采样率</p>\n<p>-ac channels 设置通道 缺省为1</p>\n<p>-an 不使能音频纪录</p>\n<p>-acodec codec 使用codec编解码</p>\n<p>E)音频/视频捕获选项</p>\n<p>-vd device 设置视频捕获设备。比如/dev/video0</p>\n<p>-vc channel 设置视频捕获通道 DV1394专用</p>\n<p>-tvstd standard 设置电视标准 NTSC PAL(SECAM)</p>\n<p>-dv1394 设置DV1394捕获</p>\n<p>-av device 设置音频设备 比如/dev/dsp</p>\n<p>F)高级选项</p>\n<p>-map file:stream 设置输入流映射</p>\n<p>-debug 打印特定调试信息</p>\n<p>-benchmark 为基准测试加入时间</p>\n<p>-hex 倾倒每一个输入包</p>\n<p>-bitexact 仅使用位精确算法 用于编解码测试</p>\n<p>-ps size 设置包大小，以bits为单位</p>\n<p>-re 以本地帧频读数据，主要用于模拟捕获设备</p>\n<p>-loop 循环输入流。只工作于图像流，用于ffserver测试</p>\n"},{"title":"移动端Model层与Server服务层自动化","date":"2017-01-31T18:09:05.000Z","_content":"\n# Model层自动化\n### 前言（纯属捎带扯一下，后端大咖勿看）\n谈到Model层自动化的产出我们就来从最初的地方开始讲，数据库！\n无论你是用啥写服务器如果还手写Model那真的只能说你够low我服！不过如果是手写Model自动生成数据库那另说，总的来说就是要么从数据库转实体出来，要么从实体转数据库这才有点意思。\n上边只是开玩笑下面正题，很多时候大家都无奈没办法不能说low不low，其中奥妙各有体会，通常有点规模的团队都是先定义表然后就出Model了\n### 后端的Model层\n后端数据库和实体互转的方案都不用Google，百度就能出来一大推，有直接读库生成的，也有从实体转sql生成库的，更有提前定义协议然后开始出对应模块对应语言的实体及sql\n### 移动端的Model层\n先继续谈会后台Model，这里要说的只是最好有一个提前定义的过程，这样一方面规范开发流程提前想好怎样建库合理，一方面有利于跨平台跨语言的开发，有了提前定义的协议，Model和枚举的各平台自动生成就方便了很多，写个简单的小程序即可，类型也就那几类。关键真的是一劳永逸，省去了大家互相校对的过程。\n自动化生成移动端乃至前端用的Model层说白了就是做个类型映射，细说的话基本就是分为两类，一类直接就着后端现有项目读Model层的文件，然后做个类型的映射直接导出移动端需要的类，另一类也就是设计数据库时先定义Model的协议，然后根据协议自动生成各个平台需要的实体，而协议定义通常用序列化后的数据如xml(极力抵制，结构复杂)，json，pb，sql文件都能干这事。\n### Model自动化实现\n上面说到了xml，json，pb，sql文件都能干这件事，但其中最容易就是json，github上搜个json class基本就能有一大片总有你想要的语言，但json的局限在于也就能转换一下model，当然通过特殊定义中间转换，枚举啥的也能搞定，在这我推荐pb，首先它就是专门用来定义协议的，枚举实体不用说都能搞定，包括默认值设置也能写出来，而且是谷歌出品本身是im通讯协议，被它序列化的数据在上面说的里面算是最小的，而另一方面关于转码参考https://github.com/google/protobuf/blob/master/docs/third_party.md ，直接开放了各个语言的转换方法，当然你根本用不到它里面写的那么复杂，它的里面实体可是直接带pb转换model方法的，如果不是开发im根本用不到，要删部分源码实现自己的需要也行，。。。（下面讲一下正经方法）\n#### Protobuf Convert转码\n下面放代码片段（反馈的人多放全的，之所以不想放还有个原因是这边实现有点粗）\n这里以Python为例，只是因为安装执行方便所以选它\n转成OC的例子，之所以选OC因为我就是个搞IOS的。。。写起来各个公司需求不同每次都要改改改。。。也就是这个原因懒得放全的了，因为用的人说到底还是需要手动改成自己想要的，没有通用的。。。\n<!-- more -->\n```python\n#头文件引用\nimport os\n\nfrom optparse import OptionParser\n#pb转成方便处理的对象\nfrom protoDef import *\n#读取pb的\nfrom protoReader import ProtoReader as reader\n#上边两个就不放源码了，感兴趣的人多再说，毕竟上边的实现只是读pb逻辑大家估计都有自己的好办法\n\nENUM_TYPE = 'NSInteger'\n#基础类型映射\ntypeMap = {\n'int64': 'NSNumber',\n'int32': 'NSNumber',\n'string': 'NSString',\n'bool': 'NSNumber',\n'float': 'NSNumber',\n'double': 'NSNumber',\n}\n#默认值映射\ndefaultMap = {\n'int64': '@(%s)',\n'int32': '@(%s)',\n'string': '@\"%s\"',\n'bool': '@(%s)',\n'float': '@(%s)',\n'double': '@(%s)',\n}\n\ndef _convertType(pClz):\nif typeMap.has_key(pClz):\nreturn typeMap[pClz]\nreturn pClz\n\ndef _convertDefault(pClz):\nif defaultMap.has_key(pClz):\nreturn defaultMap[pClz]\nreturn 'nil'\n#写文件方法（就是一点点输出oc的方法）\ndef _writeLine(outf, line = ''):\noutf.write(line + '\\n')\n\nclass IOSWriter:\ndef __init__(self, outDir, proto):\nself.outDir = outDir\nself.proto = proto\n\ndef __writeMsg(self, msg):\nif isDeprecated(msg.comment):\nreturn\n\nself.__writeMsgH(msg)#生成.h\nself.__writeMsgM(msg)#生成.m\n\n#为对应类添加前缀做为命名空间（oc没命名空间。。。）\ndef __makeMsgName(self, msg):\nif msg.protoPkg == '不想加前缀的条件':\nreturn msg.name\nreturn msg.protoPkg.upper() + msg.name\n\ndef __writeMsgH(self, msg):\nmsgName = self.__makeMsgName(msg)\npath = os.path.join(self.outDir, msg.name)\n\n# .h\noutf = file(path + '.h', 'w')\n_writeLine(outf, '/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n' % self.proto.filePath)\n# comment\n_writeLine(outf, '/**\\n * %s\\n */' % msg.comment)\n# import\n_writeLine(outf, '#import <Foundation/Foundation.h>')\nimportSet = set()\nfor field in msg.fields:\nif isDeprecated(field.comment):\ncontinue\nif self.proto.hasMsg(field.clz) and field.clz not in importSet:\nimportSet.add(field.clz)\nimportMsg = self.proto.getMsg(field.clz)\nimportName = self.__makeMsgName(importMsg)\nif self.__atClass(field):\n_writeLine(outf, '@class %s;' % importName)\nelse:\n_writeLine(outf, '#import \"%s.h\"' % importName)\n_writeLine(outf)\n# declare\n_writeLine(outf, '@interface %s : NSObject' % msgName)\n# field\nfor field in msg.fields:\nif isDeprecated(field.comment):\ncontinue\nif field.comment:\n_writeLine(outf, '/**\\n * %s\\n */' % field.comment)\nif field.repeated:\nif field.repeated and not typeMap.has_key(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\n_writeLine(outf, '@property(nonatomic, strong) NSMutableArray <%s*>* %s;' % (field.name, fieldType))\nelse\n_writeLine(outf, '@property(nonatomic, strong) NSMutableArray * %s;' % field.name)\nelif self.proto.hasMsg(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\nif fieldMsg.kind == Proto.PROTO_MSG:\n_writeLine(outf, '@property(nonatomic, strong) %s * %s;' % (fieldType, field.name))\nelif fieldMsg.kind == Proto.PROTO_ENUM:\n_writeLine(outf, '@property(nonatomic, assign) %s %s;' % (fieldType, field.name))\nelse:\nclz = _convertType(field.clz)\n_writeLine(outf, '@property(nonatomic, strong) %s * %s;' % (clz, field.name))\n# end\n_writeLine(outf, '\\n@end')\noutf.close()\n\ndef __atClass(self, field):\nreturn '@class' in field.comment\n\ndef __writeMsgM(self, msg):\nmsgName = self.__makeMsgName(msg)\npath = os.path.join(self.outDir, msgName)\n# .m\noutf = file(path + '.m', 'w')\n_writeLine(outf, '/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n' % self.proto.filePath)\n# import\n_writeLine(outf, '#import \"%s.h\"' % msgName)\nfor field in msg.fields:\nif self.proto.hasMsg(field.clz) and self.__atClass(field):\nimportMsg = self.proto.getMsg(field.clz)\nimportName = self.__makeMsgName(importMsg)\n_writeLine(outf, '#import \"%s.h\"' % importName)\n_writeLine(outf, \"\\n@implementation %s\" % msgName)\n_writeLine(outf)\n# repeated\nkvlist = [] #数组内实体类 数组\ndvlist = [] #默认值 数组\nfor field in msg.fields:\nif isDeprecated(field.comment):\ncontinue\nif typeMap.has_key(field.clz) and field.default:\ndefault=_convertDefault(field.default)\ndvlist.append((field.name,default))\nif field.repeated and not typeMap.has_key(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\nkvlist.append((field.name, fieldType))\n#默认值设置\nif len(dvlist) > 0:\n_writeLine(outf, \"- (id)init {\")\n_writeLine(outf, \"   if(self=[super init]){ \")\nfor i, (name, default) in enumerate(dvlist):\nline = '''   _%s=%s''' % (name, default)\n_writeLine(outf, line)\n_writeLine(outf, \"   } \")\n_writeLine(outf, \"   return self;\")\n_writeLine(outf, \"} \")\n\n#用了YYModel转换所以有了这个方法\nif len(kvlist) > 0:\n_writeLine(outf, \"+ (NSDictionary *)modelContainerPropertyGenericClass {\")\n_writeLine(outf, \"  return @{\")\nfor i, (name, clz) in enumerate(kvlist):\nline = '''    @\"%s\" : [%s class]''' % (name, clz)\nif i < len(kvlist) - 1:\nline = line + ','\n_writeLine(outf, line)\n_writeLine(outf, \"  };\")\n_writeLine(outf, \"}\")\n\n\n# end\n_writeLine(outf, '\\n@end')\noutf.close()\n\n#生成枚举，之所以有.h .m是为了搞枚举string\ndef __writeEnum(self, enum):\nif isDeprecated(enum.comment):\nreturn\nself.__writeEnumH(enum)\nself.__writeEnumM(enum)\n\ndef __writeEnumH(self, enum):\nenumName = self.__makeMsgName(enum)\npath = os.path.join(self.outDir, enumName)\n# .h\noutf = file(path + '.h', 'w')\n_writeLine(outf, '/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n' % self.proto.filePath)\n# comment\n_writeLine(outf, '/**\\n * %s\\n */' % enum.comment)\n# import\n_writeLine(outf, '#import <Foundation/Foundation.h>')\n_writeLine(outf)\n# declare\n_writeLine(outf, 'typedef enum {')\n# field\nfields = []\nfor field in enum.fields:\nif isDeprecated(field.comment):\ncontinue\nfields.append(field)\ni = 0\nfor field in fields:\ni += 1\nif field.comment:\n_writeLine(outf, '/**\\n * %s\\n */' % field.comment)\nif i == len(fields):\n_writeLine(outf, '  %s = %s' % (field.name, field.number))\nelse:\n_writeLine(outf, '  %s = %s,' % (field.name, field.number))\n_writeLine(outf, '} %s;' % enumName)\n_writeLine(outf)\n_writeLine(outf, '%s %sValueOf(NSString *text);' % (enumName, enumName))\n_writeLine(outf, 'NSString* %sDescription(%s value);' % (enumName, enumName))\n\noutf.close()\n\ndef __writeEnumM(self, enum):\nenumName = self.__makeMsgName(enum)\npath = os.path.join(self.outDir, enumName)\n# .m\noutf = file(path + '.m', 'w')\n_writeLine(outf, '/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n' % self.proto.filePath)\n# import\n_writeLine(outf, '#import \"%s.h\"' % enumName)\n_writeLine(outf)\n# valueOf\n_writeLine(outf, '%s %sValueOf(NSString *text) {' % (enumName, enumName))\n_writeLine(outf, '  if (text) {')\nfields = []\nfor field in enum.fields:\nif isDeprecated(field.comment):\ncontinue\nfields.append(field)\ni = 0;\nfor field in fields:\nif i == 0:\n_writeLine(outf, '    if ([text isEqualToString:@\"%s\"])' % field.name)\nelse:\n_writeLine(outf, '    else if ([text isEqualToString:@\"%s\"])' % field.name)\n_writeLine(outf, '      return %s;' % field.name)\ni += 1\n_writeLine(outf, '  }')\n_writeLine(outf, '  return -1;')\n_writeLine(outf, '}\\n')\n# description\n_writeLine(outf, 'NSString* %sDescription(%s value) {' % (enumName, enumName))\n_writeLine(outf, '  switch (value) {')\nfor field in fields:\n_writeLine(outf, '    case %s:' % field.name)\n_writeLine(outf, '      return @\"%s\";' % field.name)\n_writeLine(outf, '  }')\n_writeLine(outf, '  return @\"\";')\n_writeLine(outf, '}')\n\noutf.close()\n\ndef write(self):\nfor msg in self.proto.definedMsgs:\nif msg.kind == Proto.PROTO_MSG:\nself.__writeMsg(msg)\nelif msg.kind == Proto.PROTO_ENUM:\nself.__writeEnum(msg)\n\n#写文件到本地\nif __name__ == '__main__':\nparser = OptionParser()\nparser.add_option(\"-r\", \"--root\", dest=\"protoDir\", help=\"root proto dir\", metavar=\"DIR\")\nparser.add_option(\"-f\", \"--file\", dest=\"protoFile\", help=\"input proto file\", metavar=\"FILE\")\nparser.add_option(\"-o\", \"--out\", dest=\"out\", help=\"output dir\", metavar=\"DIR\")\n\noptions, args = parser.parse_args()\n\nif not options.protoDir:\nparser.print_help()\nparser.error('no proto dir')\nif not options.protoFile:\nparser.print_help()\nparser.error('no proto file')\nif not options.out:\nparser.print_help()\nparser.error('no out dir')\n\nif not os.path.exists(options.out):\nos.makedirs(options.out)\n\nproto = reader(options.protoDir, options.protoFile).read()\nIOSWriter(options.out, proto).write()\n\n```      \n上边就是Protobuf 转Model的逻辑，有了这个前提，下边Server服务层的自动化就有了\n#### Server服务层自动化\n这里可以引申一下基本上写功能时只要分成配置类和启动器这样，根据配置类就可以实现自动化了，这里就拿IOS我这的实现讲。\n源码地址：https://github.com/heroims/ServerAPI\n这里也只是简单说一下\nServerAPI 定义一个请求的地址，重试次数，返回数据转换模式\nServerAPIManager  根据ServerAPI发起请求\nServerAPIProtocol  定义需要实现的方法（为了扩展性高，这里定义必须实现的协议，具体需要定制的需求通过Category实现相关方法）\nServerResult  返回的通用型实体包含解析的字典，错误信息等\n\n总的思路就是ServerAPI来定义一个请求的具体内容参数，而ServerAPIManager负责发起请求返回数据，然后就只需要继承ServerAPI对不同请求具体参数直接返回具体的值即可，比如requestHost，resultFormat，retryTimes，timeOut，returnClass\n\n回到Protobuf这个就相当于定义request，但差别还是很大有了对一个API的描述，那么移动端包括后端，前端都可以通过这个描述来做对应的事情，只需要封装一个东西去处理描述，至此就完成了Server服务层的自动化，外加说一句后端的话为了性能可能更好的方案是根据描述生成代码吧，用代码写代码才是正道。。。。\n","source":"_posts/移动端Model层与Server服务层自动化.md","raw":"---\ntitle: 移动端Model层与Server服务层自动化\ndate: 2017-02-01 02:09:05\ntags:\n    - 网络层\n    - 自动化\n    - 架构设计\n    - Model层\n    - IOS\n---\n\n# Model层自动化\n### 前言（纯属捎带扯一下，后端大咖勿看）\n谈到Model层自动化的产出我们就来从最初的地方开始讲，数据库！\n无论你是用啥写服务器如果还手写Model那真的只能说你够low我服！不过如果是手写Model自动生成数据库那另说，总的来说就是要么从数据库转实体出来，要么从实体转数据库这才有点意思。\n上边只是开玩笑下面正题，很多时候大家都无奈没办法不能说low不low，其中奥妙各有体会，通常有点规模的团队都是先定义表然后就出Model了\n### 后端的Model层\n后端数据库和实体互转的方案都不用Google，百度就能出来一大推，有直接读库生成的，也有从实体转sql生成库的，更有提前定义协议然后开始出对应模块对应语言的实体及sql\n### 移动端的Model层\n先继续谈会后台Model，这里要说的只是最好有一个提前定义的过程，这样一方面规范开发流程提前想好怎样建库合理，一方面有利于跨平台跨语言的开发，有了提前定义的协议，Model和枚举的各平台自动生成就方便了很多，写个简单的小程序即可，类型也就那几类。关键真的是一劳永逸，省去了大家互相校对的过程。\n自动化生成移动端乃至前端用的Model层说白了就是做个类型映射，细说的话基本就是分为两类，一类直接就着后端现有项目读Model层的文件，然后做个类型的映射直接导出移动端需要的类，另一类也就是设计数据库时先定义Model的协议，然后根据协议自动生成各个平台需要的实体，而协议定义通常用序列化后的数据如xml(极力抵制，结构复杂)，json，pb，sql文件都能干这事。\n### Model自动化实现\n上面说到了xml，json，pb，sql文件都能干这件事，但其中最容易就是json，github上搜个json class基本就能有一大片总有你想要的语言，但json的局限在于也就能转换一下model，当然通过特殊定义中间转换，枚举啥的也能搞定，在这我推荐pb，首先它就是专门用来定义协议的，枚举实体不用说都能搞定，包括默认值设置也能写出来，而且是谷歌出品本身是im通讯协议，被它序列化的数据在上面说的里面算是最小的，而另一方面关于转码参考https://github.com/google/protobuf/blob/master/docs/third_party.md ，直接开放了各个语言的转换方法，当然你根本用不到它里面写的那么复杂，它的里面实体可是直接带pb转换model方法的，如果不是开发im根本用不到，要删部分源码实现自己的需要也行，。。。（下面讲一下正经方法）\n#### Protobuf Convert转码\n下面放代码片段（反馈的人多放全的，之所以不想放还有个原因是这边实现有点粗）\n这里以Python为例，只是因为安装执行方便所以选它\n转成OC的例子，之所以选OC因为我就是个搞IOS的。。。写起来各个公司需求不同每次都要改改改。。。也就是这个原因懒得放全的了，因为用的人说到底还是需要手动改成自己想要的，没有通用的。。。\n<!-- more -->\n```python\n#头文件引用\nimport os\n\nfrom optparse import OptionParser\n#pb转成方便处理的对象\nfrom protoDef import *\n#读取pb的\nfrom protoReader import ProtoReader as reader\n#上边两个就不放源码了，感兴趣的人多再说，毕竟上边的实现只是读pb逻辑大家估计都有自己的好办法\n\nENUM_TYPE = 'NSInteger'\n#基础类型映射\ntypeMap = {\n'int64': 'NSNumber',\n'int32': 'NSNumber',\n'string': 'NSString',\n'bool': 'NSNumber',\n'float': 'NSNumber',\n'double': 'NSNumber',\n}\n#默认值映射\ndefaultMap = {\n'int64': '@(%s)',\n'int32': '@(%s)',\n'string': '@\"%s\"',\n'bool': '@(%s)',\n'float': '@(%s)',\n'double': '@(%s)',\n}\n\ndef _convertType(pClz):\nif typeMap.has_key(pClz):\nreturn typeMap[pClz]\nreturn pClz\n\ndef _convertDefault(pClz):\nif defaultMap.has_key(pClz):\nreturn defaultMap[pClz]\nreturn 'nil'\n#写文件方法（就是一点点输出oc的方法）\ndef _writeLine(outf, line = ''):\noutf.write(line + '\\n')\n\nclass IOSWriter:\ndef __init__(self, outDir, proto):\nself.outDir = outDir\nself.proto = proto\n\ndef __writeMsg(self, msg):\nif isDeprecated(msg.comment):\nreturn\n\nself.__writeMsgH(msg)#生成.h\nself.__writeMsgM(msg)#生成.m\n\n#为对应类添加前缀做为命名空间（oc没命名空间。。。）\ndef __makeMsgName(self, msg):\nif msg.protoPkg == '不想加前缀的条件':\nreturn msg.name\nreturn msg.protoPkg.upper() + msg.name\n\ndef __writeMsgH(self, msg):\nmsgName = self.__makeMsgName(msg)\npath = os.path.join(self.outDir, msg.name)\n\n# .h\noutf = file(path + '.h', 'w')\n_writeLine(outf, '/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n' % self.proto.filePath)\n# comment\n_writeLine(outf, '/**\\n * %s\\n */' % msg.comment)\n# import\n_writeLine(outf, '#import <Foundation/Foundation.h>')\nimportSet = set()\nfor field in msg.fields:\nif isDeprecated(field.comment):\ncontinue\nif self.proto.hasMsg(field.clz) and field.clz not in importSet:\nimportSet.add(field.clz)\nimportMsg = self.proto.getMsg(field.clz)\nimportName = self.__makeMsgName(importMsg)\nif self.__atClass(field):\n_writeLine(outf, '@class %s;' % importName)\nelse:\n_writeLine(outf, '#import \"%s.h\"' % importName)\n_writeLine(outf)\n# declare\n_writeLine(outf, '@interface %s : NSObject' % msgName)\n# field\nfor field in msg.fields:\nif isDeprecated(field.comment):\ncontinue\nif field.comment:\n_writeLine(outf, '/**\\n * %s\\n */' % field.comment)\nif field.repeated:\nif field.repeated and not typeMap.has_key(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\n_writeLine(outf, '@property(nonatomic, strong) NSMutableArray <%s*>* %s;' % (field.name, fieldType))\nelse\n_writeLine(outf, '@property(nonatomic, strong) NSMutableArray * %s;' % field.name)\nelif self.proto.hasMsg(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\nif fieldMsg.kind == Proto.PROTO_MSG:\n_writeLine(outf, '@property(nonatomic, strong) %s * %s;' % (fieldType, field.name))\nelif fieldMsg.kind == Proto.PROTO_ENUM:\n_writeLine(outf, '@property(nonatomic, assign) %s %s;' % (fieldType, field.name))\nelse:\nclz = _convertType(field.clz)\n_writeLine(outf, '@property(nonatomic, strong) %s * %s;' % (clz, field.name))\n# end\n_writeLine(outf, '\\n@end')\noutf.close()\n\ndef __atClass(self, field):\nreturn '@class' in field.comment\n\ndef __writeMsgM(self, msg):\nmsgName = self.__makeMsgName(msg)\npath = os.path.join(self.outDir, msgName)\n# .m\noutf = file(path + '.m', 'w')\n_writeLine(outf, '/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n' % self.proto.filePath)\n# import\n_writeLine(outf, '#import \"%s.h\"' % msgName)\nfor field in msg.fields:\nif self.proto.hasMsg(field.clz) and self.__atClass(field):\nimportMsg = self.proto.getMsg(field.clz)\nimportName = self.__makeMsgName(importMsg)\n_writeLine(outf, '#import \"%s.h\"' % importName)\n_writeLine(outf, \"\\n@implementation %s\" % msgName)\n_writeLine(outf)\n# repeated\nkvlist = [] #数组内实体类 数组\ndvlist = [] #默认值 数组\nfor field in msg.fields:\nif isDeprecated(field.comment):\ncontinue\nif typeMap.has_key(field.clz) and field.default:\ndefault=_convertDefault(field.default)\ndvlist.append((field.name,default))\nif field.repeated and not typeMap.has_key(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\nkvlist.append((field.name, fieldType))\n#默认值设置\nif len(dvlist) > 0:\n_writeLine(outf, \"- (id)init {\")\n_writeLine(outf, \"   if(self=[super init]){ \")\nfor i, (name, default) in enumerate(dvlist):\nline = '''   _%s=%s''' % (name, default)\n_writeLine(outf, line)\n_writeLine(outf, \"   } \")\n_writeLine(outf, \"   return self;\")\n_writeLine(outf, \"} \")\n\n#用了YYModel转换所以有了这个方法\nif len(kvlist) > 0:\n_writeLine(outf, \"+ (NSDictionary *)modelContainerPropertyGenericClass {\")\n_writeLine(outf, \"  return @{\")\nfor i, (name, clz) in enumerate(kvlist):\nline = '''    @\"%s\" : [%s class]''' % (name, clz)\nif i < len(kvlist) - 1:\nline = line + ','\n_writeLine(outf, line)\n_writeLine(outf, \"  };\")\n_writeLine(outf, \"}\")\n\n\n# end\n_writeLine(outf, '\\n@end')\noutf.close()\n\n#生成枚举，之所以有.h .m是为了搞枚举string\ndef __writeEnum(self, enum):\nif isDeprecated(enum.comment):\nreturn\nself.__writeEnumH(enum)\nself.__writeEnumM(enum)\n\ndef __writeEnumH(self, enum):\nenumName = self.__makeMsgName(enum)\npath = os.path.join(self.outDir, enumName)\n# .h\noutf = file(path + '.h', 'w')\n_writeLine(outf, '/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n' % self.proto.filePath)\n# comment\n_writeLine(outf, '/**\\n * %s\\n */' % enum.comment)\n# import\n_writeLine(outf, '#import <Foundation/Foundation.h>')\n_writeLine(outf)\n# declare\n_writeLine(outf, 'typedef enum {')\n# field\nfields = []\nfor field in enum.fields:\nif isDeprecated(field.comment):\ncontinue\nfields.append(field)\ni = 0\nfor field in fields:\ni += 1\nif field.comment:\n_writeLine(outf, '/**\\n * %s\\n */' % field.comment)\nif i == len(fields):\n_writeLine(outf, '  %s = %s' % (field.name, field.number))\nelse:\n_writeLine(outf, '  %s = %s,' % (field.name, field.number))\n_writeLine(outf, '} %s;' % enumName)\n_writeLine(outf)\n_writeLine(outf, '%s %sValueOf(NSString *text);' % (enumName, enumName))\n_writeLine(outf, 'NSString* %sDescription(%s value);' % (enumName, enumName))\n\noutf.close()\n\ndef __writeEnumM(self, enum):\nenumName = self.__makeMsgName(enum)\npath = os.path.join(self.outDir, enumName)\n# .m\noutf = file(path + '.m', 'w')\n_writeLine(outf, '/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n' % self.proto.filePath)\n# import\n_writeLine(outf, '#import \"%s.h\"' % enumName)\n_writeLine(outf)\n# valueOf\n_writeLine(outf, '%s %sValueOf(NSString *text) {' % (enumName, enumName))\n_writeLine(outf, '  if (text) {')\nfields = []\nfor field in enum.fields:\nif isDeprecated(field.comment):\ncontinue\nfields.append(field)\ni = 0;\nfor field in fields:\nif i == 0:\n_writeLine(outf, '    if ([text isEqualToString:@\"%s\"])' % field.name)\nelse:\n_writeLine(outf, '    else if ([text isEqualToString:@\"%s\"])' % field.name)\n_writeLine(outf, '      return %s;' % field.name)\ni += 1\n_writeLine(outf, '  }')\n_writeLine(outf, '  return -1;')\n_writeLine(outf, '}\\n')\n# description\n_writeLine(outf, 'NSString* %sDescription(%s value) {' % (enumName, enumName))\n_writeLine(outf, '  switch (value) {')\nfor field in fields:\n_writeLine(outf, '    case %s:' % field.name)\n_writeLine(outf, '      return @\"%s\";' % field.name)\n_writeLine(outf, '  }')\n_writeLine(outf, '  return @\"\";')\n_writeLine(outf, '}')\n\noutf.close()\n\ndef write(self):\nfor msg in self.proto.definedMsgs:\nif msg.kind == Proto.PROTO_MSG:\nself.__writeMsg(msg)\nelif msg.kind == Proto.PROTO_ENUM:\nself.__writeEnum(msg)\n\n#写文件到本地\nif __name__ == '__main__':\nparser = OptionParser()\nparser.add_option(\"-r\", \"--root\", dest=\"protoDir\", help=\"root proto dir\", metavar=\"DIR\")\nparser.add_option(\"-f\", \"--file\", dest=\"protoFile\", help=\"input proto file\", metavar=\"FILE\")\nparser.add_option(\"-o\", \"--out\", dest=\"out\", help=\"output dir\", metavar=\"DIR\")\n\noptions, args = parser.parse_args()\n\nif not options.protoDir:\nparser.print_help()\nparser.error('no proto dir')\nif not options.protoFile:\nparser.print_help()\nparser.error('no proto file')\nif not options.out:\nparser.print_help()\nparser.error('no out dir')\n\nif not os.path.exists(options.out):\nos.makedirs(options.out)\n\nproto = reader(options.protoDir, options.protoFile).read()\nIOSWriter(options.out, proto).write()\n\n```      \n上边就是Protobuf 转Model的逻辑，有了这个前提，下边Server服务层的自动化就有了\n#### Server服务层自动化\n这里可以引申一下基本上写功能时只要分成配置类和启动器这样，根据配置类就可以实现自动化了，这里就拿IOS我这的实现讲。\n源码地址：https://github.com/heroims/ServerAPI\n这里也只是简单说一下\nServerAPI 定义一个请求的地址，重试次数，返回数据转换模式\nServerAPIManager  根据ServerAPI发起请求\nServerAPIProtocol  定义需要实现的方法（为了扩展性高，这里定义必须实现的协议，具体需要定制的需求通过Category实现相关方法）\nServerResult  返回的通用型实体包含解析的字典，错误信息等\n\n总的思路就是ServerAPI来定义一个请求的具体内容参数，而ServerAPIManager负责发起请求返回数据，然后就只需要继承ServerAPI对不同请求具体参数直接返回具体的值即可，比如requestHost，resultFormat，retryTimes，timeOut，returnClass\n\n回到Protobuf这个就相当于定义request，但差别还是很大有了对一个API的描述，那么移动端包括后端，前端都可以通过这个描述来做对应的事情，只需要封装一个东西去处理描述，至此就完成了Server服务层的自动化，外加说一句后端的话为了性能可能更好的方案是根据描述生成代码吧，用代码写代码才是正道。。。。\n","slug":"移动端Model层与Server服务层自动化","published":1,"updated":"2021-07-08T09:20:31.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfr7000xnhs6laacult5","content":"<h1 id=\"Model层自动化\"><a href=\"#Model层自动化\" class=\"headerlink\" title=\"Model层自动化\"></a>Model层自动化</h1><h3 id=\"前言（纯属捎带扯一下，后端大咖勿看）\"><a href=\"#前言（纯属捎带扯一下，后端大咖勿看）\" class=\"headerlink\" title=\"前言（纯属捎带扯一下，后端大咖勿看）\"></a>前言（纯属捎带扯一下，后端大咖勿看）</h3><p>谈到Model层自动化的产出我们就来从最初的地方开始讲，数据库！<br>无论你是用啥写服务器如果还手写Model那真的只能说你够low我服！不过如果是手写Model自动生成数据库那另说，总的来说就是要么从数据库转实体出来，要么从实体转数据库这才有点意思。<br>上边只是开玩笑下面正题，很多时候大家都无奈没办法不能说low不low，其中奥妙各有体会，通常有点规模的团队都是先定义表然后就出Model了</p>\n<h3 id=\"后端的Model层\"><a href=\"#后端的Model层\" class=\"headerlink\" title=\"后端的Model层\"></a>后端的Model层</h3><p>后端数据库和实体互转的方案都不用Google，百度就能出来一大推，有直接读库生成的，也有从实体转sql生成库的，更有提前定义协议然后开始出对应模块对应语言的实体及sql</p>\n<h3 id=\"移动端的Model层\"><a href=\"#移动端的Model层\" class=\"headerlink\" title=\"移动端的Model层\"></a>移动端的Model层</h3><p>先继续谈会后台Model，这里要说的只是最好有一个提前定义的过程，这样一方面规范开发流程提前想好怎样建库合理，一方面有利于跨平台跨语言的开发，有了提前定义的协议，Model和枚举的各平台自动生成就方便了很多，写个简单的小程序即可，类型也就那几类。关键真的是一劳永逸，省去了大家互相校对的过程。<br>自动化生成移动端乃至前端用的Model层说白了就是做个类型映射，细说的话基本就是分为两类，一类直接就着后端现有项目读Model层的文件，然后做个类型的映射直接导出移动端需要的类，另一类也就是设计数据库时先定义Model的协议，然后根据协议自动生成各个平台需要的实体，而协议定义通常用序列化后的数据如xml(极力抵制，结构复杂)，json，pb，sql文件都能干这事。</p>\n<h3 id=\"Model自动化实现\"><a href=\"#Model自动化实现\" class=\"headerlink\" title=\"Model自动化实现\"></a>Model自动化实现</h3><p>上面说到了xml，json，pb，sql文件都能干这件事，但其中最容易就是json，github上搜个json class基本就能有一大片总有你想要的语言，但json的局限在于也就能转换一下model，当然通过特殊定义中间转换，枚举啥的也能搞定，在这我推荐pb，首先它就是专门用来定义协议的，枚举实体不用说都能搞定，包括默认值设置也能写出来，而且是谷歌出品本身是im通讯协议，被它序列化的数据在上面说的里面算是最小的，而另一方面关于转码参考<a href=\"https://github.com/google/protobuf/blob/master/docs/third_party.md\" target=\"_blank\" rel=\"noopener\">https://github.com/google/protobuf/blob/master/docs/third_party.md</a> ，直接开放了各个语言的转换方法，当然你根本用不到它里面写的那么复杂，它的里面实体可是直接带pb转换model方法的，如果不是开发im根本用不到，要删部分源码实现自己的需要也行，。。。（下面讲一下正经方法）</p>\n<h4 id=\"Protobuf-Convert转码\"><a href=\"#Protobuf-Convert转码\" class=\"headerlink\" title=\"Protobuf Convert转码\"></a>Protobuf Convert转码</h4><p>下面放代码片段（反馈的人多放全的，之所以不想放还有个原因是这边实现有点粗）<br>这里以Python为例，只是因为安装执行方便所以选它<br>转成OC的例子，之所以选OC因为我就是个搞IOS的。。。写起来各个公司需求不同每次都要改改改。。。也就是这个原因懒得放全的了，因为用的人说到底还是需要手动改成自己想要的，没有通用的。。。<br><a id=\"more\"></a></p>\n<pre><code class=\"python\"><span class=\"comment\">#头文件引用</span>\n<span class=\"keyword\">import</span> os\n\n<span class=\"keyword\">from</span> optparse <span class=\"keyword\">import</span> OptionParser\n<span class=\"comment\">#pb转成方便处理的对象</span>\n<span class=\"keyword\">from</span> protoDef <span class=\"keyword\">import</span> *\n<span class=\"comment\">#读取pb的</span>\n<span class=\"keyword\">from</span> protoReader <span class=\"keyword\">import</span> ProtoReader <span class=\"keyword\">as</span> reader\n<span class=\"comment\">#上边两个就不放源码了，感兴趣的人多再说，毕竟上边的实现只是读pb逻辑大家估计都有自己的好办法</span>\n\nENUM_TYPE = <span class=\"string\">'NSInteger'</span>\n<span class=\"comment\">#基础类型映射</span>\ntypeMap = {\n<span class=\"string\">'int64'</span>: <span class=\"string\">'NSNumber'</span>,\n<span class=\"string\">'int32'</span>: <span class=\"string\">'NSNumber'</span>,\n<span class=\"string\">'string'</span>: <span class=\"string\">'NSString'</span>,\n<span class=\"string\">'bool'</span>: <span class=\"string\">'NSNumber'</span>,\n<span class=\"string\">'float'</span>: <span class=\"string\">'NSNumber'</span>,\n<span class=\"string\">'double'</span>: <span class=\"string\">'NSNumber'</span>,\n}\n<span class=\"comment\">#默认值映射</span>\ndefaultMap = {\n<span class=\"string\">'int64'</span>: <span class=\"string\">'@(%s)'</span>,\n<span class=\"string\">'int32'</span>: <span class=\"string\">'@(%s)'</span>,\n<span class=\"string\">'string'</span>: <span class=\"string\">'@\"%s\"'</span>,\n<span class=\"string\">'bool'</span>: <span class=\"string\">'@(%s)'</span>,\n<span class=\"string\">'float'</span>: <span class=\"string\">'@(%s)'</span>,\n<span class=\"string\">'double'</span>: <span class=\"string\">'@(%s)'</span>,\n}\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convertType</span><span class=\"params\">(pClz)</span>:</span>\n<span class=\"keyword\">if</span> typeMap.has_key(pClz):\n<span class=\"keyword\">return</span> typeMap[pClz]\n<span class=\"keyword\">return</span> pClz\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convertDefault</span><span class=\"params\">(pClz)</span>:</span>\n<span class=\"keyword\">if</span> defaultMap.has_key(pClz):\n<span class=\"keyword\">return</span> defaultMap[pClz]\n<span class=\"keyword\">return</span> <span class=\"string\">'nil'</span>\n<span class=\"comment\">#写文件方法（就是一点点输出oc的方法）</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_writeLine</span><span class=\"params\">(outf, line = <span class=\"string\">''</span>)</span>:</span>\noutf.write(line + <span class=\"string\">'\\n'</span>)\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSWriter</span>:</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, outDir, proto)</span>:</span>\nself.outDir = outDir\nself.proto = proto\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeMsg</span><span class=\"params\">(self, msg)</span>:</span>\n<span class=\"keyword\">if</span> isDeprecated(msg.comment):\n<span class=\"keyword\">return</span>\n\nself.__writeMsgH(msg)<span class=\"comment\">#生成.h</span>\nself.__writeMsgM(msg)<span class=\"comment\">#生成.m</span>\n\n<span class=\"comment\">#为对应类添加前缀做为命名空间（oc没命名空间。。。）</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__makeMsgName</span><span class=\"params\">(self, msg)</span>:</span>\n<span class=\"keyword\">if</span> msg.protoPkg == <span class=\"string\">'不想加前缀的条件'</span>:\n<span class=\"keyword\">return</span> msg.name\n<span class=\"keyword\">return</span> msg.protoPkg.upper() + msg.name\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeMsgH</span><span class=\"params\">(self, msg)</span>:</span>\nmsgName = self.__makeMsgName(msg)\npath = os.path.join(self.outDir, msg.name)\n\n<span class=\"comment\"># .h</span>\noutf = file(path + <span class=\"string\">'.h'</span>, <span class=\"string\">'w'</span>)\n_writeLine(outf, <span class=\"string\">'/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n'</span> % self.proto.filePath)\n<span class=\"comment\"># comment</span>\n_writeLine(outf, <span class=\"string\">'/**\\n * %s\\n */'</span> % msg.comment)\n<span class=\"comment\"># import</span>\n_writeLine(outf, <span class=\"string\">'#import &lt;Foundation/Foundation.h&gt;'</span>)\nimportSet = set()\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> msg.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\n<span class=\"keyword\">if</span> self.proto.hasMsg(field.clz) <span class=\"keyword\">and</span> field.clz <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> importSet:\nimportSet.add(field.clz)\nimportMsg = self.proto.getMsg(field.clz)\nimportName = self.__makeMsgName(importMsg)\n<span class=\"keyword\">if</span> self.__atClass(field):\n_writeLine(outf, <span class=\"string\">'@class %s;'</span> % importName)\n<span class=\"keyword\">else</span>:\n_writeLine(outf, <span class=\"string\">'#import \"%s.h\"'</span> % importName)\n_writeLine(outf)\n<span class=\"comment\"># declare</span>\n_writeLine(outf, <span class=\"string\">'@interface %s : NSObject'</span> % msgName)\n<span class=\"comment\"># field</span>\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> msg.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\n<span class=\"keyword\">if</span> field.comment:\n_writeLine(outf, <span class=\"string\">'/**\\n * %s\\n */'</span> % field.comment)\n<span class=\"keyword\">if</span> field.repeated:\n<span class=\"keyword\">if</span> field.repeated <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> typeMap.has_key(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, strong) NSMutableArray &lt;%s*&gt;* %s;'</span> % (field.name, fieldType))\n<span class=\"keyword\">else</span>\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, strong) NSMutableArray * %s;'</span> % field.name)\n<span class=\"keyword\">elif</span> self.proto.hasMsg(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\n<span class=\"keyword\">if</span> fieldMsg.kind == Proto.PROTO_MSG:\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, strong) %s * %s;'</span> % (fieldType, field.name))\n<span class=\"keyword\">elif</span> fieldMsg.kind == Proto.PROTO_ENUM:\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, assign) %s %s;'</span> % (fieldType, field.name))\n<span class=\"keyword\">else</span>:\nclz = _convertType(field.clz)\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, strong) %s * %s;'</span> % (clz, field.name))\n<span class=\"comment\"># end</span>\n_writeLine(outf, <span class=\"string\">'\\n@end'</span>)\noutf.close()\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__atClass</span><span class=\"params\">(self, field)</span>:</span>\n<span class=\"keyword\">return</span> <span class=\"string\">'@class'</span> <span class=\"keyword\">in</span> field.comment\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeMsgM</span><span class=\"params\">(self, msg)</span>:</span>\nmsgName = self.__makeMsgName(msg)\npath = os.path.join(self.outDir, msgName)\n<span class=\"comment\"># .m</span>\noutf = file(path + <span class=\"string\">'.m'</span>, <span class=\"string\">'w'</span>)\n_writeLine(outf, <span class=\"string\">'/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n'</span> % self.proto.filePath)\n<span class=\"comment\"># import</span>\n_writeLine(outf, <span class=\"string\">'#import \"%s.h\"'</span> % msgName)\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> msg.fields:\n<span class=\"keyword\">if</span> self.proto.hasMsg(field.clz) <span class=\"keyword\">and</span> self.__atClass(field):\nimportMsg = self.proto.getMsg(field.clz)\nimportName = self.__makeMsgName(importMsg)\n_writeLine(outf, <span class=\"string\">'#import \"%s.h\"'</span> % importName)\n_writeLine(outf, <span class=\"string\">\"\\n@implementation %s\"</span> % msgName)\n_writeLine(outf)\n<span class=\"comment\"># repeated</span>\nkvlist = [] <span class=\"comment\">#数组内实体类 数组</span>\ndvlist = [] <span class=\"comment\">#默认值 数组</span>\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> msg.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\n<span class=\"keyword\">if</span> typeMap.has_key(field.clz) <span class=\"keyword\">and</span> field.default:\ndefault=_convertDefault(field.default)\ndvlist.append((field.name,default))\n<span class=\"keyword\">if</span> field.repeated <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> typeMap.has_key(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\nkvlist.append((field.name, fieldType))\n<span class=\"comment\">#默认值设置</span>\n<span class=\"keyword\">if</span> len(dvlist) &gt; <span class=\"number\">0</span>:\n_writeLine(outf, <span class=\"string\">\"- (id)init {\"</span>)\n_writeLine(outf, <span class=\"string\">\"   if(self=[super init]){ \"</span>)\n<span class=\"keyword\">for</span> i, (name, default) <span class=\"keyword\">in</span> enumerate(dvlist):\nline = <span class=\"string\">'''   _%s=%s'''</span> % (name, default)\n_writeLine(outf, line)\n_writeLine(outf, <span class=\"string\">\"   } \"</span>)\n_writeLine(outf, <span class=\"string\">\"   return self;\"</span>)\n_writeLine(outf, <span class=\"string\">\"} \"</span>)\n\n<span class=\"comment\">#用了YYModel转换所以有了这个方法</span>\n<span class=\"keyword\">if</span> len(kvlist) &gt; <span class=\"number\">0</span>:\n_writeLine(outf, <span class=\"string\">\"+ (NSDictionary *)modelContainerPropertyGenericClass {\"</span>)\n_writeLine(outf, <span class=\"string\">\"  return @{\"</span>)\n<span class=\"keyword\">for</span> i, (name, clz) <span class=\"keyword\">in</span> enumerate(kvlist):\nline = <span class=\"string\">'''    @\"%s\" : [%s class]'''</span> % (name, clz)\n<span class=\"keyword\">if</span> i &lt; len(kvlist) - <span class=\"number\">1</span>:\nline = line + <span class=\"string\">','</span>\n_writeLine(outf, line)\n_writeLine(outf, <span class=\"string\">\"  };\"</span>)\n_writeLine(outf, <span class=\"string\">\"}\"</span>)\n\n\n<span class=\"comment\"># end</span>\n_writeLine(outf, <span class=\"string\">'\\n@end'</span>)\noutf.close()\n\n<span class=\"comment\">#生成枚举，之所以有.h .m是为了搞枚举string</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeEnum</span><span class=\"params\">(self, enum)</span>:</span>\n<span class=\"keyword\">if</span> isDeprecated(enum.comment):\n<span class=\"keyword\">return</span>\nself.__writeEnumH(enum)\nself.__writeEnumM(enum)\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeEnumH</span><span class=\"params\">(self, enum)</span>:</span>\nenumName = self.__makeMsgName(enum)\npath = os.path.join(self.outDir, enumName)\n<span class=\"comment\"># .h</span>\noutf = file(path + <span class=\"string\">'.h'</span>, <span class=\"string\">'w'</span>)\n_writeLine(outf, <span class=\"string\">'/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n'</span> % self.proto.filePath)\n<span class=\"comment\"># comment</span>\n_writeLine(outf, <span class=\"string\">'/**\\n * %s\\n */'</span> % enum.comment)\n<span class=\"comment\"># import</span>\n_writeLine(outf, <span class=\"string\">'#import &lt;Foundation/Foundation.h&gt;'</span>)\n_writeLine(outf)\n<span class=\"comment\"># declare</span>\n_writeLine(outf, <span class=\"string\">'typedef enum {'</span>)\n<span class=\"comment\"># field</span>\nfields = []\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> enum.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\nfields.append(field)\ni = <span class=\"number\">0</span>\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> fields:\ni += <span class=\"number\">1</span>\n<span class=\"keyword\">if</span> field.comment:\n_writeLine(outf, <span class=\"string\">'/**\\n * %s\\n */'</span> % field.comment)\n<span class=\"keyword\">if</span> i == len(fields):\n_writeLine(outf, <span class=\"string\">'  %s = %s'</span> % (field.name, field.number))\n<span class=\"keyword\">else</span>:\n_writeLine(outf, <span class=\"string\">'  %s = %s,'</span> % (field.name, field.number))\n_writeLine(outf, <span class=\"string\">'} %s;'</span> % enumName)\n_writeLine(outf)\n_writeLine(outf, <span class=\"string\">'%s %sValueOf(NSString *text);'</span> % (enumName, enumName))\n_writeLine(outf, <span class=\"string\">'NSString* %sDescription(%s value);'</span> % (enumName, enumName))\n\noutf.close()\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeEnumM</span><span class=\"params\">(self, enum)</span>:</span>\nenumName = self.__makeMsgName(enum)\npath = os.path.join(self.outDir, enumName)\n<span class=\"comment\"># .m</span>\noutf = file(path + <span class=\"string\">'.m'</span>, <span class=\"string\">'w'</span>)\n_writeLine(outf, <span class=\"string\">'/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n'</span> % self.proto.filePath)\n<span class=\"comment\"># import</span>\n_writeLine(outf, <span class=\"string\">'#import \"%s.h\"'</span> % enumName)\n_writeLine(outf)\n<span class=\"comment\"># valueOf</span>\n_writeLine(outf, <span class=\"string\">'%s %sValueOf(NSString *text) {'</span> % (enumName, enumName))\n_writeLine(outf, <span class=\"string\">'  if (text) {'</span>)\nfields = []\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> enum.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\nfields.append(field)\ni = <span class=\"number\">0</span>;\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> fields:\n<span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:\n_writeLine(outf, <span class=\"string\">'    if ([text isEqualToString:@\"%s\"])'</span> % field.name)\n<span class=\"keyword\">else</span>:\n_writeLine(outf, <span class=\"string\">'    else if ([text isEqualToString:@\"%s\"])'</span> % field.name)\n_writeLine(outf, <span class=\"string\">'      return %s;'</span> % field.name)\ni += <span class=\"number\">1</span>\n_writeLine(outf, <span class=\"string\">'  }'</span>)\n_writeLine(outf, <span class=\"string\">'  return -1;'</span>)\n_writeLine(outf, <span class=\"string\">'}\\n'</span>)\n<span class=\"comment\"># description</span>\n_writeLine(outf, <span class=\"string\">'NSString* %sDescription(%s value) {'</span> % (enumName, enumName))\n_writeLine(outf, <span class=\"string\">'  switch (value) {'</span>)\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> fields:\n_writeLine(outf, <span class=\"string\">'    case %s:'</span> % field.name)\n_writeLine(outf, <span class=\"string\">'      return @\"%s\";'</span> % field.name)\n_writeLine(outf, <span class=\"string\">'  }'</span>)\n_writeLine(outf, <span class=\"string\">'  return @\"\";'</span>)\n_writeLine(outf, <span class=\"string\">'}'</span>)\n\noutf.close()\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(self)</span>:</span>\n<span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> self.proto.definedMsgs:\n<span class=\"keyword\">if</span> msg.kind == Proto.PROTO_MSG:\nself.__writeMsg(msg)\n<span class=\"keyword\">elif</span> msg.kind == Proto.PROTO_ENUM:\nself.__writeEnum(msg)\n\n<span class=\"comment\">#写文件到本地</span>\n<span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:\nparser = OptionParser()\nparser.add_option(<span class=\"string\">\"-r\"</span>, <span class=\"string\">\"--root\"</span>, dest=<span class=\"string\">\"protoDir\"</span>, help=<span class=\"string\">\"root proto dir\"</span>, metavar=<span class=\"string\">\"DIR\"</span>)\nparser.add_option(<span class=\"string\">\"-f\"</span>, <span class=\"string\">\"--file\"</span>, dest=<span class=\"string\">\"protoFile\"</span>, help=<span class=\"string\">\"input proto file\"</span>, metavar=<span class=\"string\">\"FILE\"</span>)\nparser.add_option(<span class=\"string\">\"-o\"</span>, <span class=\"string\">\"--out\"</span>, dest=<span class=\"string\">\"out\"</span>, help=<span class=\"string\">\"output dir\"</span>, metavar=<span class=\"string\">\"DIR\"</span>)\n\noptions, args = parser.parse_args()\n\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> options.protoDir:\nparser.print_help()\nparser.error(<span class=\"string\">'no proto dir'</span>)\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> options.protoFile:\nparser.print_help()\nparser.error(<span class=\"string\">'no proto file'</span>)\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> options.out:\nparser.print_help()\nparser.error(<span class=\"string\">'no out dir'</span>)\n\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(options.out):\nos.makedirs(options.out)\n\nproto = reader(options.protoDir, options.protoFile).read()\nIOSWriter(options.out, proto).write()\n\n</code></pre>\n<p>上边就是Protobuf 转Model的逻辑，有了这个前提，下边Server服务层的自动化就有了</p>\n<h4 id=\"Server服务层自动化\"><a href=\"#Server服务层自动化\" class=\"headerlink\" title=\"Server服务层自动化\"></a>Server服务层自动化</h4><p>这里可以引申一下基本上写功能时只要分成配置类和启动器这样，根据配置类就可以实现自动化了，这里就拿IOS我这的实现讲。<br>源码地址：<a href=\"https://github.com/heroims/ServerAPI\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/ServerAPI</a><br>这里也只是简单说一下<br>ServerAPI 定义一个请求的地址，重试次数，返回数据转换模式<br>ServerAPIManager  根据ServerAPI发起请求<br>ServerAPIProtocol  定义需要实现的方法（为了扩展性高，这里定义必须实现的协议，具体需要定制的需求通过Category实现相关方法）<br>ServerResult  返回的通用型实体包含解析的字典，错误信息等</p>\n<p>总的思路就是ServerAPI来定义一个请求的具体内容参数，而ServerAPIManager负责发起请求返回数据，然后就只需要继承ServerAPI对不同请求具体参数直接返回具体的值即可，比如requestHost，resultFormat，retryTimes，timeOut，returnClass</p>\n<p>回到Protobuf这个就相当于定义request，但差别还是很大有了对一个API的描述，那么移动端包括后端，前端都可以通过这个描述来做对应的事情，只需要封装一个东西去处理描述，至此就完成了Server服务层的自动化，外加说一句后端的话为了性能可能更好的方案是根据描述生成代码吧，用代码写代码才是正道。。。。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Model层自动化\"><a href=\"#Model层自动化\" class=\"headerlink\" title=\"Model层自动化\"></a>Model层自动化</h1><h3 id=\"前言（纯属捎带扯一下，后端大咖勿看）\"><a href=\"#前言（纯属捎带扯一下，后端大咖勿看）\" class=\"headerlink\" title=\"前言（纯属捎带扯一下，后端大咖勿看）\"></a>前言（纯属捎带扯一下，后端大咖勿看）</h3><p>谈到Model层自动化的产出我们就来从最初的地方开始讲，数据库！<br>无论你是用啥写服务器如果还手写Model那真的只能说你够low我服！不过如果是手写Model自动生成数据库那另说，总的来说就是要么从数据库转实体出来，要么从实体转数据库这才有点意思。<br>上边只是开玩笑下面正题，很多时候大家都无奈没办法不能说low不low，其中奥妙各有体会，通常有点规模的团队都是先定义表然后就出Model了</p>\n<h3 id=\"后端的Model层\"><a href=\"#后端的Model层\" class=\"headerlink\" title=\"后端的Model层\"></a>后端的Model层</h3><p>后端数据库和实体互转的方案都不用Google，百度就能出来一大推，有直接读库生成的，也有从实体转sql生成库的，更有提前定义协议然后开始出对应模块对应语言的实体及sql</p>\n<h3 id=\"移动端的Model层\"><a href=\"#移动端的Model层\" class=\"headerlink\" title=\"移动端的Model层\"></a>移动端的Model层</h3><p>先继续谈会后台Model，这里要说的只是最好有一个提前定义的过程，这样一方面规范开发流程提前想好怎样建库合理，一方面有利于跨平台跨语言的开发，有了提前定义的协议，Model和枚举的各平台自动生成就方便了很多，写个简单的小程序即可，类型也就那几类。关键真的是一劳永逸，省去了大家互相校对的过程。<br>自动化生成移动端乃至前端用的Model层说白了就是做个类型映射，细说的话基本就是分为两类，一类直接就着后端现有项目读Model层的文件，然后做个类型的映射直接导出移动端需要的类，另一类也就是设计数据库时先定义Model的协议，然后根据协议自动生成各个平台需要的实体，而协议定义通常用序列化后的数据如xml(极力抵制，结构复杂)，json，pb，sql文件都能干这事。</p>\n<h3 id=\"Model自动化实现\"><a href=\"#Model自动化实现\" class=\"headerlink\" title=\"Model自动化实现\"></a>Model自动化实现</h3><p>上面说到了xml，json，pb，sql文件都能干这件事，但其中最容易就是json，github上搜个json class基本就能有一大片总有你想要的语言，但json的局限在于也就能转换一下model，当然通过特殊定义中间转换，枚举啥的也能搞定，在这我推荐pb，首先它就是专门用来定义协议的，枚举实体不用说都能搞定，包括默认值设置也能写出来，而且是谷歌出品本身是im通讯协议，被它序列化的数据在上面说的里面算是最小的，而另一方面关于转码参考<a href=\"https://github.com/google/protobuf/blob/master/docs/third_party.md\" target=\"_blank\" rel=\"noopener\">https://github.com/google/protobuf/blob/master/docs/third_party.md</a> ，直接开放了各个语言的转换方法，当然你根本用不到它里面写的那么复杂，它的里面实体可是直接带pb转换model方法的，如果不是开发im根本用不到，要删部分源码实现自己的需要也行，。。。（下面讲一下正经方法）</p>\n<h4 id=\"Protobuf-Convert转码\"><a href=\"#Protobuf-Convert转码\" class=\"headerlink\" title=\"Protobuf Convert转码\"></a>Protobuf Convert转码</h4><p>下面放代码片段（反馈的人多放全的，之所以不想放还有个原因是这边实现有点粗）<br>这里以Python为例，只是因为安装执行方便所以选它<br>转成OC的例子，之所以选OC因为我就是个搞IOS的。。。写起来各个公司需求不同每次都要改改改。。。也就是这个原因懒得放全的了，因为用的人说到底还是需要手动改成自己想要的，没有通用的。。。<br>","more":"</p>\n<pre><code class=\"python\"><span class=\"comment\">#头文件引用</span>\n<span class=\"keyword\">import</span> os\n\n<span class=\"keyword\">from</span> optparse <span class=\"keyword\">import</span> OptionParser\n<span class=\"comment\">#pb转成方便处理的对象</span>\n<span class=\"keyword\">from</span> protoDef <span class=\"keyword\">import</span> *\n<span class=\"comment\">#读取pb的</span>\n<span class=\"keyword\">from</span> protoReader <span class=\"keyword\">import</span> ProtoReader <span class=\"keyword\">as</span> reader\n<span class=\"comment\">#上边两个就不放源码了，感兴趣的人多再说，毕竟上边的实现只是读pb逻辑大家估计都有自己的好办法</span>\n\nENUM_TYPE = <span class=\"string\">'NSInteger'</span>\n<span class=\"comment\">#基础类型映射</span>\ntypeMap = {\n<span class=\"string\">'int64'</span>: <span class=\"string\">'NSNumber'</span>,\n<span class=\"string\">'int32'</span>: <span class=\"string\">'NSNumber'</span>,\n<span class=\"string\">'string'</span>: <span class=\"string\">'NSString'</span>,\n<span class=\"string\">'bool'</span>: <span class=\"string\">'NSNumber'</span>,\n<span class=\"string\">'float'</span>: <span class=\"string\">'NSNumber'</span>,\n<span class=\"string\">'double'</span>: <span class=\"string\">'NSNumber'</span>,\n}\n<span class=\"comment\">#默认值映射</span>\ndefaultMap = {\n<span class=\"string\">'int64'</span>: <span class=\"string\">'@(%s)'</span>,\n<span class=\"string\">'int32'</span>: <span class=\"string\">'@(%s)'</span>,\n<span class=\"string\">'string'</span>: <span class=\"string\">'@\"%s\"'</span>,\n<span class=\"string\">'bool'</span>: <span class=\"string\">'@(%s)'</span>,\n<span class=\"string\">'float'</span>: <span class=\"string\">'@(%s)'</span>,\n<span class=\"string\">'double'</span>: <span class=\"string\">'@(%s)'</span>,\n}\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convertType</span><span class=\"params\">(pClz)</span>:</span>\n<span class=\"keyword\">if</span> typeMap.has_key(pClz):\n<span class=\"keyword\">return</span> typeMap[pClz]\n<span class=\"keyword\">return</span> pClz\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convertDefault</span><span class=\"params\">(pClz)</span>:</span>\n<span class=\"keyword\">if</span> defaultMap.has_key(pClz):\n<span class=\"keyword\">return</span> defaultMap[pClz]\n<span class=\"keyword\">return</span> <span class=\"string\">'nil'</span>\n<span class=\"comment\">#写文件方法（就是一点点输出oc的方法）</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_writeLine</span><span class=\"params\">(outf, line = <span class=\"string\">''</span>)</span>:</span>\noutf.write(line + <span class=\"string\">'\\n'</span>)\n\n<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSWriter</span>:</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, outDir, proto)</span>:</span>\nself.outDir = outDir\nself.proto = proto\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeMsg</span><span class=\"params\">(self, msg)</span>:</span>\n<span class=\"keyword\">if</span> isDeprecated(msg.comment):\n<span class=\"keyword\">return</span>\n\nself.__writeMsgH(msg)<span class=\"comment\">#生成.h</span>\nself.__writeMsgM(msg)<span class=\"comment\">#生成.m</span>\n\n<span class=\"comment\">#为对应类添加前缀做为命名空间（oc没命名空间。。。）</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__makeMsgName</span><span class=\"params\">(self, msg)</span>:</span>\n<span class=\"keyword\">if</span> msg.protoPkg == <span class=\"string\">'不想加前缀的条件'</span>:\n<span class=\"keyword\">return</span> msg.name\n<span class=\"keyword\">return</span> msg.protoPkg.upper() + msg.name\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeMsgH</span><span class=\"params\">(self, msg)</span>:</span>\nmsgName = self.__makeMsgName(msg)\npath = os.path.join(self.outDir, msg.name)\n\n<span class=\"comment\"># .h</span>\noutf = file(path + <span class=\"string\">'.h'</span>, <span class=\"string\">'w'</span>)\n_writeLine(outf, <span class=\"string\">'/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n'</span> % self.proto.filePath)\n<span class=\"comment\"># comment</span>\n_writeLine(outf, <span class=\"string\">'/**\\n * %s\\n */'</span> % msg.comment)\n<span class=\"comment\"># import</span>\n_writeLine(outf, <span class=\"string\">'#import &lt;Foundation/Foundation.h&gt;'</span>)\nimportSet = set()\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> msg.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\n<span class=\"keyword\">if</span> self.proto.hasMsg(field.clz) <span class=\"keyword\">and</span> field.clz <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> importSet:\nimportSet.add(field.clz)\nimportMsg = self.proto.getMsg(field.clz)\nimportName = self.__makeMsgName(importMsg)\n<span class=\"keyword\">if</span> self.__atClass(field):\n_writeLine(outf, <span class=\"string\">'@class %s;'</span> % importName)\n<span class=\"keyword\">else</span>:\n_writeLine(outf, <span class=\"string\">'#import \"%s.h\"'</span> % importName)\n_writeLine(outf)\n<span class=\"comment\"># declare</span>\n_writeLine(outf, <span class=\"string\">'@interface %s : NSObject'</span> % msgName)\n<span class=\"comment\"># field</span>\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> msg.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\n<span class=\"keyword\">if</span> field.comment:\n_writeLine(outf, <span class=\"string\">'/**\\n * %s\\n */'</span> % field.comment)\n<span class=\"keyword\">if</span> field.repeated:\n<span class=\"keyword\">if</span> field.repeated <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> typeMap.has_key(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, strong) NSMutableArray &lt;%s*&gt;* %s;'</span> % (field.name, fieldType))\n<span class=\"keyword\">else</span>\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, strong) NSMutableArray * %s;'</span> % field.name)\n<span class=\"keyword\">elif</span> self.proto.hasMsg(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\n<span class=\"keyword\">if</span> fieldMsg.kind == Proto.PROTO_MSG:\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, strong) %s * %s;'</span> % (fieldType, field.name))\n<span class=\"keyword\">elif</span> fieldMsg.kind == Proto.PROTO_ENUM:\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, assign) %s %s;'</span> % (fieldType, field.name))\n<span class=\"keyword\">else</span>:\nclz = _convertType(field.clz)\n_writeLine(outf, <span class=\"string\">'@property(nonatomic, strong) %s * %s;'</span> % (clz, field.name))\n<span class=\"comment\"># end</span>\n_writeLine(outf, <span class=\"string\">'\\n@end'</span>)\noutf.close()\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__atClass</span><span class=\"params\">(self, field)</span>:</span>\n<span class=\"keyword\">return</span> <span class=\"string\">'@class'</span> <span class=\"keyword\">in</span> field.comment\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeMsgM</span><span class=\"params\">(self, msg)</span>:</span>\nmsgName = self.__makeMsgName(msg)\npath = os.path.join(self.outDir, msgName)\n<span class=\"comment\"># .m</span>\noutf = file(path + <span class=\"string\">'.m'</span>, <span class=\"string\">'w'</span>)\n_writeLine(outf, <span class=\"string\">'/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n'</span> % self.proto.filePath)\n<span class=\"comment\"># import</span>\n_writeLine(outf, <span class=\"string\">'#import \"%s.h\"'</span> % msgName)\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> msg.fields:\n<span class=\"keyword\">if</span> self.proto.hasMsg(field.clz) <span class=\"keyword\">and</span> self.__atClass(field):\nimportMsg = self.proto.getMsg(field.clz)\nimportName = self.__makeMsgName(importMsg)\n_writeLine(outf, <span class=\"string\">'#import \"%s.h\"'</span> % importName)\n_writeLine(outf, <span class=\"string\">\"\\n@implementation %s\"</span> % msgName)\n_writeLine(outf)\n<span class=\"comment\"># repeated</span>\nkvlist = [] <span class=\"comment\">#数组内实体类 数组</span>\ndvlist = [] <span class=\"comment\">#默认值 数组</span>\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> msg.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\n<span class=\"keyword\">if</span> typeMap.has_key(field.clz) <span class=\"keyword\">and</span> field.default:\ndefault=_convertDefault(field.default)\ndvlist.append((field.name,default))\n<span class=\"keyword\">if</span> field.repeated <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> typeMap.has_key(field.clz):\nfieldMsg = self.proto.getMsg(field.clz)\nfieldType = self.__makeMsgName(fieldMsg)\nkvlist.append((field.name, fieldType))\n<span class=\"comment\">#默认值设置</span>\n<span class=\"keyword\">if</span> len(dvlist) &gt; <span class=\"number\">0</span>:\n_writeLine(outf, <span class=\"string\">\"- (id)init {\"</span>)\n_writeLine(outf, <span class=\"string\">\"   if(self=[super init]){ \"</span>)\n<span class=\"keyword\">for</span> i, (name, default) <span class=\"keyword\">in</span> enumerate(dvlist):\nline = <span class=\"string\">'''   _%s=%s'''</span> % (name, default)\n_writeLine(outf, line)\n_writeLine(outf, <span class=\"string\">\"   } \"</span>)\n_writeLine(outf, <span class=\"string\">\"   return self;\"</span>)\n_writeLine(outf, <span class=\"string\">\"} \"</span>)\n\n<span class=\"comment\">#用了YYModel转换所以有了这个方法</span>\n<span class=\"keyword\">if</span> len(kvlist) &gt; <span class=\"number\">0</span>:\n_writeLine(outf, <span class=\"string\">\"+ (NSDictionary *)modelContainerPropertyGenericClass {\"</span>)\n_writeLine(outf, <span class=\"string\">\"  return @{\"</span>)\n<span class=\"keyword\">for</span> i, (name, clz) <span class=\"keyword\">in</span> enumerate(kvlist):\nline = <span class=\"string\">'''    @\"%s\" : [%s class]'''</span> % (name, clz)\n<span class=\"keyword\">if</span> i &lt; len(kvlist) - <span class=\"number\">1</span>:\nline = line + <span class=\"string\">','</span>\n_writeLine(outf, line)\n_writeLine(outf, <span class=\"string\">\"  };\"</span>)\n_writeLine(outf, <span class=\"string\">\"}\"</span>)\n\n\n<span class=\"comment\"># end</span>\n_writeLine(outf, <span class=\"string\">'\\n@end'</span>)\noutf.close()\n\n<span class=\"comment\">#生成枚举，之所以有.h .m是为了搞枚举string</span>\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeEnum</span><span class=\"params\">(self, enum)</span>:</span>\n<span class=\"keyword\">if</span> isDeprecated(enum.comment):\n<span class=\"keyword\">return</span>\nself.__writeEnumH(enum)\nself.__writeEnumM(enum)\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeEnumH</span><span class=\"params\">(self, enum)</span>:</span>\nenumName = self.__makeMsgName(enum)\npath = os.path.join(self.outDir, enumName)\n<span class=\"comment\"># .h</span>\noutf = file(path + <span class=\"string\">'.h'</span>, <span class=\"string\">'w'</span>)\n_writeLine(outf, <span class=\"string\">'/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n'</span> % self.proto.filePath)\n<span class=\"comment\"># comment</span>\n_writeLine(outf, <span class=\"string\">'/**\\n * %s\\n */'</span> % enum.comment)\n<span class=\"comment\"># import</span>\n_writeLine(outf, <span class=\"string\">'#import &lt;Foundation/Foundation.h&gt;'</span>)\n_writeLine(outf)\n<span class=\"comment\"># declare</span>\n_writeLine(outf, <span class=\"string\">'typedef enum {'</span>)\n<span class=\"comment\"># field</span>\nfields = []\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> enum.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\nfields.append(field)\ni = <span class=\"number\">0</span>\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> fields:\ni += <span class=\"number\">1</span>\n<span class=\"keyword\">if</span> field.comment:\n_writeLine(outf, <span class=\"string\">'/**\\n * %s\\n */'</span> % field.comment)\n<span class=\"keyword\">if</span> i == len(fields):\n_writeLine(outf, <span class=\"string\">'  %s = %s'</span> % (field.name, field.number))\n<span class=\"keyword\">else</span>:\n_writeLine(outf, <span class=\"string\">'  %s = %s,'</span> % (field.name, field.number))\n_writeLine(outf, <span class=\"string\">'} %s;'</span> % enumName)\n_writeLine(outf)\n_writeLine(outf, <span class=\"string\">'%s %sValueOf(NSString *text);'</span> % (enumName, enumName))\n_writeLine(outf, <span class=\"string\">'NSString* %sDescription(%s value);'</span> % (enumName, enumName))\n\noutf.close()\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__writeEnumM</span><span class=\"params\">(self, enum)</span>:</span>\nenumName = self.__makeMsgName(enum)\npath = os.path.join(self.outDir, enumName)\n<span class=\"comment\"># .m</span>\noutf = file(path + <span class=\"string\">'.m'</span>, <span class=\"string\">'w'</span>)\n_writeLine(outf, <span class=\"string\">'/*\\n * generated by proto-pygen, NEVER CHANGE!!\\n * source file: %s\\n */\\n'</span> % self.proto.filePath)\n<span class=\"comment\"># import</span>\n_writeLine(outf, <span class=\"string\">'#import \"%s.h\"'</span> % enumName)\n_writeLine(outf)\n<span class=\"comment\"># valueOf</span>\n_writeLine(outf, <span class=\"string\">'%s %sValueOf(NSString *text) {'</span> % (enumName, enumName))\n_writeLine(outf, <span class=\"string\">'  if (text) {'</span>)\nfields = []\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> enum.fields:\n<span class=\"keyword\">if</span> isDeprecated(field.comment):\n<span class=\"keyword\">continue</span>\nfields.append(field)\ni = <span class=\"number\">0</span>;\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> fields:\n<span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:\n_writeLine(outf, <span class=\"string\">'    if ([text isEqualToString:@\"%s\"])'</span> % field.name)\n<span class=\"keyword\">else</span>:\n_writeLine(outf, <span class=\"string\">'    else if ([text isEqualToString:@\"%s\"])'</span> % field.name)\n_writeLine(outf, <span class=\"string\">'      return %s;'</span> % field.name)\ni += <span class=\"number\">1</span>\n_writeLine(outf, <span class=\"string\">'  }'</span>)\n_writeLine(outf, <span class=\"string\">'  return -1;'</span>)\n_writeLine(outf, <span class=\"string\">'}\\n'</span>)\n<span class=\"comment\"># description</span>\n_writeLine(outf, <span class=\"string\">'NSString* %sDescription(%s value) {'</span> % (enumName, enumName))\n_writeLine(outf, <span class=\"string\">'  switch (value) {'</span>)\n<span class=\"keyword\">for</span> field <span class=\"keyword\">in</span> fields:\n_writeLine(outf, <span class=\"string\">'    case %s:'</span> % field.name)\n_writeLine(outf, <span class=\"string\">'      return @\"%s\";'</span> % field.name)\n_writeLine(outf, <span class=\"string\">'  }'</span>)\n_writeLine(outf, <span class=\"string\">'  return @\"\";'</span>)\n_writeLine(outf, <span class=\"string\">'}'</span>)\n\noutf.close()\n\n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(self)</span>:</span>\n<span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> self.proto.definedMsgs:\n<span class=\"keyword\">if</span> msg.kind == Proto.PROTO_MSG:\nself.__writeMsg(msg)\n<span class=\"keyword\">elif</span> msg.kind == Proto.PROTO_ENUM:\nself.__writeEnum(msg)\n\n<span class=\"comment\">#写文件到本地</span>\n<span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:\nparser = OptionParser()\nparser.add_option(<span class=\"string\">\"-r\"</span>, <span class=\"string\">\"--root\"</span>, dest=<span class=\"string\">\"protoDir\"</span>, help=<span class=\"string\">\"root proto dir\"</span>, metavar=<span class=\"string\">\"DIR\"</span>)\nparser.add_option(<span class=\"string\">\"-f\"</span>, <span class=\"string\">\"--file\"</span>, dest=<span class=\"string\">\"protoFile\"</span>, help=<span class=\"string\">\"input proto file\"</span>, metavar=<span class=\"string\">\"FILE\"</span>)\nparser.add_option(<span class=\"string\">\"-o\"</span>, <span class=\"string\">\"--out\"</span>, dest=<span class=\"string\">\"out\"</span>, help=<span class=\"string\">\"output dir\"</span>, metavar=<span class=\"string\">\"DIR\"</span>)\n\noptions, args = parser.parse_args()\n\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> options.protoDir:\nparser.print_help()\nparser.error(<span class=\"string\">'no proto dir'</span>)\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> options.protoFile:\nparser.print_help()\nparser.error(<span class=\"string\">'no proto file'</span>)\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> options.out:\nparser.print_help()\nparser.error(<span class=\"string\">'no out dir'</span>)\n\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(options.out):\nos.makedirs(options.out)\n\nproto = reader(options.protoDir, options.protoFile).read()\nIOSWriter(options.out, proto).write()\n\n</code></pre>\n<p>上边就是Protobuf 转Model的逻辑，有了这个前提，下边Server服务层的自动化就有了</p>\n<h4 id=\"Server服务层自动化\"><a href=\"#Server服务层自动化\" class=\"headerlink\" title=\"Server服务层自动化\"></a>Server服务层自动化</h4><p>这里可以引申一下基本上写功能时只要分成配置类和启动器这样，根据配置类就可以实现自动化了，这里就拿IOS我这的实现讲。<br>源码地址：<a href=\"https://github.com/heroims/ServerAPI\" target=\"_blank\" rel=\"noopener\">https://github.com/heroims/ServerAPI</a><br>这里也只是简单说一下<br>ServerAPI 定义一个请求的地址，重试次数，返回数据转换模式<br>ServerAPIManager  根据ServerAPI发起请求<br>ServerAPIProtocol  定义需要实现的方法（为了扩展性高，这里定义必须实现的协议，具体需要定制的需求通过Category实现相关方法）<br>ServerResult  返回的通用型实体包含解析的字典，错误信息等</p>\n<p>总的思路就是ServerAPI来定义一个请求的具体内容参数，而ServerAPIManager负责发起请求返回数据，然后就只需要继承ServerAPI对不同请求具体参数直接返回具体的值即可，比如requestHost，resultFormat，retryTimes，timeOut，returnClass</p>\n<p>回到Protobuf这个就相当于定义request，但差别还是很大有了对一个API的描述，那么移动端包括后端，前端都可以通过这个描述来做对应的事情，只需要封装一个东西去处理描述，至此就完成了Server服务层的自动化，外加说一句后端的话为了性能可能更好的方案是根据描述生成代码吧，用代码写代码才是正道。。。。</p>"},{"title":"视频处理开发常见问题","date":"2013-04-12T04:55:52.000Z","_content":"# 获取视频的方向\n\n一个视频可以有多个轨道，轨道理论上可以是不同方向的视\n\n``` Objective-C\nAVAsset *anAsset = [AVURLAsset URLAssetWithURL:assetUrl options:nil];\nAVAssetTrack *track=[[anAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];只有视频轨道上才有方向信息\nCGAffineTransform txf=[track preferredTransform];\nNSLog(@\"%f,%f,%f,%f\",txf.a,txf.b,txf.c,txf.d);\n```\n\n0  1 -1  0    Right 向右旋转90度\n\n-1 0  0 -1    Down 旋转180度\n\n1  0  0  1    Up 不做旋转\n\n0 -1  1  0    Left 向左旋转90度\n\n# GPUImageCropFilter处理旋转\n\nGPUImageCropFilter无法直接处理需要旋转的图片，必须通过一次其他的filter处理传给GPUImageCropFilter才能正确处理，GPUImageCropFilter本身对GPUImageMovieMode处理了旋转但不正确需要中间量\n\n# 视频压缩\n\n```Objective-C\n\n- (void) lowQuailtyWithInputURL:(NSURL*)inputURL\noutputURL:(NSURL*)outputURL\nblockHandler:(void (^)(AVAssetExportSession*))handler\n{\nAVURLAsset *asset = [AVURLAsset URLAssetWithURL:inputURL options:nil];\nAVAssetExportSession *session = [[AVAssetExportSession alloc] initWithAsset:asset     presetName:AVAssetExportPresetMediumQuality];\nsession.outputURL = outputURL;\nsession.outputFileType = AVFileTypeQuickTimeMovie;\n[session exportAsynchronouslyWithCompletionHandler:^(void)\n{\nhandler(session);\n}];\n}\n\n//使用\n[self lowQuailtyWithInputURL:video outputURL:output blockHandler:^(AVAssetExportSession *session)\n{\nif (session.status == AVAssetExportSessionStatusCompleted)\n{\n\n}\nelse\n{\n\n\n}\n}];\n\n```\n\n在block里面检测成功，失败，或者是取消，然后释放session.\n\n期间可以通过不断的查看session的progress属性来获取转换的进度。\n\n可以设置这些压缩质量\n\n```Objective-C\nAVF_EXPORT NSString *const AVAssetExportPresetLowQuality        NS_AVAILABLE_IOS(4_0);\nAVF_EXPORT NSString *const AVAssetExportPresetMediumQuality     NS_AVAILABLE_IOS(4_0);\nAVF_EXPORT NSString *const AVAssetExportPresetHighestQuality    NS_AVAILABLE_IOS(4_0);\n```\n\n# GPUImage常用类说明\n```Objective-C\n#import \"GLProgram.h\"\n\n// Base classes\n#import \"GPUImageOpenGLESContext.h\"//封装\n#import \"GPUImageOutput.h\"//输出\n#import \"GPUImageView.h\"//画布\n#import \"GPUImageVideoCamera.h\"//录像\n#import \"GPUImageStillCamera.h\"//拍照\n#import \"GPUImageMovie.h\"//输入视频\n#import \"GPUImagePicture.h\"//输出视频\n#import \"GPUImageRawDataInput.h\"//输入原始数据\n#import \"GPUImageRawDataOutput.h\"//输出原始数据\n#import \"GPUImageMovieWriter.h\"//合成视频写本地\n#import \"GPUImageFilterPipeline.h\"//滤镜组合\n#import \"GPUImageTextureOutput.h\"//输出纹理\n#import \"GPUImageFilterGroup.h\"//滤镜组合\n#import \"GPUImageTextureInput.h\"//OpenGL输入纹理\n#import \"GPUImageUIElement.h\"//视频合成元素，包装view对象进去可以输出到画面上\n#import \"GPUImageBuffer.h\"//视频图片buffer\n<!-- more -->\n\n// Filters\n#import \"GPUImageFilter.h\"\n#import \"GPUImageTwoInputFilter.h\"\n\n\n#pragma mark - 调整颜色 Handle Color\n\n#import \"GPUImageBrightnessFilter.h\"                //亮度\n#import \"GPUImageExposureFilter.h\"                  //曝光\n#import \"GPUImageContrastFilter.h\"                  //对比度\n#import \"GPUImageSaturationFilter.h\"                //饱和度\n#import \"GPUImageGammaFilter.h\"                     //伽马线\n#import \"GPUImageColorInvertFilter.h\"               //反色\n#import \"GPUImageSepiaFilter.h\"                     //褐色（怀旧）\n#import \"GPUImageLevelsFilter.h\"                    //色阶\n#import \"GPUImageGrayscaleFilter.h\"                 //灰度\n#import \"GPUImageHistogramFilter.h\"                 //色彩直方图，显示在图片上\n#import \"GPUImageHistogramGenerator.h\"              //色彩直方图\n#import \"GPUImageRGBFilter.h\"                       //RGB\n#import \"GPUImageToneCurveFilter.h\"                 //色调曲线\n#import \"GPUImageMonochromeFilter.h\"                //单色\n#import \"GPUImageOpacityFilter.h\"                   //不透明度\n#import \"GPUImageHighlightShadowFilter.h\"           //提亮阴影\n#import \"GPUImageFalseColorFilter.h\"                //色彩替换（替换亮部和暗部色彩）\n#import \"GPUImageHueFilter.h\"                       //色度\n#import \"GPUImageChromaKeyFilter.h\"                 //色度键\n#import \"GPUImageWhiteBalanceFilter.h\"              //白平横\n#import \"GPUImageAverageColor.h\"                    //像素平均色值\n#import \"GPUImageSolidColorGenerator.h\"             //纯色\n#import \"GPUImageLuminosity.h\"                      //亮度平均\n#import \"GPUImageAverageLuminanceThresholdFilter.h\" //像素色值亮度平均，图像黑白（有类似漫画效果）\n\n#import \"GPUImageLookupFilter.h\"                    //lookup 色彩调整\n#import \"GPUImageAmatorkaFilter.h\"                  //Amatorka lookup\n#import \"GPUImageMissEtikateFilter.h\"               //MissEtikate lookup\n#import \"GPUImageSoftEleganceFilter.h\"              //SoftElegance lookup\n\n\n\n\n#pragma mark - 图像处理 Handle Image\n\n#import \"GPUImageCrosshairGenerator.h\"              //十字\n#import \"GPUImageLineGenerator.h\"                   //线条\n\n#import \"GPUImageTransformFilter.h\"                 //形状变化\n#import \"GPUImageCropFilter.h\"                      //剪裁\n#import \"GPUImageSharpenFilter.h\"                   //锐化\n#import \"GPUImageUnsharpMaskFilter.h\"               //反遮罩锐化\n\n#import \"GPUImageFastBlurFilter.h\"                  //模糊\n#import \"GPUImageGaussianBlurFilter.h\"              //高斯模糊\n#import \"GPUImageGaussianSelectiveBlurFilter.h\"     //高斯模糊，选择部分清晰\n#import \"GPUImageBoxBlurFilter.h\"                   //盒状模糊\n#import \"GPUImageTiltShiftFilter.h\"                 //条纹模糊，中间清晰，上下两端模糊\n#import \"GPUImageMedianFilter.h\"                    //中间值，有种稍微模糊边缘的效果\n#import \"GPUImageBilateralFilter.h\"                 //双边模糊\n#import \"GPUImageErosionFilter.h\"                   //侵蚀边缘模糊，变黑白\n#import \"GPUImageRGBErosionFilter.h\"                //RGB侵蚀边缘模糊，有色彩\n#import \"GPUImageDilationFilter.h\"                  //扩展边缘模糊，变黑白\n#import \"GPUImageRGBDilationFilter.h\"               //RGB扩展边缘模糊，有色彩\n#import \"GPUImageOpeningFilter.h\"                   //黑白色调模糊\n#import \"GPUImageRGBOpeningFilter.h\"                //彩色模糊\n#import \"GPUImageClosingFilter.h\"                   //黑白色调模糊，暗色会被提亮\n#import \"GPUImageRGBClosingFilter.h\"                //彩色模糊，暗色会被提亮\n#import \"GPUImageLanczosResamplingFilter.h\"         //Lanczos重取样，模糊效果\n#import \"GPUImageNonMaximumSuppressionFilter.h\"     //非最大抑制，只显示亮度最高的像素，其他为黑\n#import \"GPUImageThresholdedNonMaximumSuppressionFilter.h\" //与上相比，像素丢失更多\n\n#import \"GPUImageSobelEdgeDetectionFilter.h\"        //Sobel边缘检测算法(白边，黑内容，有点漫画的反色效果)\n#import \"GPUImageCannyEdgeDetectionFilter.h\"        //Canny边缘检测算法（比上更强烈的黑白对比度）\n#import \"GPUImageThresholdEdgeDetectionFilter.h\"    //阈值边缘检测（效果与上差别不大）\n#import \"GPUImagePrewittEdgeDetectionFilter.h\"      //普瑞维特(Prewitt)边缘检测(效果与Sobel差不多，貌似更平滑)\n#import \"GPUImageXYDerivativeFilter.h\"              //XYDerivative边缘检测，画面以蓝色为主，绿色为边缘，带彩色\n#import \"GPUImageHarrisCornerDetectionFilter.h\"     //Harris角点检测，会有绿色小十字显示在图片角点处\n#import \"GPUImageNobleCornerDetectionFilter.h\"      //Noble角点检测，检测点更多\n#import \"GPUImageShiTomasiFeatureDetectionFilter.h\" //ShiTomasi角点检测，与上差别不大\n#import \"GPUImageMotionDetector.h\"                  //动作检测\n#import \"GPUImageHoughTransformLineDetector.h\"      //线条检测\n#import \"GPUImageParallelCoordinateLineTransformFilter.h\" //平行线检测\n\n#import \"GPUImageLocalBinaryPatternFilter.h\"        //图像黑白化，并有大量噪点\n\n#import \"GPUImageLowPassFilter.h\"                   //用于图像加亮\n#import \"GPUImageHighPassFilter.h\"                  //图像低于某值时显示为黑\n\n\n#pragma mark - 视觉效果 Visual Effect\n\n#import \"GPUImageSketchFilter.h\"                    //素描\n#import \"GPUImageThresholdSketchFilter.h\"           //阀值素描，形成有噪点的素描\n#import \"GPUImageToonFilter.h\"                      //卡通效果（黑色粗线描边）\n#import \"GPUImageSmoothToonFilter.h\"                //相比上面的效果更细腻，上面是粗旷的画风\n#import \"GPUImageKuwaharaFilter.h\"                  //桑原(Kuwahara)滤波,水粉画的模糊效果；处理时间比较长，慎用\n\n#import \"GPUImageMosaicFilter.h\"                    //黑白马赛克\n#import \"GPUImagePixellateFilter.h\"                 //像素化\n#import \"GPUImagePolarPixellateFilter.h\"            //同心圆像素化\n#import \"GPUImageCrosshatchFilter.h\"                //交叉线阴影，形成黑白网状画面\n#import \"GPUImageColorPackingFilter.h\"              //色彩丢失，模糊（类似监控摄像效果）\n\n#import \"GPUImageVignetteFilter.h\"                  //晕影，形成黑色圆形边缘，突出中间图像的效果\n#import \"GPUImageSwirlFilter.h\"                     //漩涡，中间形成卷曲的画面\n#import \"GPUImageBulgeDistortionFilter.h\"           //凸起失真，鱼眼效果\n#import \"GPUImagePinchDistortionFilter.h\"           //收缩失真，凹面镜\n#import \"GPUImageStretchDistortionFilter.h\"         //伸展失真，哈哈镜\n#import \"GPUImageGlassSphereFilter.h\"               //水晶球效果\n#import \"GPUImageSphereRefractionFilter.h\"          //球形折射，图形倒立\n\n#import \"GPUImagePosterizeFilter.h\"                 //色调分离，形成噪点效果\n#import \"GPUImageCGAColorspaceFilter.h\"             //CGA色彩滤镜，形成黑、浅蓝、紫色块的画面\n#import \"GPUImagePerlinNoiseFilter.h\"               //柏林噪点，花边噪点\n#import \"GPUImage3x3ConvolutionFilter.h\"            //3x3卷积，高亮大色块变黑，加亮边缘、线条等\n#import \"GPUImageEmbossFilter.h\"                    //浮雕效果，带有点3d的感觉\n#import \"GPUImagePolkaDotFilter.h\"                  //像素圆点花样\n#import \"GPUImageHalftoneFilter.h\"                  //点染,图像黑白化，由黑点构成原图的大致图形\n\n\n#pragma mark - 混合模式 Blend\n\n#import \"GPUImageMultiplyBlendFilter.h\"             //通常用于创建阴影和深度效果\n#import \"GPUImageNormalBlendFilter.h\"               //正常\n#import \"GPUImageAlphaBlendFilter.h\"                //透明混合,通常用于在背景上应用前景的透明度\n#import \"GPUImageDissolveBlendFilter.h\"             //溶解\n#import \"GPUImageOverlayBlendFilter.h\"              //叠加,通常用于创建阴影效果\n#import \"GPUImageDarkenBlendFilter.h\"               //加深混合,通常用于重叠类型\n#import \"GPUImageLightenBlendFilter.h\"              //减淡混合,通常用于重叠类型\n#import \"GPUImageSourceOverBlendFilter.h\"           //源混合\n#import \"GPUImageColorBurnBlendFilter.h\"            //色彩加深混合\n#import \"GPUImageColorDodgeBlendFilter.h\"           //色彩减淡混合\n#import \"GPUImageScreenBlendFilter.h\"               //屏幕包裹,通常用于创建亮点和镜头眩光\n#import \"GPUImageExclusionBlendFilter.h\"            //排除混合\n#import \"GPUImageDifferenceBlendFilter.h\"           //差异混合,通常用于创建更多变动的颜色\n#import \"GPUImageSubtractBlendFilter.h\"             //差值混合,通常用于创建两个图像之间的动画变暗模糊效果\n#import \"GPUImageHardLightBlendFilter.h\"            //强光混合,通常用于创建阴影效果\n#import \"GPUImageSoftLightBlendFilter.h\"            //柔光混合\n#import \"GPUImageChromaKeyBlendFilter.h\"            //色度键混合\n#import \"GPUImageMaskFilter.h\"                      //遮罩混合\n#import \"GPUImageHazeFilter.h\"                      //朦胧加暗\n#import \"GPUImageLuminanceThresholdFilter.h\"        //亮度阈\n#import \"GPUImageAdaptiveThresholdFilter.h\"         //自适应阈值\n#import \"GPUImageAddBlendFilter.h\"                  //通常用于创建两个图像之间的动画变亮模糊效果\n#import \"GPUImageDivideBlendFilter.h\"               //通常用于创建两个图像之间的动画变暗模糊效果\n```\n","source":"_posts/视频处理开发常见问题.md","raw":"---\ntitle: 视频处理开发常见问题\ndate: 2013-04-12 12:55:52\ntags:\n    - 常见开发误区\n    - 视频\n    - GPUImage\n---\n# 获取视频的方向\n\n一个视频可以有多个轨道，轨道理论上可以是不同方向的视\n\n``` Objective-C\nAVAsset *anAsset = [AVURLAsset URLAssetWithURL:assetUrl options:nil];\nAVAssetTrack *track=[[anAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];只有视频轨道上才有方向信息\nCGAffineTransform txf=[track preferredTransform];\nNSLog(@\"%f,%f,%f,%f\",txf.a,txf.b,txf.c,txf.d);\n```\n\n0  1 -1  0    Right 向右旋转90度\n\n-1 0  0 -1    Down 旋转180度\n\n1  0  0  1    Up 不做旋转\n\n0 -1  1  0    Left 向左旋转90度\n\n# GPUImageCropFilter处理旋转\n\nGPUImageCropFilter无法直接处理需要旋转的图片，必须通过一次其他的filter处理传给GPUImageCropFilter才能正确处理，GPUImageCropFilter本身对GPUImageMovieMode处理了旋转但不正确需要中间量\n\n# 视频压缩\n\n```Objective-C\n\n- (void) lowQuailtyWithInputURL:(NSURL*)inputURL\noutputURL:(NSURL*)outputURL\nblockHandler:(void (^)(AVAssetExportSession*))handler\n{\nAVURLAsset *asset = [AVURLAsset URLAssetWithURL:inputURL options:nil];\nAVAssetExportSession *session = [[AVAssetExportSession alloc] initWithAsset:asset     presetName:AVAssetExportPresetMediumQuality];\nsession.outputURL = outputURL;\nsession.outputFileType = AVFileTypeQuickTimeMovie;\n[session exportAsynchronouslyWithCompletionHandler:^(void)\n{\nhandler(session);\n}];\n}\n\n//使用\n[self lowQuailtyWithInputURL:video outputURL:output blockHandler:^(AVAssetExportSession *session)\n{\nif (session.status == AVAssetExportSessionStatusCompleted)\n{\n\n}\nelse\n{\n\n\n}\n}];\n\n```\n\n在block里面检测成功，失败，或者是取消，然后释放session.\n\n期间可以通过不断的查看session的progress属性来获取转换的进度。\n\n可以设置这些压缩质量\n\n```Objective-C\nAVF_EXPORT NSString *const AVAssetExportPresetLowQuality        NS_AVAILABLE_IOS(4_0);\nAVF_EXPORT NSString *const AVAssetExportPresetMediumQuality     NS_AVAILABLE_IOS(4_0);\nAVF_EXPORT NSString *const AVAssetExportPresetHighestQuality    NS_AVAILABLE_IOS(4_0);\n```\n\n# GPUImage常用类说明\n```Objective-C\n#import \"GLProgram.h\"\n\n// Base classes\n#import \"GPUImageOpenGLESContext.h\"//封装\n#import \"GPUImageOutput.h\"//输出\n#import \"GPUImageView.h\"//画布\n#import \"GPUImageVideoCamera.h\"//录像\n#import \"GPUImageStillCamera.h\"//拍照\n#import \"GPUImageMovie.h\"//输入视频\n#import \"GPUImagePicture.h\"//输出视频\n#import \"GPUImageRawDataInput.h\"//输入原始数据\n#import \"GPUImageRawDataOutput.h\"//输出原始数据\n#import \"GPUImageMovieWriter.h\"//合成视频写本地\n#import \"GPUImageFilterPipeline.h\"//滤镜组合\n#import \"GPUImageTextureOutput.h\"//输出纹理\n#import \"GPUImageFilterGroup.h\"//滤镜组合\n#import \"GPUImageTextureInput.h\"//OpenGL输入纹理\n#import \"GPUImageUIElement.h\"//视频合成元素，包装view对象进去可以输出到画面上\n#import \"GPUImageBuffer.h\"//视频图片buffer\n<!-- more -->\n\n// Filters\n#import \"GPUImageFilter.h\"\n#import \"GPUImageTwoInputFilter.h\"\n\n\n#pragma mark - 调整颜色 Handle Color\n\n#import \"GPUImageBrightnessFilter.h\"                //亮度\n#import \"GPUImageExposureFilter.h\"                  //曝光\n#import \"GPUImageContrastFilter.h\"                  //对比度\n#import \"GPUImageSaturationFilter.h\"                //饱和度\n#import \"GPUImageGammaFilter.h\"                     //伽马线\n#import \"GPUImageColorInvertFilter.h\"               //反色\n#import \"GPUImageSepiaFilter.h\"                     //褐色（怀旧）\n#import \"GPUImageLevelsFilter.h\"                    //色阶\n#import \"GPUImageGrayscaleFilter.h\"                 //灰度\n#import \"GPUImageHistogramFilter.h\"                 //色彩直方图，显示在图片上\n#import \"GPUImageHistogramGenerator.h\"              //色彩直方图\n#import \"GPUImageRGBFilter.h\"                       //RGB\n#import \"GPUImageToneCurveFilter.h\"                 //色调曲线\n#import \"GPUImageMonochromeFilter.h\"                //单色\n#import \"GPUImageOpacityFilter.h\"                   //不透明度\n#import \"GPUImageHighlightShadowFilter.h\"           //提亮阴影\n#import \"GPUImageFalseColorFilter.h\"                //色彩替换（替换亮部和暗部色彩）\n#import \"GPUImageHueFilter.h\"                       //色度\n#import \"GPUImageChromaKeyFilter.h\"                 //色度键\n#import \"GPUImageWhiteBalanceFilter.h\"              //白平横\n#import \"GPUImageAverageColor.h\"                    //像素平均色值\n#import \"GPUImageSolidColorGenerator.h\"             //纯色\n#import \"GPUImageLuminosity.h\"                      //亮度平均\n#import \"GPUImageAverageLuminanceThresholdFilter.h\" //像素色值亮度平均，图像黑白（有类似漫画效果）\n\n#import \"GPUImageLookupFilter.h\"                    //lookup 色彩调整\n#import \"GPUImageAmatorkaFilter.h\"                  //Amatorka lookup\n#import \"GPUImageMissEtikateFilter.h\"               //MissEtikate lookup\n#import \"GPUImageSoftEleganceFilter.h\"              //SoftElegance lookup\n\n\n\n\n#pragma mark - 图像处理 Handle Image\n\n#import \"GPUImageCrosshairGenerator.h\"              //十字\n#import \"GPUImageLineGenerator.h\"                   //线条\n\n#import \"GPUImageTransformFilter.h\"                 //形状变化\n#import \"GPUImageCropFilter.h\"                      //剪裁\n#import \"GPUImageSharpenFilter.h\"                   //锐化\n#import \"GPUImageUnsharpMaskFilter.h\"               //反遮罩锐化\n\n#import \"GPUImageFastBlurFilter.h\"                  //模糊\n#import \"GPUImageGaussianBlurFilter.h\"              //高斯模糊\n#import \"GPUImageGaussianSelectiveBlurFilter.h\"     //高斯模糊，选择部分清晰\n#import \"GPUImageBoxBlurFilter.h\"                   //盒状模糊\n#import \"GPUImageTiltShiftFilter.h\"                 //条纹模糊，中间清晰，上下两端模糊\n#import \"GPUImageMedianFilter.h\"                    //中间值，有种稍微模糊边缘的效果\n#import \"GPUImageBilateralFilter.h\"                 //双边模糊\n#import \"GPUImageErosionFilter.h\"                   //侵蚀边缘模糊，变黑白\n#import \"GPUImageRGBErosionFilter.h\"                //RGB侵蚀边缘模糊，有色彩\n#import \"GPUImageDilationFilter.h\"                  //扩展边缘模糊，变黑白\n#import \"GPUImageRGBDilationFilter.h\"               //RGB扩展边缘模糊，有色彩\n#import \"GPUImageOpeningFilter.h\"                   //黑白色调模糊\n#import \"GPUImageRGBOpeningFilter.h\"                //彩色模糊\n#import \"GPUImageClosingFilter.h\"                   //黑白色调模糊，暗色会被提亮\n#import \"GPUImageRGBClosingFilter.h\"                //彩色模糊，暗色会被提亮\n#import \"GPUImageLanczosResamplingFilter.h\"         //Lanczos重取样，模糊效果\n#import \"GPUImageNonMaximumSuppressionFilter.h\"     //非最大抑制，只显示亮度最高的像素，其他为黑\n#import \"GPUImageThresholdedNonMaximumSuppressionFilter.h\" //与上相比，像素丢失更多\n\n#import \"GPUImageSobelEdgeDetectionFilter.h\"        //Sobel边缘检测算法(白边，黑内容，有点漫画的反色效果)\n#import \"GPUImageCannyEdgeDetectionFilter.h\"        //Canny边缘检测算法（比上更强烈的黑白对比度）\n#import \"GPUImageThresholdEdgeDetectionFilter.h\"    //阈值边缘检测（效果与上差别不大）\n#import \"GPUImagePrewittEdgeDetectionFilter.h\"      //普瑞维特(Prewitt)边缘检测(效果与Sobel差不多，貌似更平滑)\n#import \"GPUImageXYDerivativeFilter.h\"              //XYDerivative边缘检测，画面以蓝色为主，绿色为边缘，带彩色\n#import \"GPUImageHarrisCornerDetectionFilter.h\"     //Harris角点检测，会有绿色小十字显示在图片角点处\n#import \"GPUImageNobleCornerDetectionFilter.h\"      //Noble角点检测，检测点更多\n#import \"GPUImageShiTomasiFeatureDetectionFilter.h\" //ShiTomasi角点检测，与上差别不大\n#import \"GPUImageMotionDetector.h\"                  //动作检测\n#import \"GPUImageHoughTransformLineDetector.h\"      //线条检测\n#import \"GPUImageParallelCoordinateLineTransformFilter.h\" //平行线检测\n\n#import \"GPUImageLocalBinaryPatternFilter.h\"        //图像黑白化，并有大量噪点\n\n#import \"GPUImageLowPassFilter.h\"                   //用于图像加亮\n#import \"GPUImageHighPassFilter.h\"                  //图像低于某值时显示为黑\n\n\n#pragma mark - 视觉效果 Visual Effect\n\n#import \"GPUImageSketchFilter.h\"                    //素描\n#import \"GPUImageThresholdSketchFilter.h\"           //阀值素描，形成有噪点的素描\n#import \"GPUImageToonFilter.h\"                      //卡通效果（黑色粗线描边）\n#import \"GPUImageSmoothToonFilter.h\"                //相比上面的效果更细腻，上面是粗旷的画风\n#import \"GPUImageKuwaharaFilter.h\"                  //桑原(Kuwahara)滤波,水粉画的模糊效果；处理时间比较长，慎用\n\n#import \"GPUImageMosaicFilter.h\"                    //黑白马赛克\n#import \"GPUImagePixellateFilter.h\"                 //像素化\n#import \"GPUImagePolarPixellateFilter.h\"            //同心圆像素化\n#import \"GPUImageCrosshatchFilter.h\"                //交叉线阴影，形成黑白网状画面\n#import \"GPUImageColorPackingFilter.h\"              //色彩丢失，模糊（类似监控摄像效果）\n\n#import \"GPUImageVignetteFilter.h\"                  //晕影，形成黑色圆形边缘，突出中间图像的效果\n#import \"GPUImageSwirlFilter.h\"                     //漩涡，中间形成卷曲的画面\n#import \"GPUImageBulgeDistortionFilter.h\"           //凸起失真，鱼眼效果\n#import \"GPUImagePinchDistortionFilter.h\"           //收缩失真，凹面镜\n#import \"GPUImageStretchDistortionFilter.h\"         //伸展失真，哈哈镜\n#import \"GPUImageGlassSphereFilter.h\"               //水晶球效果\n#import \"GPUImageSphereRefractionFilter.h\"          //球形折射，图形倒立\n\n#import \"GPUImagePosterizeFilter.h\"                 //色调分离，形成噪点效果\n#import \"GPUImageCGAColorspaceFilter.h\"             //CGA色彩滤镜，形成黑、浅蓝、紫色块的画面\n#import \"GPUImagePerlinNoiseFilter.h\"               //柏林噪点，花边噪点\n#import \"GPUImage3x3ConvolutionFilter.h\"            //3x3卷积，高亮大色块变黑，加亮边缘、线条等\n#import \"GPUImageEmbossFilter.h\"                    //浮雕效果，带有点3d的感觉\n#import \"GPUImagePolkaDotFilter.h\"                  //像素圆点花样\n#import \"GPUImageHalftoneFilter.h\"                  //点染,图像黑白化，由黑点构成原图的大致图形\n\n\n#pragma mark - 混合模式 Blend\n\n#import \"GPUImageMultiplyBlendFilter.h\"             //通常用于创建阴影和深度效果\n#import \"GPUImageNormalBlendFilter.h\"               //正常\n#import \"GPUImageAlphaBlendFilter.h\"                //透明混合,通常用于在背景上应用前景的透明度\n#import \"GPUImageDissolveBlendFilter.h\"             //溶解\n#import \"GPUImageOverlayBlendFilter.h\"              //叠加,通常用于创建阴影效果\n#import \"GPUImageDarkenBlendFilter.h\"               //加深混合,通常用于重叠类型\n#import \"GPUImageLightenBlendFilter.h\"              //减淡混合,通常用于重叠类型\n#import \"GPUImageSourceOverBlendFilter.h\"           //源混合\n#import \"GPUImageColorBurnBlendFilter.h\"            //色彩加深混合\n#import \"GPUImageColorDodgeBlendFilter.h\"           //色彩减淡混合\n#import \"GPUImageScreenBlendFilter.h\"               //屏幕包裹,通常用于创建亮点和镜头眩光\n#import \"GPUImageExclusionBlendFilter.h\"            //排除混合\n#import \"GPUImageDifferenceBlendFilter.h\"           //差异混合,通常用于创建更多变动的颜色\n#import \"GPUImageSubtractBlendFilter.h\"             //差值混合,通常用于创建两个图像之间的动画变暗模糊效果\n#import \"GPUImageHardLightBlendFilter.h\"            //强光混合,通常用于创建阴影效果\n#import \"GPUImageSoftLightBlendFilter.h\"            //柔光混合\n#import \"GPUImageChromaKeyBlendFilter.h\"            //色度键混合\n#import \"GPUImageMaskFilter.h\"                      //遮罩混合\n#import \"GPUImageHazeFilter.h\"                      //朦胧加暗\n#import \"GPUImageLuminanceThresholdFilter.h\"        //亮度阈\n#import \"GPUImageAdaptiveThresholdFilter.h\"         //自适应阈值\n#import \"GPUImageAddBlendFilter.h\"                  //通常用于创建两个图像之间的动画变亮模糊效果\n#import \"GPUImageDivideBlendFilter.h\"               //通常用于创建两个图像之间的动画变暗模糊效果\n```\n","slug":"视频处理开发常见问题","published":1,"updated":"2021-07-08T09:20:31.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1i5hfr80010nhs6nanjmkxt","content":"<h1 id=\"获取视频的方向\"><a href=\"#获取视频的方向\" class=\"headerlink\" title=\"获取视频的方向\"></a>获取视频的方向</h1><p>一个视频可以有多个轨道，轨道理论上可以是不同方向的视</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVAsset *anAsset = [AVURLAsset URLAssetWithURL:assetUrl options:nil];</span><br><span class=\"line\">AVAssetTrack *track=[[anAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];只有视频轨道上才有方向信息</span><br><span class=\"line\">CGAffineTransform txf=[track preferredTransform];</span><br><span class=\"line\">NSLog(@&quot;%f,%f,%f,%f&quot;,txf.a,txf.b,txf.c,txf.d);</span><br></pre></td></tr></table></figure>\n<p>0  1 -1  0    Right 向右旋转90度</p>\n<p>-1 0  0 -1    Down 旋转180度</p>\n<p>1  0  0  1    Up 不做旋转</p>\n<p>0 -1  1  0    Left 向左旋转90度</p>\n<h1 id=\"GPUImageCropFilter处理旋转\"><a href=\"#GPUImageCropFilter处理旋转\" class=\"headerlink\" title=\"GPUImageCropFilter处理旋转\"></a>GPUImageCropFilter处理旋转</h1><p>GPUImageCropFilter无法直接处理需要旋转的图片，必须通过一次其他的filter处理传给GPUImageCropFilter才能正确处理，GPUImageCropFilter本身对GPUImageMovieMode处理了旋转但不正确需要中间量</p>\n<h1 id=\"视频压缩\"><a href=\"#视频压缩\" class=\"headerlink\" title=\"视频压缩\"></a>视频压缩</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (void) lowQuailtyWithInputURL:(NSURL*)inputURL</span><br><span class=\"line\">outputURL:(NSURL*)outputURL</span><br><span class=\"line\">blockHandler:(void (^)(AVAssetExportSession*))handler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">AVURLAsset *asset = [AVURLAsset URLAssetWithURL:inputURL options:nil];</span><br><span class=\"line\">AVAssetExportSession *session = [[AVAssetExportSession alloc] initWithAsset:asset     presetName:AVAssetExportPresetMediumQuality];</span><br><span class=\"line\">session.outputURL = outputURL;</span><br><span class=\"line\">session.outputFileType = AVFileTypeQuickTimeMovie;</span><br><span class=\"line\">[session exportAsynchronouslyWithCompletionHandler:^(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">handler(session);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用</span><br><span class=\"line\">[self lowQuailtyWithInputURL:video outputURL:output blockHandler:^(AVAssetExportSession *session)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (session.status == AVAssetExportSessionStatusCompleted)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>在block里面检测成功，失败，或者是取消，然后释放session.</p>\n<p>期间可以通过不断的查看session的progress属性来获取转换的进度。</p>\n<p>可以设置这些压缩质量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVF_EXPORT NSString *const AVAssetExportPresetLowQuality        NS_AVAILABLE_IOS(4_0);</span><br><span class=\"line\">AVF_EXPORT NSString *const AVAssetExportPresetMediumQuality     NS_AVAILABLE_IOS(4_0);</span><br><span class=\"line\">AVF_EXPORT NSString *const AVAssetExportPresetHighestQuality    NS_AVAILABLE_IOS(4_0);</span><br></pre></td></tr></table></figure>\n<h1 id=\"GPUImage常用类说明\"><a href=\"#GPUImage常用类说明\" class=\"headerlink\" title=\"GPUImage常用类说明\"></a>GPUImage常用类说明</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;GLProgram.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// Base classes</span><br><span class=\"line\">#import &quot;GPUImageOpenGLESContext.h&quot;//封装</span><br><span class=\"line\">#import &quot;GPUImageOutput.h&quot;//输出</span><br><span class=\"line\">#import &quot;GPUImageView.h&quot;//画布</span><br><span class=\"line\">#import &quot;GPUImageVideoCamera.h&quot;//录像</span><br><span class=\"line\">#import &quot;GPUImageStillCamera.h&quot;//拍照</span><br><span class=\"line\">#import &quot;GPUImageMovie.h&quot;//输入视频</span><br><span class=\"line\">#import &quot;GPUImagePicture.h&quot;//输出视频</span><br><span class=\"line\">#import &quot;GPUImageRawDataInput.h&quot;//输入原始数据</span><br><span class=\"line\">#import &quot;GPUImageRawDataOutput.h&quot;//输出原始数据</span><br><span class=\"line\">#import &quot;GPUImageMovieWriter.h&quot;//合成视频写本地</span><br><span class=\"line\">#import &quot;GPUImageFilterPipeline.h&quot;//滤镜组合</span><br><span class=\"line\">#import &quot;GPUImageTextureOutput.h&quot;//输出纹理</span><br><span class=\"line\">#import &quot;GPUImageFilterGroup.h&quot;//滤镜组合</span><br><span class=\"line\">#import &quot;GPUImageTextureInput.h&quot;//OpenGL输入纹理</span><br><span class=\"line\">#import &quot;GPUImageUIElement.h&quot;//视频合成元素，包装view对象进去可以输出到画面上</span><br><span class=\"line\">#import &quot;GPUImageBuffer.h&quot;//视频图片buffer</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Filters</span><br><span class=\"line\">#import &quot;GPUImageFilter.h&quot;</span><br><span class=\"line\">#import &quot;GPUImageTwoInputFilter.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 调整颜色 Handle Color</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageBrightnessFilter.h&quot;                //亮度</span><br><span class=\"line\">#import &quot;GPUImageExposureFilter.h&quot;                  //曝光</span><br><span class=\"line\">#import &quot;GPUImageContrastFilter.h&quot;                  //对比度</span><br><span class=\"line\">#import &quot;GPUImageSaturationFilter.h&quot;                //饱和度</span><br><span class=\"line\">#import &quot;GPUImageGammaFilter.h&quot;                     //伽马线</span><br><span class=\"line\">#import &quot;GPUImageColorInvertFilter.h&quot;               //反色</span><br><span class=\"line\">#import &quot;GPUImageSepiaFilter.h&quot;                     //褐色（怀旧）</span><br><span class=\"line\">#import &quot;GPUImageLevelsFilter.h&quot;                    //色阶</span><br><span class=\"line\">#import &quot;GPUImageGrayscaleFilter.h&quot;                 //灰度</span><br><span class=\"line\">#import &quot;GPUImageHistogramFilter.h&quot;                 //色彩直方图，显示在图片上</span><br><span class=\"line\">#import &quot;GPUImageHistogramGenerator.h&quot;              //色彩直方图</span><br><span class=\"line\">#import &quot;GPUImageRGBFilter.h&quot;                       //RGB</span><br><span class=\"line\">#import &quot;GPUImageToneCurveFilter.h&quot;                 //色调曲线</span><br><span class=\"line\">#import &quot;GPUImageMonochromeFilter.h&quot;                //单色</span><br><span class=\"line\">#import &quot;GPUImageOpacityFilter.h&quot;                   //不透明度</span><br><span class=\"line\">#import &quot;GPUImageHighlightShadowFilter.h&quot;           //提亮阴影</span><br><span class=\"line\">#import &quot;GPUImageFalseColorFilter.h&quot;                //色彩替换（替换亮部和暗部色彩）</span><br><span class=\"line\">#import &quot;GPUImageHueFilter.h&quot;                       //色度</span><br><span class=\"line\">#import &quot;GPUImageChromaKeyFilter.h&quot;                 //色度键</span><br><span class=\"line\">#import &quot;GPUImageWhiteBalanceFilter.h&quot;              //白平横</span><br><span class=\"line\">#import &quot;GPUImageAverageColor.h&quot;                    //像素平均色值</span><br><span class=\"line\">#import &quot;GPUImageSolidColorGenerator.h&quot;             //纯色</span><br><span class=\"line\">#import &quot;GPUImageLuminosity.h&quot;                      //亮度平均</span><br><span class=\"line\">#import &quot;GPUImageAverageLuminanceThresholdFilter.h&quot; //像素色值亮度平均，图像黑白（有类似漫画效果）</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageLookupFilter.h&quot;                    //lookup 色彩调整</span><br><span class=\"line\">#import &quot;GPUImageAmatorkaFilter.h&quot;                  //Amatorka lookup</span><br><span class=\"line\">#import &quot;GPUImageMissEtikateFilter.h&quot;               //MissEtikate lookup</span><br><span class=\"line\">#import &quot;GPUImageSoftEleganceFilter.h&quot;              //SoftElegance lookup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 图像处理 Handle Image</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageCrosshairGenerator.h&quot;              //十字</span><br><span class=\"line\">#import &quot;GPUImageLineGenerator.h&quot;                   //线条</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageTransformFilter.h&quot;                 //形状变化</span><br><span class=\"line\">#import &quot;GPUImageCropFilter.h&quot;                      //剪裁</span><br><span class=\"line\">#import &quot;GPUImageSharpenFilter.h&quot;                   //锐化</span><br><span class=\"line\">#import &quot;GPUImageUnsharpMaskFilter.h&quot;               //反遮罩锐化</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageFastBlurFilter.h&quot;                  //模糊</span><br><span class=\"line\">#import &quot;GPUImageGaussianBlurFilter.h&quot;              //高斯模糊</span><br><span class=\"line\">#import &quot;GPUImageGaussianSelectiveBlurFilter.h&quot;     //高斯模糊，选择部分清晰</span><br><span class=\"line\">#import &quot;GPUImageBoxBlurFilter.h&quot;                   //盒状模糊</span><br><span class=\"line\">#import &quot;GPUImageTiltShiftFilter.h&quot;                 //条纹模糊，中间清晰，上下两端模糊</span><br><span class=\"line\">#import &quot;GPUImageMedianFilter.h&quot;                    //中间值，有种稍微模糊边缘的效果</span><br><span class=\"line\">#import &quot;GPUImageBilateralFilter.h&quot;                 //双边模糊</span><br><span class=\"line\">#import &quot;GPUImageErosionFilter.h&quot;                   //侵蚀边缘模糊，变黑白</span><br><span class=\"line\">#import &quot;GPUImageRGBErosionFilter.h&quot;                //RGB侵蚀边缘模糊，有色彩</span><br><span class=\"line\">#import &quot;GPUImageDilationFilter.h&quot;                  //扩展边缘模糊，变黑白</span><br><span class=\"line\">#import &quot;GPUImageRGBDilationFilter.h&quot;               //RGB扩展边缘模糊，有色彩</span><br><span class=\"line\">#import &quot;GPUImageOpeningFilter.h&quot;                   //黑白色调模糊</span><br><span class=\"line\">#import &quot;GPUImageRGBOpeningFilter.h&quot;                //彩色模糊</span><br><span class=\"line\">#import &quot;GPUImageClosingFilter.h&quot;                   //黑白色调模糊，暗色会被提亮</span><br><span class=\"line\">#import &quot;GPUImageRGBClosingFilter.h&quot;                //彩色模糊，暗色会被提亮</span><br><span class=\"line\">#import &quot;GPUImageLanczosResamplingFilter.h&quot;         //Lanczos重取样，模糊效果</span><br><span class=\"line\">#import &quot;GPUImageNonMaximumSuppressionFilter.h&quot;     //非最大抑制，只显示亮度最高的像素，其他为黑</span><br><span class=\"line\">#import &quot;GPUImageThresholdedNonMaximumSuppressionFilter.h&quot; //与上相比，像素丢失更多</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageSobelEdgeDetectionFilter.h&quot;        //Sobel边缘检测算法(白边，黑内容，有点漫画的反色效果)</span><br><span class=\"line\">#import &quot;GPUImageCannyEdgeDetectionFilter.h&quot;        //Canny边缘检测算法（比上更强烈的黑白对比度）</span><br><span class=\"line\">#import &quot;GPUImageThresholdEdgeDetectionFilter.h&quot;    //阈值边缘检测（效果与上差别不大）</span><br><span class=\"line\">#import &quot;GPUImagePrewittEdgeDetectionFilter.h&quot;      //普瑞维特(Prewitt)边缘检测(效果与Sobel差不多，貌似更平滑)</span><br><span class=\"line\">#import &quot;GPUImageXYDerivativeFilter.h&quot;              //XYDerivative边缘检测，画面以蓝色为主，绿色为边缘，带彩色</span><br><span class=\"line\">#import &quot;GPUImageHarrisCornerDetectionFilter.h&quot;     //Harris角点检测，会有绿色小十字显示在图片角点处</span><br><span class=\"line\">#import &quot;GPUImageNobleCornerDetectionFilter.h&quot;      //Noble角点检测，检测点更多</span><br><span class=\"line\">#import &quot;GPUImageShiTomasiFeatureDetectionFilter.h&quot; //ShiTomasi角点检测，与上差别不大</span><br><span class=\"line\">#import &quot;GPUImageMotionDetector.h&quot;                  //动作检测</span><br><span class=\"line\">#import &quot;GPUImageHoughTransformLineDetector.h&quot;      //线条检测</span><br><span class=\"line\">#import &quot;GPUImageParallelCoordinateLineTransformFilter.h&quot; //平行线检测</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageLocalBinaryPatternFilter.h&quot;        //图像黑白化，并有大量噪点</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageLowPassFilter.h&quot;                   //用于图像加亮</span><br><span class=\"line\">#import &quot;GPUImageHighPassFilter.h&quot;                  //图像低于某值时显示为黑</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 视觉效果 Visual Effect</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageSketchFilter.h&quot;                    //素描</span><br><span class=\"line\">#import &quot;GPUImageThresholdSketchFilter.h&quot;           //阀值素描，形成有噪点的素描</span><br><span class=\"line\">#import &quot;GPUImageToonFilter.h&quot;                      //卡通效果（黑色粗线描边）</span><br><span class=\"line\">#import &quot;GPUImageSmoothToonFilter.h&quot;                //相比上面的效果更细腻，上面是粗旷的画风</span><br><span class=\"line\">#import &quot;GPUImageKuwaharaFilter.h&quot;                  //桑原(Kuwahara)滤波,水粉画的模糊效果；处理时间比较长，慎用</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageMosaicFilter.h&quot;                    //黑白马赛克</span><br><span class=\"line\">#import &quot;GPUImagePixellateFilter.h&quot;                 //像素化</span><br><span class=\"line\">#import &quot;GPUImagePolarPixellateFilter.h&quot;            //同心圆像素化</span><br><span class=\"line\">#import &quot;GPUImageCrosshatchFilter.h&quot;                //交叉线阴影，形成黑白网状画面</span><br><span class=\"line\">#import &quot;GPUImageColorPackingFilter.h&quot;              //色彩丢失，模糊（类似监控摄像效果）</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageVignetteFilter.h&quot;                  //晕影，形成黑色圆形边缘，突出中间图像的效果</span><br><span class=\"line\">#import &quot;GPUImageSwirlFilter.h&quot;                     //漩涡，中间形成卷曲的画面</span><br><span class=\"line\">#import &quot;GPUImageBulgeDistortionFilter.h&quot;           //凸起失真，鱼眼效果</span><br><span class=\"line\">#import &quot;GPUImagePinchDistortionFilter.h&quot;           //收缩失真，凹面镜</span><br><span class=\"line\">#import &quot;GPUImageStretchDistortionFilter.h&quot;         //伸展失真，哈哈镜</span><br><span class=\"line\">#import &quot;GPUImageGlassSphereFilter.h&quot;               //水晶球效果</span><br><span class=\"line\">#import &quot;GPUImageSphereRefractionFilter.h&quot;          //球形折射，图形倒立</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImagePosterizeFilter.h&quot;                 //色调分离，形成噪点效果</span><br><span class=\"line\">#import &quot;GPUImageCGAColorspaceFilter.h&quot;             //CGA色彩滤镜，形成黑、浅蓝、紫色块的画面</span><br><span class=\"line\">#import &quot;GPUImagePerlinNoiseFilter.h&quot;               //柏林噪点，花边噪点</span><br><span class=\"line\">#import &quot;GPUImage3x3ConvolutionFilter.h&quot;            //3x3卷积，高亮大色块变黑，加亮边缘、线条等</span><br><span class=\"line\">#import &quot;GPUImageEmbossFilter.h&quot;                    //浮雕效果，带有点3d的感觉</span><br><span class=\"line\">#import &quot;GPUImagePolkaDotFilter.h&quot;                  //像素圆点花样</span><br><span class=\"line\">#import &quot;GPUImageHalftoneFilter.h&quot;                  //点染,图像黑白化，由黑点构成原图的大致图形</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 混合模式 Blend</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageMultiplyBlendFilter.h&quot;             //通常用于创建阴影和深度效果</span><br><span class=\"line\">#import &quot;GPUImageNormalBlendFilter.h&quot;               //正常</span><br><span class=\"line\">#import &quot;GPUImageAlphaBlendFilter.h&quot;                //透明混合,通常用于在背景上应用前景的透明度</span><br><span class=\"line\">#import &quot;GPUImageDissolveBlendFilter.h&quot;             //溶解</span><br><span class=\"line\">#import &quot;GPUImageOverlayBlendFilter.h&quot;              //叠加,通常用于创建阴影效果</span><br><span class=\"line\">#import &quot;GPUImageDarkenBlendFilter.h&quot;               //加深混合,通常用于重叠类型</span><br><span class=\"line\">#import &quot;GPUImageLightenBlendFilter.h&quot;              //减淡混合,通常用于重叠类型</span><br><span class=\"line\">#import &quot;GPUImageSourceOverBlendFilter.h&quot;           //源混合</span><br><span class=\"line\">#import &quot;GPUImageColorBurnBlendFilter.h&quot;            //色彩加深混合</span><br><span class=\"line\">#import &quot;GPUImageColorDodgeBlendFilter.h&quot;           //色彩减淡混合</span><br><span class=\"line\">#import &quot;GPUImageScreenBlendFilter.h&quot;               //屏幕包裹,通常用于创建亮点和镜头眩光</span><br><span class=\"line\">#import &quot;GPUImageExclusionBlendFilter.h&quot;            //排除混合</span><br><span class=\"line\">#import &quot;GPUImageDifferenceBlendFilter.h&quot;           //差异混合,通常用于创建更多变动的颜色</span><br><span class=\"line\">#import &quot;GPUImageSubtractBlendFilter.h&quot;             //差值混合,通常用于创建两个图像之间的动画变暗模糊效果</span><br><span class=\"line\">#import &quot;GPUImageHardLightBlendFilter.h&quot;            //强光混合,通常用于创建阴影效果</span><br><span class=\"line\">#import &quot;GPUImageSoftLightBlendFilter.h&quot;            //柔光混合</span><br><span class=\"line\">#import &quot;GPUImageChromaKeyBlendFilter.h&quot;            //色度键混合</span><br><span class=\"line\">#import &quot;GPUImageMaskFilter.h&quot;                      //遮罩混合</span><br><span class=\"line\">#import &quot;GPUImageHazeFilter.h&quot;                      //朦胧加暗</span><br><span class=\"line\">#import &quot;GPUImageLuminanceThresholdFilter.h&quot;        //亮度阈</span><br><span class=\"line\">#import &quot;GPUImageAdaptiveThresholdFilter.h&quot;         //自适应阈值</span><br><span class=\"line\">#import &quot;GPUImageAddBlendFilter.h&quot;                  //通常用于创建两个图像之间的动画变亮模糊效果</span><br><span class=\"line\">#import &quot;GPUImageDivideBlendFilter.h&quot;               //通常用于创建两个图像之间的动画变暗模糊效果</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"获取视频的方向\"><a href=\"#获取视频的方向\" class=\"headerlink\" title=\"获取视频的方向\"></a>获取视频的方向</h1><p>一个视频可以有多个轨道，轨道理论上可以是不同方向的视</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVAsset *anAsset = [AVURLAsset URLAssetWithURL:assetUrl options:nil];</span><br><span class=\"line\">AVAssetTrack *track=[[anAsset tracksWithMediaType:AVMediaTypeVideo] objectAtIndex:0];只有视频轨道上才有方向信息</span><br><span class=\"line\">CGAffineTransform txf=[track preferredTransform];</span><br><span class=\"line\">NSLog(@&quot;%f,%f,%f,%f&quot;,txf.a,txf.b,txf.c,txf.d);</span><br></pre></td></tr></table></figure>\n<p>0  1 -1  0    Right 向右旋转90度</p>\n<p>-1 0  0 -1    Down 旋转180度</p>\n<p>1  0  0  1    Up 不做旋转</p>\n<p>0 -1  1  0    Left 向左旋转90度</p>\n<h1 id=\"GPUImageCropFilter处理旋转\"><a href=\"#GPUImageCropFilter处理旋转\" class=\"headerlink\" title=\"GPUImageCropFilter处理旋转\"></a>GPUImageCropFilter处理旋转</h1><p>GPUImageCropFilter无法直接处理需要旋转的图片，必须通过一次其他的filter处理传给GPUImageCropFilter才能正确处理，GPUImageCropFilter本身对GPUImageMovieMode处理了旋转但不正确需要中间量</p>\n<h1 id=\"视频压缩\"><a href=\"#视频压缩\" class=\"headerlink\" title=\"视频压缩\"></a>视频压缩</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (void) lowQuailtyWithInputURL:(NSURL*)inputURL</span><br><span class=\"line\">outputURL:(NSURL*)outputURL</span><br><span class=\"line\">blockHandler:(void (^)(AVAssetExportSession*))handler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">AVURLAsset *asset = [AVURLAsset URLAssetWithURL:inputURL options:nil];</span><br><span class=\"line\">AVAssetExportSession *session = [[AVAssetExportSession alloc] initWithAsset:asset     presetName:AVAssetExportPresetMediumQuality];</span><br><span class=\"line\">session.outputURL = outputURL;</span><br><span class=\"line\">session.outputFileType = AVFileTypeQuickTimeMovie;</span><br><span class=\"line\">[session exportAsynchronouslyWithCompletionHandler:^(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">handler(session);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用</span><br><span class=\"line\">[self lowQuailtyWithInputURL:video outputURL:output blockHandler:^(AVAssetExportSession *session)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (session.status == AVAssetExportSessionStatusCompleted)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>在block里面检测成功，失败，或者是取消，然后释放session.</p>\n<p>期间可以通过不断的查看session的progress属性来获取转换的进度。</p>\n<p>可以设置这些压缩质量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVF_EXPORT NSString *const AVAssetExportPresetLowQuality        NS_AVAILABLE_IOS(4_0);</span><br><span class=\"line\">AVF_EXPORT NSString *const AVAssetExportPresetMediumQuality     NS_AVAILABLE_IOS(4_0);</span><br><span class=\"line\">AVF_EXPORT NSString *const AVAssetExportPresetHighestQuality    NS_AVAILABLE_IOS(4_0);</span><br></pre></td></tr></table></figure>\n<h1 id=\"GPUImage常用类说明\"><a href=\"#GPUImage常用类说明\" class=\"headerlink\" title=\"GPUImage常用类说明\"></a>GPUImage常用类说明</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;GLProgram.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// Base classes</span><br><span class=\"line\">#import &quot;GPUImageOpenGLESContext.h&quot;//封装</span><br><span class=\"line\">#import &quot;GPUImageOutput.h&quot;//输出</span><br><span class=\"line\">#import &quot;GPUImageView.h&quot;//画布</span><br><span class=\"line\">#import &quot;GPUImageVideoCamera.h&quot;//录像</span><br><span class=\"line\">#import &quot;GPUImageStillCamera.h&quot;//拍照</span><br><span class=\"line\">#import &quot;GPUImageMovie.h&quot;//输入视频</span><br><span class=\"line\">#import &quot;GPUImagePicture.h&quot;//输出视频</span><br><span class=\"line\">#import &quot;GPUImageRawDataInput.h&quot;//输入原始数据</span><br><span class=\"line\">#import &quot;GPUImageRawDataOutput.h&quot;//输出原始数据</span><br><span class=\"line\">#import &quot;GPUImageMovieWriter.h&quot;//合成视频写本地</span><br><span class=\"line\">#import &quot;GPUImageFilterPipeline.h&quot;//滤镜组合</span><br><span class=\"line\">#import &quot;GPUImageTextureOutput.h&quot;//输出纹理</span><br><span class=\"line\">#import &quot;GPUImageFilterGroup.h&quot;//滤镜组合</span><br><span class=\"line\">#import &quot;GPUImageTextureInput.h&quot;//OpenGL输入纹理</span><br><span class=\"line\">#import &quot;GPUImageUIElement.h&quot;//视频合成元素，包装view对象进去可以输出到画面上</span><br><span class=\"line\">#import &quot;GPUImageBuffer.h&quot;//视频图片buffer</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Filters</span><br><span class=\"line\">#import &quot;GPUImageFilter.h&quot;</span><br><span class=\"line\">#import &quot;GPUImageTwoInputFilter.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 调整颜色 Handle Color</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageBrightnessFilter.h&quot;                //亮度</span><br><span class=\"line\">#import &quot;GPUImageExposureFilter.h&quot;                  //曝光</span><br><span class=\"line\">#import &quot;GPUImageContrastFilter.h&quot;                  //对比度</span><br><span class=\"line\">#import &quot;GPUImageSaturationFilter.h&quot;                //饱和度</span><br><span class=\"line\">#import &quot;GPUImageGammaFilter.h&quot;                     //伽马线</span><br><span class=\"line\">#import &quot;GPUImageColorInvertFilter.h&quot;               //反色</span><br><span class=\"line\">#import &quot;GPUImageSepiaFilter.h&quot;                     //褐色（怀旧）</span><br><span class=\"line\">#import &quot;GPUImageLevelsFilter.h&quot;                    //色阶</span><br><span class=\"line\">#import &quot;GPUImageGrayscaleFilter.h&quot;                 //灰度</span><br><span class=\"line\">#import &quot;GPUImageHistogramFilter.h&quot;                 //色彩直方图，显示在图片上</span><br><span class=\"line\">#import &quot;GPUImageHistogramGenerator.h&quot;              //色彩直方图</span><br><span class=\"line\">#import &quot;GPUImageRGBFilter.h&quot;                       //RGB</span><br><span class=\"line\">#import &quot;GPUImageToneCurveFilter.h&quot;                 //色调曲线</span><br><span class=\"line\">#import &quot;GPUImageMonochromeFilter.h&quot;                //单色</span><br><span class=\"line\">#import &quot;GPUImageOpacityFilter.h&quot;                   //不透明度</span><br><span class=\"line\">#import &quot;GPUImageHighlightShadowFilter.h&quot;           //提亮阴影</span><br><span class=\"line\">#import &quot;GPUImageFalseColorFilter.h&quot;                //色彩替换（替换亮部和暗部色彩）</span><br><span class=\"line\">#import &quot;GPUImageHueFilter.h&quot;                       //色度</span><br><span class=\"line\">#import &quot;GPUImageChromaKeyFilter.h&quot;                 //色度键</span><br><span class=\"line\">#import &quot;GPUImageWhiteBalanceFilter.h&quot;              //白平横</span><br><span class=\"line\">#import &quot;GPUImageAverageColor.h&quot;                    //像素平均色值</span><br><span class=\"line\">#import &quot;GPUImageSolidColorGenerator.h&quot;             //纯色</span><br><span class=\"line\">#import &quot;GPUImageLuminosity.h&quot;                      //亮度平均</span><br><span class=\"line\">#import &quot;GPUImageAverageLuminanceThresholdFilter.h&quot; //像素色值亮度平均，图像黑白（有类似漫画效果）</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageLookupFilter.h&quot;                    //lookup 色彩调整</span><br><span class=\"line\">#import &quot;GPUImageAmatorkaFilter.h&quot;                  //Amatorka lookup</span><br><span class=\"line\">#import &quot;GPUImageMissEtikateFilter.h&quot;               //MissEtikate lookup</span><br><span class=\"line\">#import &quot;GPUImageSoftEleganceFilter.h&quot;              //SoftElegance lookup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 图像处理 Handle Image</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageCrosshairGenerator.h&quot;              //十字</span><br><span class=\"line\">#import &quot;GPUImageLineGenerator.h&quot;                   //线条</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageTransformFilter.h&quot;                 //形状变化</span><br><span class=\"line\">#import &quot;GPUImageCropFilter.h&quot;                      //剪裁</span><br><span class=\"line\">#import &quot;GPUImageSharpenFilter.h&quot;                   //锐化</span><br><span class=\"line\">#import &quot;GPUImageUnsharpMaskFilter.h&quot;               //反遮罩锐化</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageFastBlurFilter.h&quot;                  //模糊</span><br><span class=\"line\">#import &quot;GPUImageGaussianBlurFilter.h&quot;              //高斯模糊</span><br><span class=\"line\">#import &quot;GPUImageGaussianSelectiveBlurFilter.h&quot;     //高斯模糊，选择部分清晰</span><br><span class=\"line\">#import &quot;GPUImageBoxBlurFilter.h&quot;                   //盒状模糊</span><br><span class=\"line\">#import &quot;GPUImageTiltShiftFilter.h&quot;                 //条纹模糊，中间清晰，上下两端模糊</span><br><span class=\"line\">#import &quot;GPUImageMedianFilter.h&quot;                    //中间值，有种稍微模糊边缘的效果</span><br><span class=\"line\">#import &quot;GPUImageBilateralFilter.h&quot;                 //双边模糊</span><br><span class=\"line\">#import &quot;GPUImageErosionFilter.h&quot;                   //侵蚀边缘模糊，变黑白</span><br><span class=\"line\">#import &quot;GPUImageRGBErosionFilter.h&quot;                //RGB侵蚀边缘模糊，有色彩</span><br><span class=\"line\">#import &quot;GPUImageDilationFilter.h&quot;                  //扩展边缘模糊，变黑白</span><br><span class=\"line\">#import &quot;GPUImageRGBDilationFilter.h&quot;               //RGB扩展边缘模糊，有色彩</span><br><span class=\"line\">#import &quot;GPUImageOpeningFilter.h&quot;                   //黑白色调模糊</span><br><span class=\"line\">#import &quot;GPUImageRGBOpeningFilter.h&quot;                //彩色模糊</span><br><span class=\"line\">#import &quot;GPUImageClosingFilter.h&quot;                   //黑白色调模糊，暗色会被提亮</span><br><span class=\"line\">#import &quot;GPUImageRGBClosingFilter.h&quot;                //彩色模糊，暗色会被提亮</span><br><span class=\"line\">#import &quot;GPUImageLanczosResamplingFilter.h&quot;         //Lanczos重取样，模糊效果</span><br><span class=\"line\">#import &quot;GPUImageNonMaximumSuppressionFilter.h&quot;     //非最大抑制，只显示亮度最高的像素，其他为黑</span><br><span class=\"line\">#import &quot;GPUImageThresholdedNonMaximumSuppressionFilter.h&quot; //与上相比，像素丢失更多</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageSobelEdgeDetectionFilter.h&quot;        //Sobel边缘检测算法(白边，黑内容，有点漫画的反色效果)</span><br><span class=\"line\">#import &quot;GPUImageCannyEdgeDetectionFilter.h&quot;        //Canny边缘检测算法（比上更强烈的黑白对比度）</span><br><span class=\"line\">#import &quot;GPUImageThresholdEdgeDetectionFilter.h&quot;    //阈值边缘检测（效果与上差别不大）</span><br><span class=\"line\">#import &quot;GPUImagePrewittEdgeDetectionFilter.h&quot;      //普瑞维特(Prewitt)边缘检测(效果与Sobel差不多，貌似更平滑)</span><br><span class=\"line\">#import &quot;GPUImageXYDerivativeFilter.h&quot;              //XYDerivative边缘检测，画面以蓝色为主，绿色为边缘，带彩色</span><br><span class=\"line\">#import &quot;GPUImageHarrisCornerDetectionFilter.h&quot;     //Harris角点检测，会有绿色小十字显示在图片角点处</span><br><span class=\"line\">#import &quot;GPUImageNobleCornerDetectionFilter.h&quot;      //Noble角点检测，检测点更多</span><br><span class=\"line\">#import &quot;GPUImageShiTomasiFeatureDetectionFilter.h&quot; //ShiTomasi角点检测，与上差别不大</span><br><span class=\"line\">#import &quot;GPUImageMotionDetector.h&quot;                  //动作检测</span><br><span class=\"line\">#import &quot;GPUImageHoughTransformLineDetector.h&quot;      //线条检测</span><br><span class=\"line\">#import &quot;GPUImageParallelCoordinateLineTransformFilter.h&quot; //平行线检测</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageLocalBinaryPatternFilter.h&quot;        //图像黑白化，并有大量噪点</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageLowPassFilter.h&quot;                   //用于图像加亮</span><br><span class=\"line\">#import &quot;GPUImageHighPassFilter.h&quot;                  //图像低于某值时显示为黑</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 视觉效果 Visual Effect</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageSketchFilter.h&quot;                    //素描</span><br><span class=\"line\">#import &quot;GPUImageThresholdSketchFilter.h&quot;           //阀值素描，形成有噪点的素描</span><br><span class=\"line\">#import &quot;GPUImageToonFilter.h&quot;                      //卡通效果（黑色粗线描边）</span><br><span class=\"line\">#import &quot;GPUImageSmoothToonFilter.h&quot;                //相比上面的效果更细腻，上面是粗旷的画风</span><br><span class=\"line\">#import &quot;GPUImageKuwaharaFilter.h&quot;                  //桑原(Kuwahara)滤波,水粉画的模糊效果；处理时间比较长，慎用</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageMosaicFilter.h&quot;                    //黑白马赛克</span><br><span class=\"line\">#import &quot;GPUImagePixellateFilter.h&quot;                 //像素化</span><br><span class=\"line\">#import &quot;GPUImagePolarPixellateFilter.h&quot;            //同心圆像素化</span><br><span class=\"line\">#import &quot;GPUImageCrosshatchFilter.h&quot;                //交叉线阴影，形成黑白网状画面</span><br><span class=\"line\">#import &quot;GPUImageColorPackingFilter.h&quot;              //色彩丢失，模糊（类似监控摄像效果）</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageVignetteFilter.h&quot;                  //晕影，形成黑色圆形边缘，突出中间图像的效果</span><br><span class=\"line\">#import &quot;GPUImageSwirlFilter.h&quot;                     //漩涡，中间形成卷曲的画面</span><br><span class=\"line\">#import &quot;GPUImageBulgeDistortionFilter.h&quot;           //凸起失真，鱼眼效果</span><br><span class=\"line\">#import &quot;GPUImagePinchDistortionFilter.h&quot;           //收缩失真，凹面镜</span><br><span class=\"line\">#import &quot;GPUImageStretchDistortionFilter.h&quot;         //伸展失真，哈哈镜</span><br><span class=\"line\">#import &quot;GPUImageGlassSphereFilter.h&quot;               //水晶球效果</span><br><span class=\"line\">#import &quot;GPUImageSphereRefractionFilter.h&quot;          //球形折射，图形倒立</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImagePosterizeFilter.h&quot;                 //色调分离，形成噪点效果</span><br><span class=\"line\">#import &quot;GPUImageCGAColorspaceFilter.h&quot;             //CGA色彩滤镜，形成黑、浅蓝、紫色块的画面</span><br><span class=\"line\">#import &quot;GPUImagePerlinNoiseFilter.h&quot;               //柏林噪点，花边噪点</span><br><span class=\"line\">#import &quot;GPUImage3x3ConvolutionFilter.h&quot;            //3x3卷积，高亮大色块变黑，加亮边缘、线条等</span><br><span class=\"line\">#import &quot;GPUImageEmbossFilter.h&quot;                    //浮雕效果，带有点3d的感觉</span><br><span class=\"line\">#import &quot;GPUImagePolkaDotFilter.h&quot;                  //像素圆点花样</span><br><span class=\"line\">#import &quot;GPUImageHalftoneFilter.h&quot;                  //点染,图像黑白化，由黑点构成原图的大致图形</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - 混合模式 Blend</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;GPUImageMultiplyBlendFilter.h&quot;             //通常用于创建阴影和深度效果</span><br><span class=\"line\">#import &quot;GPUImageNormalBlendFilter.h&quot;               //正常</span><br><span class=\"line\">#import &quot;GPUImageAlphaBlendFilter.h&quot;                //透明混合,通常用于在背景上应用前景的透明度</span><br><span class=\"line\">#import &quot;GPUImageDissolveBlendFilter.h&quot;             //溶解</span><br><span class=\"line\">#import &quot;GPUImageOverlayBlendFilter.h&quot;              //叠加,通常用于创建阴影效果</span><br><span class=\"line\">#import &quot;GPUImageDarkenBlendFilter.h&quot;               //加深混合,通常用于重叠类型</span><br><span class=\"line\">#import &quot;GPUImageLightenBlendFilter.h&quot;              //减淡混合,通常用于重叠类型</span><br><span class=\"line\">#import &quot;GPUImageSourceOverBlendFilter.h&quot;           //源混合</span><br><span class=\"line\">#import &quot;GPUImageColorBurnBlendFilter.h&quot;            //色彩加深混合</span><br><span class=\"line\">#import &quot;GPUImageColorDodgeBlendFilter.h&quot;           //色彩减淡混合</span><br><span class=\"line\">#import &quot;GPUImageScreenBlendFilter.h&quot;               //屏幕包裹,通常用于创建亮点和镜头眩光</span><br><span class=\"line\">#import &quot;GPUImageExclusionBlendFilter.h&quot;            //排除混合</span><br><span class=\"line\">#import &quot;GPUImageDifferenceBlendFilter.h&quot;           //差异混合,通常用于创建更多变动的颜色</span><br><span class=\"line\">#import &quot;GPUImageSubtractBlendFilter.h&quot;             //差值混合,通常用于创建两个图像之间的动画变暗模糊效果</span><br><span class=\"line\">#import &quot;GPUImageHardLightBlendFilter.h&quot;            //强光混合,通常用于创建阴影效果</span><br><span class=\"line\">#import &quot;GPUImageSoftLightBlendFilter.h&quot;            //柔光混合</span><br><span class=\"line\">#import &quot;GPUImageChromaKeyBlendFilter.h&quot;            //色度键混合</span><br><span class=\"line\">#import &quot;GPUImageMaskFilter.h&quot;                      //遮罩混合</span><br><span class=\"line\">#import &quot;GPUImageHazeFilter.h&quot;                      //朦胧加暗</span><br><span class=\"line\">#import &quot;GPUImageLuminanceThresholdFilter.h&quot;        //亮度阈</span><br><span class=\"line\">#import &quot;GPUImageAdaptiveThresholdFilter.h&quot;         //自适应阈值</span><br><span class=\"line\">#import &quot;GPUImageAddBlendFilter.h&quot;                  //通常用于创建两个图像之间的动画变亮模糊效果</span><br><span class=\"line\">#import &quot;GPUImageDivideBlendFilter.h&quot;               //通常用于创建两个图像之间的动画变暗模糊效果</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl1i5hfq80000nhs66qu0oiql","tag_id":"cl1i5hfqg0002nhs65qb6xdwg","_id":"cl1i5hfr6000unhs6bgttg7p7"},{"post_id":"cl1i5hfq80000nhs66qu0oiql","tag_id":"cl1i5hfqm0006nhs6q0b3x04v","_id":"cl1i5hfr7000wnhs6ywg0d6an"},{"post_id":"cl1i5hfq80000nhs66qu0oiql","tag_id":"cl1i5hfqp0009nhs6i384693e","_id":"cl1i5hfr8000znhs600firvce"},{"post_id":"cl1i5hfq80000nhs66qu0oiql","tag_id":"cl1i5hfqs000cnhs61igq0y00","_id":"cl1i5hfr90011nhs68kmixlou"},{"post_id":"cl1i5hfq80000nhs66qu0oiql","tag_id":"cl1i5hfqv000fnhs65qrnggiy","_id":"cl1i5hfr90013nhs6hq1s6pk2"},{"post_id":"cl1i5hfq80000nhs66qu0oiql","tag_id":"cl1i5hfqy000jnhs6mihr3l96","_id":"cl1i5hfra0014nhs64j6l3qbi"},{"post_id":"cl1i5hfq80000nhs66qu0oiql","tag_id":"cl1i5hfr0000mnhs6huov2cws","_id":"cl1i5hfra0016nhs671j0xw6j"},{"post_id":"cl1i5hfq80000nhs66qu0oiql","tag_id":"cl1i5hfr2000pnhs6gwydz59x","_id":"cl1i5hfra0017nhs6dy8jnk4d"},{"post_id":"cl1i5hfqe0001nhs6ajhanlh7","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfrb001anhs67vvq60kq"},{"post_id":"cl1i5hfqe0001nhs6ajhanlh7","tag_id":"cl1i5hfr8000ynhs6su0f7lg6","_id":"cl1i5hfrb001bnhs61vlytrek"},{"post_id":"cl1i5hfqe0001nhs6ajhanlh7","tag_id":"cl1i5hfr90012nhs69vhlqvh0","_id":"cl1i5hfrc001dnhs62heo3s1t"},{"post_id":"cl1i5hfqe0001nhs6ajhanlh7","tag_id":"cl1i5hfra0015nhs6mimu94ax","_id":"cl1i5hfrc001enhs6rm9i55hm"},{"post_id":"cl1i5hfqe0001nhs6ajhanlh7","tag_id":"cl1i5hfra0018nhs6egcbc004","_id":"cl1i5hfrc001gnhs6gsv4vn94"},{"post_id":"cl1i5hfqi0003nhs6gsexdon2","tag_id":"cl1i5hfra0019nhs61lam1lvn","_id":"cl1i5hfrd001knhs6mnzj1dpl"},{"post_id":"cl1i5hfqi0003nhs6gsexdon2","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfrd001lnhs6fep8icla"},{"post_id":"cl1i5hfqi0003nhs6gsexdon2","tag_id":"cl1i5hfrc001fnhs60e1p02py","_id":"cl1i5hfre001nnhs6mxtst7ug"},{"post_id":"cl1i5hfqi0003nhs6gsexdon2","tag_id":"cl1i5hfrd001hnhs6cy6df3z9","_id":"cl1i5hfre001onhs6havaspa7"},{"post_id":"cl1i5hfqi0003nhs6gsexdon2","tag_id":"cl1i5hfrd001inhs67kj88b9d","_id":"cl1i5hfre001qnhs6hilyb5z2"},{"post_id":"cl1i5hfqk0004nhs6eqtvnbpu","tag_id":"cl1i5hfrd001jnhs6wcdtfzg5","_id":"cl1i5hfre001rnhs6yyf1lkka"},{"post_id":"cl1i5hfqk0004nhs6eqtvnbpu","tag_id":"cl1i5hfrd001mnhs69jriz9vu","_id":"cl1i5hfre001tnhs6o54g1ptz"},{"post_id":"cl1i5hfql0005nhs6ahxqp054","tag_id":"cl1i5hfre001pnhs6dweg7vxm","_id":"cl1i5hfrf001xnhs623333a2a"},{"post_id":"cl1i5hfql0005nhs6ahxqp054","tag_id":"cl1i5hfre001snhs670b3d82y","_id":"cl1i5hfrf001ynhs645ijr8fe"},{"post_id":"cl1i5hfql0005nhs6ahxqp054","tag_id":"cl1i5hfre001unhs6nhtv15tm","_id":"cl1i5hfrg0020nhs6x5fal9um"},{"post_id":"cl1i5hfql0005nhs6ahxqp054","tag_id":"cl1i5hfrf001vnhs6dexl7e2w","_id":"cl1i5hfrg0021nhs61vhggn67"},{"post_id":"cl1i5hfqn0007nhs6x42av5rh","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfrh0026nhs6cd1f3ioo"},{"post_id":"cl1i5hfqn0007nhs6x42av5rh","tag_id":"cl1i5hfrf001znhs64qzms3ob","_id":"cl1i5hfrh0027nhs6dh3vfa0g"},{"post_id":"cl1i5hfqn0007nhs6x42av5rh","tag_id":"cl1i5hfrg0022nhs62gkwrk85","_id":"cl1i5hfrh0029nhs6ozsh90q7"},{"post_id":"cl1i5hfqn0007nhs6x42av5rh","tag_id":"cl1i5hfrg0023nhs6wnpzg4os","_id":"cl1i5hfrh002anhs6eesai3va"},{"post_id":"cl1i5hfqn0007nhs6x42av5rh","tag_id":"cl1i5hfrg0024nhs69ocw2s8x","_id":"cl1i5hfri002cnhs6wom62npv"},{"post_id":"cl1i5hfqo0008nhs6ftf74lw3","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfrj002inhs6f0jrvqnr"},{"post_id":"cl1i5hfqo0008nhs6ftf74lw3","tag_id":"cl1i5hfrg0022nhs62gkwrk85","_id":"cl1i5hfrj002jnhs6k89vojie"},{"post_id":"cl1i5hfqo0008nhs6ftf74lw3","tag_id":"cl1i5hfrg0023nhs6wnpzg4os","_id":"cl1i5hfrk002lnhs6hfdoz67z"},{"post_id":"cl1i5hfqo0008nhs6ftf74lw3","tag_id":"cl1i5hfrg0024nhs69ocw2s8x","_id":"cl1i5hfrk002mnhs6f3i5jnip"},{"post_id":"cl1i5hfqo0008nhs6ftf74lw3","tag_id":"cl1i5hfri002enhs604d7r5zj","_id":"cl1i5hfrk002onhs62ulhul93"},{"post_id":"cl1i5hfqo0008nhs6ftf74lw3","tag_id":"cl1i5hfrj002fnhs6gqlf9vzz","_id":"cl1i5hfrk002pnhs621f5xvcx"},{"post_id":"cl1i5hfqo0008nhs6ftf74lw3","tag_id":"cl1i5hfrj002gnhs6iz6upzca","_id":"cl1i5hfrk002rnhs61u4gvb1v"},{"post_id":"cl1i5hfqq000anhs652n0q7ja","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfrl002tnhs64zs7o7w5"},{"post_id":"cl1i5hfqq000anhs652n0q7ja","tag_id":"cl1i5hfrk002knhs6huzn3tb0","_id":"cl1i5hfrl002unhs6v3gp0ynq"},{"post_id":"cl1i5hfqq000anhs652n0q7ja","tag_id":"cl1i5hfrk002nnhs6gxhfv19s","_id":"cl1i5hfrl002wnhs6kovyt504"},{"post_id":"cl1i5hfqq000anhs652n0q7ja","tag_id":"cl1i5hfrk002qnhs64pz7m5ol","_id":"cl1i5hfrl002xnhs63eyw3zfm"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrk002snhs6hxv4k638","_id":"cl1i5hfro0037nhs6pqmq71lh"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfro0038nhs6kt8yp9n2"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrl002ynhs6ucmipijp","_id":"cl1i5hfro003anhs6bd7eel81"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrl002znhs6g0wgvzzr","_id":"cl1i5hfro003bnhs6yelk8hyc"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrm0030nhs6zx0053yk","_id":"cl1i5hfrp003dnhs6gw09rrq0"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrm0031nhs6vtfjo2q6","_id":"cl1i5hfrp003enhs6syeq3mj7"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrm0032nhs6fju1fy04","_id":"cl1i5hfrp003gnhs6a2yzs9i9"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrm0033nhs6bmq9a5sa","_id":"cl1i5hfrp003hnhs68jz5aslj"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrm0034nhs6rwizze0n","_id":"cl1i5hfrq003jnhs6krk4i5kv"},{"post_id":"cl1i5hfqr000bnhs6dr0x05ed","tag_id":"cl1i5hfrn0035nhs68a3i1okn","_id":"cl1i5hfrq003knhs6scjslah4"},{"post_id":"cl1i5hfqt000dnhs6z5njqt65","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfrr003mnhs61kacqvjk"},{"post_id":"cl1i5hfqt000dnhs6z5njqt65","tag_id":"cl1i5hfrf001znhs64qzms3ob","_id":"cl1i5hfrr003nnhs6o5jqi1yi"},{"post_id":"cl1i5hfqt000dnhs6z5njqt65","tag_id":"cl1i5hfrg0022nhs62gkwrk85","_id":"cl1i5hfrr003pnhs69mq4tfhp"},{"post_id":"cl1i5hfqt000dnhs6z5njqt65","tag_id":"cl1i5hfrp003fnhs6y6iczcvd","_id":"cl1i5hfrr003qnhs6ge2k1art"},{"post_id":"cl1i5hfqt000dnhs6z5njqt65","tag_id":"cl1i5hfrp003inhs6zlcpds4x","_id":"cl1i5hfrs003snhs6jsmee2v3"},{"post_id":"cl1i5hfqu000enhs6p17dh54f","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfrs003tnhs6pm9i2hi7"},{"post_id":"cl1i5hfqu000enhs6p17dh54f","tag_id":"cl1i5hfrr003onhs6ymbh3cpr","_id":"cl1i5hfrs003vnhs60ucllnvm"},{"post_id":"cl1i5hfqw000gnhs674bame8h","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfru0040nhs6rd4rfvl4"},{"post_id":"cl1i5hfqw000gnhs674bame8h","tag_id":"cl1i5hfrs003unhs6d38rgcuz","_id":"cl1i5hfru0041nhs6igjdwske"},{"post_id":"cl1i5hfqw000gnhs674bame8h","tag_id":"cl1i5hfrs003wnhs6cpu4pv3m","_id":"cl1i5hfrv0043nhs6tsxnlo7a"},{"post_id":"cl1i5hfqw000gnhs674bame8h","tag_id":"cl1i5hfrt003xnhs6d57c15g1","_id":"cl1i5hfrv0044nhs6s297y936"},{"post_id":"cl1i5hfqw000gnhs674bame8h","tag_id":"cl1i5hfrk002qnhs64pz7m5ol","_id":"cl1i5hfrv0046nhs6b7m2uyko"},{"post_id":"cl1i5hfqw000hnhs6uajvcixi","tag_id":"cl1i5hfrt003znhs6kmqwrdp7","_id":"cl1i5hfrx004dnhs6d6kzshrs"},{"post_id":"cl1i5hfqw000hnhs6uajvcixi","tag_id":"cl1i5hfru0042nhs6f42qgrio","_id":"cl1i5hfry004enhs6x1rfbjlb"},{"post_id":"cl1i5hfqw000hnhs6uajvcixi","tag_id":"cl1i5hfrv0045nhs664neir6c","_id":"cl1i5hfrz004gnhs68bkpokt0"},{"post_id":"cl1i5hfqw000hnhs6uajvcixi","tag_id":"cl1i5hfrv0047nhs6b6w9rhep","_id":"cl1i5hfrz004hnhs6dxakmm2b"},{"post_id":"cl1i5hfqw000hnhs6uajvcixi","tag_id":"cl1i5hfrw0048nhs6tnyteonh","_id":"cl1i5hfrz004jnhs602xfmfc8"},{"post_id":"cl1i5hfqw000hnhs6uajvcixi","tag_id":"cl1i5hfrw0049nhs6hrdzer1m","_id":"cl1i5hfs0004knhs6p6xlxgjh"},{"post_id":"cl1i5hfqw000hnhs6uajvcixi","tag_id":"cl1i5hfrw004anhs6vbqowqzc","_id":"cl1i5hfs0004mnhs6d68c2dcg"},{"post_id":"cl1i5hfqw000hnhs6uajvcixi","tag_id":"cl1i5hfrw004bnhs607udmvmv","_id":"cl1i5hfs0004nnhs6cwx1b744"},{"post_id":"cl1i5hfqx000inhs6ksee95e5","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfs2004pnhs6btqzo0hq"},{"post_id":"cl1i5hfqx000inhs6ksee95e5","tag_id":"cl1i5hfrc001fnhs60e1p02py","_id":"cl1i5hfs2004qnhs6flaxoaga"},{"post_id":"cl1i5hfqx000inhs6ksee95e5","tag_id":"cl1i5hfra0019nhs61lam1lvn","_id":"cl1i5hfs2004snhs6m3bv9nes"},{"post_id":"cl1i5hfqx000inhs6ksee95e5","tag_id":"cl1i5hfrk002qnhs64pz7m5ol","_id":"cl1i5hfs2004tnhs60x6efg9b"},{"post_id":"cl1i5hfqy000knhs6gau3l5oy","tag_id":"cl1i5hfs0004onhs6fmbj66vv","_id":"cl1i5hfs40050nhs60boer52g"},{"post_id":"cl1i5hfqy000knhs6gau3l5oy","tag_id":"cl1i5hfs2004rnhs6jfxjv6rm","_id":"cl1i5hfs40051nhs6in8euoph"},{"post_id":"cl1i5hfqy000knhs6gau3l5oy","tag_id":"cl1i5hfs2004unhs60nuhcbpa","_id":"cl1i5hfs50053nhs687om3fuu"},{"post_id":"cl1i5hfqy000knhs6gau3l5oy","tag_id":"cl1i5hfs3004vnhs6tr22ogsf","_id":"cl1i5hfs50054nhs6b57de9mu"},{"post_id":"cl1i5hfqy000knhs6gau3l5oy","tag_id":"cl1i5hfs3004wnhs6l448va25","_id":"cl1i5hfs60056nhs6iszcv8p6"},{"post_id":"cl1i5hfqy000knhs6gau3l5oy","tag_id":"cl1i5hfs3004xnhs621dzmfyh","_id":"cl1i5hfs60057nhs6ne0zt57w"},{"post_id":"cl1i5hfqy000knhs6gau3l5oy","tag_id":"cl1i5hfs3004ynhs645hvbcvc","_id":"cl1i5hfs60059nhs6w4v2qahc"},{"post_id":"cl1i5hfqz000lnhs6o2fpfa8a","tag_id":"cl1i5hfs0004onhs6fmbj66vv","_id":"cl1i5hfs8005enhs6vklf28j9"},{"post_id":"cl1i5hfqz000lnhs6o2fpfa8a","tag_id":"cl1i5hfs2004rnhs6jfxjv6rm","_id":"cl1i5hfs8005fnhs6akxr2gsl"},{"post_id":"cl1i5hfqz000lnhs6o2fpfa8a","tag_id":"cl1i5hfs2004unhs60nuhcbpa","_id":"cl1i5hfs9005hnhs6nltlo7hi"},{"post_id":"cl1i5hfqz000lnhs6o2fpfa8a","tag_id":"cl1i5hfs3004vnhs6tr22ogsf","_id":"cl1i5hfs9005inhs6b6eedvwc"},{"post_id":"cl1i5hfqz000lnhs6o2fpfa8a","tag_id":"cl1i5hfs3004wnhs6l448va25","_id":"cl1i5hfsa005knhs6nzgs3wem"},{"post_id":"cl1i5hfqz000lnhs6o2fpfa8a","tag_id":"cl1i5hfs3004xnhs621dzmfyh","_id":"cl1i5hfsa005lnhs6hr164ao5"},{"post_id":"cl1i5hfqz000lnhs6o2fpfa8a","tag_id":"cl1i5hfs3004ynhs645hvbcvc","_id":"cl1i5hfsa005nnhs69qrv7c20"},{"post_id":"cl1i5hfr0000nnhs67ybijnvr","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfsb005qnhs6oekyjh10"},{"post_id":"cl1i5hfr0000nnhs67ybijnvr","tag_id":"cl1i5hfrd001hnhs6cy6df3z9","_id":"cl1i5hfsb005rnhs6nmvjm2zo"},{"post_id":"cl1i5hfr0000nnhs67ybijnvr","tag_id":"cl1i5hfs9005jnhs6tqwjnxbc","_id":"cl1i5hfsb005tnhs67xhv7tkp"},{"post_id":"cl1i5hfr0000nnhs67ybijnvr","tag_id":"cl1i5hfsa005mnhs6383nuq7u","_id":"cl1i5hfsb005unhs6b4rd8lqi"},{"post_id":"cl1i5hfr0000nnhs67ybijnvr","tag_id":"cl1i5hfsa005onhs6z3kobdhj","_id":"cl1i5hfsb005wnhs60b56iljc"},{"post_id":"cl1i5hfr1000onhs6fqs6tqzh","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfsc005ynhs6exiq0zsh"},{"post_id":"cl1i5hfr1000onhs6fqs6tqzh","tag_id":"cl1i5hfsb005snhs6hqk27dgq","_id":"cl1i5hfsc005znhs6xfx6womg"},{"post_id":"cl1i5hfr1000onhs6fqs6tqzh","tag_id":"cl1i5hfsb005vnhs6gvy6q4j3","_id":"cl1i5hfsc0061nhs6mi8elcco"},{"post_id":"cl1i5hfr2000qnhs6fiahpwzz","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfse0068nhs69pp3gi5o"},{"post_id":"cl1i5hfr2000qnhs6fiahpwzz","tag_id":"cl1i5hfsc0060nhs6qccmogy3","_id":"cl1i5hfse0069nhs6vmhtcuu3"},{"post_id":"cl1i5hfr2000qnhs6fiahpwzz","tag_id":"cl1i5hfsc0062nhs6vkw620zb","_id":"cl1i5hfsf006bnhs6cwm0d6c7"},{"post_id":"cl1i5hfr2000qnhs6fiahpwzz","tag_id":"cl1i5hfsd0063nhs6lpair8sm","_id":"cl1i5hfsf006cnhs6ylpejgyu"},{"post_id":"cl1i5hfr2000qnhs6fiahpwzz","tag_id":"cl1i5hfsd0064nhs6hydl3k08","_id":"cl1i5hfsf006enhs6xs22ymtl"},{"post_id":"cl1i5hfr2000qnhs6fiahpwzz","tag_id":"cl1i5hfsd0065nhs6xsjpjbps","_id":"cl1i5hfsf006fnhs6ir0iu5d7"},{"post_id":"cl1i5hfr2000qnhs6fiahpwzz","tag_id":"cl1i5hfrd001hnhs6cy6df3z9","_id":"cl1i5hfsg006hnhs6st7ymazt"},{"post_id":"cl1i5hfr3000rnhs6znpjo85q","tag_id":"cl1i5hfsb005vnhs6gvy6q4j3","_id":"cl1i5hfsg006inhs6p0xhalkh"},{"post_id":"cl1i5hfr3000rnhs6znpjo85q","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfsg006knhs654fb7uyp"},{"post_id":"cl1i5hfr3000rnhs6znpjo85q","tag_id":"cl1i5hfsa005onhs6z3kobdhj","_id":"cl1i5hfsh006lnhs6ou86hl4e"},{"post_id":"cl1i5hfr4000tnhs63i93gn6t","tag_id":"cl1i5hfsf006gnhs6kdsh7ryl","_id":"cl1i5hfsh006onhs61h9nosmh"},{"post_id":"cl1i5hfr4000tnhs63i93gn6t","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfsh006pnhs6tel99rkg"},{"post_id":"cl1i5hfr4000tnhs63i93gn6t","tag_id":"cl1i5hfsh006mnhs68zpm7q3t","_id":"cl1i5hfsi006rnhs6bg9k6515"},{"post_id":"cl1i5hfr6000vnhs651j0mbmq","tag_id":"cl1i5hfsh006nnhs6jgpy3cb5","_id":"cl1i5hfsi006snhs6k5xic1js"},{"post_id":"cl1i5hfr7000xnhs6laacult5","tag_id":"cl1i5hfrk002knhs6huzn3tb0","_id":"cl1i5hfsl006xnhs6wk6q0u69"},{"post_id":"cl1i5hfr7000xnhs6laacult5","tag_id":"cl1i5hfrk002nnhs6gxhfv19s","_id":"cl1i5hfsl006ynhs6rrbcb14f"},{"post_id":"cl1i5hfr7000xnhs6laacult5","tag_id":"cl1i5hfrk002qnhs64pz7m5ol","_id":"cl1i5hfsl0070nhs6qqx4g1jk"},{"post_id":"cl1i5hfr7000xnhs6laacult5","tag_id":"cl1i5hfsj006vnhs6xdm0w5z3","_id":"cl1i5hfsm0071nhs68mpjqmoz"},{"post_id":"cl1i5hfr7000xnhs6laacult5","tag_id":"cl1i5hfr4000snhs695baqkpx","_id":"cl1i5hfsm0073nhs6zu4jxor2"},{"post_id":"cl1i5hfr80010nhs6nanjmkxt","tag_id":"cl1i5hfsb005vnhs6gvy6q4j3","_id":"cl1i5hfsm0074nhs6r336unn5"},{"post_id":"cl1i5hfr80010nhs6nanjmkxt","tag_id":"cl1i5hfsl006znhs6p78qjuvt","_id":"cl1i5hfsm0075nhs63ku6dcf0"},{"post_id":"cl1i5hfr80010nhs6nanjmkxt","tag_id":"cl1i5hfsm0072nhs6lt2f1m3h","_id":"cl1i5hfsm0076nhs61fpg8vyt"}],"Tag":[{"name":"Wifi Direct","_id":"cl1i5hfqg0002nhs65qb6xdwg"},{"name":"NDS","_id":"cl1i5hfqm0006nhs6q0b3x04v"},{"name":"MDNS","_id":"cl1i5hfqp0009nhs6i384693e"},{"name":"DNS-SD","_id":"cl1i5hfqs000cnhs61igq0y00"},{"name":"iOS","_id":"cl1i5hfqv000fnhs65qrnggiy"},{"name":"Andoid","_id":"cl1i5hfqy000jnhs6mihr3l96"},{"name":"无网通信","_id":"cl1i5hfr0000mnhs6huov2cws"},{"name":"BLE","_id":"cl1i5hfr2000pnhs6gwydz59x"},{"name":"IOS","_id":"cl1i5hfr4000snhs695baqkpx"},{"name":"OSX","_id":"cl1i5hfr8000ynhs6su0f7lg6"},{"name":"安保系统","_id":"cl1i5hfr90012nhs69vhlqvh0"},{"name":"Crash防御","_id":"cl1i5hfra0015nhs6mimu94ax"},{"name":"Cocoa","_id":"cl1i5hfra0018nhs6egcbc004"},{"name":"工程管理","_id":"cl1i5hfra0019nhs61lam1lvn"},{"name":"组件化","_id":"cl1i5hfrc001fnhs60e1p02py"},{"name":"CocoaPods","_id":"cl1i5hfrd001hnhs6cy6df3z9"},{"name":"动/静态库","_id":"cl1i5hfrd001inhs67kj88b9d"},{"name":"网络","_id":"cl1i5hfrd001jnhs6wcdtfzg5"},{"name":"Content-Type","_id":"cl1i5hfrd001mnhs69jriz9vu"},{"name":"AES-128-CBC","_id":"cl1i5hfre001pnhs6dweg7vxm"},{"name":"Objective-C","_id":"cl1i5hfre001snhs670b3d82y"},{"name":"Java","_id":"cl1i5hfre001unhs6nhtv15tm"},{"name":"Golang","_id":"cl1i5hfrf001vnhs6dexl7e2w"},{"name":"百行代码系列","_id":"cl1i5hfrf001znhs64qzms3ob"},{"name":"切面","_id":"cl1i5hfrg0022nhs62gkwrk85"},{"name":"AOP","_id":"cl1i5hfrg0023nhs6wnpzg4os"},{"name":"日志","_id":"cl1i5hfrg0024nhs69ocw2s8x"},{"name":"AOP解耦","_id":"cl1i5hfri002enhs604d7r5zj"},{"name":"架构","_id":"cl1i5hfrj002fnhs6gqlf9vzz"},{"name":"统计","_id":"cl1i5hfrj002gnhs6iz6upzca"},{"name":"网络层","_id":"cl1i5hfrk002knhs6huzn3tb0"},{"name":"自动化","_id":"cl1i5hfrk002nnhs6gxhfv19s"},{"name":"架构设计","_id":"cl1i5hfrk002qnhs64pz7m5ol"},{"name":"实用技巧","_id":"cl1i5hfrk002snhs6hxv4k638"},{"name":"授权","_id":"cl1i5hfrl002ynhs6ucmipijp"},{"name":"地理位置","_id":"cl1i5hfrl002znhs6g0wgvzzr"},{"name":"网络判断","_id":"cl1i5hfrm0030nhs6zx0053yk"},{"name":"相册","_id":"cl1i5hfrm0031nhs6vtfjo2q6"},{"name":"相机","_id":"cl1i5hfrm0032nhs6fju1fy04"},{"name":"麦克风","_id":"cl1i5hfrm0033nhs6bmq9a5sa"},{"name":"通讯录","_id":"cl1i5hfrm0034nhs6rwizze0n"},{"name":"蜂窝网络","_id":"cl1i5hfrn0035nhs68a3i1okn"},{"name":"本地化/国际化","_id":"cl1i5hfrp003fnhs6y6iczcvd"},{"name":"翻译","_id":"cl1i5hfrp003inhs6zlcpds4x"},{"name":"数学函数","_id":"cl1i5hfrr003onhs6ymbh3cpr"},{"name":"构建","_id":"cl1i5hfrs003unhs6d38rgcuz"},{"name":"编译","_id":"cl1i5hfrs003wnhs6cpu4pv3m"},{"name":"Linux","_id":"cl1i5hfrt003xnhs6d57c15g1"},{"name":"Mesh组网","_id":"cl1i5hfrt003znhs6kmqwrdp7"},{"name":"异地组网","_id":"cl1i5hfru0042nhs6f42qgrio"},{"name":"OpenWRT","_id":"cl1i5hfrv0045nhs664neir6c"},{"name":"Libremesh","_id":"cl1i5hfrv0047nhs6b6w9rhep"},{"name":"batman","_id":"cl1i5hfrw0048nhs6tnyteonh"},{"name":"bmx","_id":"cl1i5hfrw0049nhs6hrdzer1m"},{"name":"OpenVPN","_id":"cl1i5hfrw004anhs6vbqowqzc"},{"name":"frp","_id":"cl1i5hfrw004bnhs607udmvmv"},{"name":"LLVM","_id":"cl1i5hfs0004onhs6fmbj66vv"},{"name":"OLLVM","_id":"cl1i5hfs2004rnhs6jfxjv6rm"},{"name":"Clang","_id":"cl1i5hfs2004unhs60nuhcbpa"},{"name":"混淆","_id":"cl1i5hfs3004vnhs6tr22ogsf"},{"name":"XCode","_id":"cl1i5hfs3004wnhs6l448va25"},{"name":"NDK","_id":"cl1i5hfs3004xnhs621dzmfyh"},{"name":"Visual Studio","_id":"cl1i5hfs3004ynhs645hvbcvc"},{"name":"动态库","_id":"cl1i5hfs9005jnhs6tqwjnxbc"},{"name":"Framework","_id":"cl1i5hfsa005mnhs6383nuq7u"},{"name":"静态库","_id":"cl1i5hfsa005onhs6z3kobdhj"},{"name":"WebView","_id":"cl1i5hfsb005snhs6hqk27dgq"},{"name":"常见开发误区","_id":"cl1i5hfsb005vnhs6gvy6q4j3"},{"name":"Scheme","_id":"cl1i5hfsc0060nhs6qccmogy3"},{"name":"预编译宏","_id":"cl1i5hfsc0062nhs6vkw620zb"},{"name":"Configurations","_id":"cl1i5hfsd0063nhs6lpair8sm"},{"name":"Preprocessor Macros","_id":"cl1i5hfsd0064nhs6hydl3k08"},{"name":"User-Defined-Setting","_id":"cl1i5hfsd0065nhs6xsjpjbps"},{"name":"JavaScript","_id":"cl1i5hfsf006gnhs6kdsh7ryl"},{"name":"Android","_id":"cl1i5hfsh006mnhs68zpm7q3t"},{"name":"FFmpeg","_id":"cl1i5hfsh006nnhs6jgpy3cb5"},{"name":"Model层","_id":"cl1i5hfsj006vnhs6xdm0w5z3"},{"name":"视频","_id":"cl1i5hfsl006znhs6p78qjuvt"},{"name":"GPUImage","_id":"cl1i5hfsm0072nhs6lt2f1m3h"}]}}